
audio.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009504  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000130f0  080096d4  080096d4  000196d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801c7c4  0801c7c4  00030070  2**0
                  CONTENTS
  4 .ARM          00000008  0801c7c4  0801c7c4  0002c7c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801c7cc  0801c7cc  00030070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801c7cc  0801c7cc  0002c7cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801c7d0  0801c7d0  0002c7d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0801c7d4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000834  20000070  0801c844  00030070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200008a4  0801c844  000308a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019f0f  00000000  00000000  000300a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b47  00000000  00000000  00049faf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f08  00000000  00000000  0004daf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e38  00000000  00000000  0004ea00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003f13  00000000  00000000  0004f838  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014c41  00000000  00000000  0005374b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d34f6  00000000  00000000  0006838c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c5  00000000  00000000  0013b882  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004358  00000000  00000000  0013b948  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    000038a2  00000000  00000000  0013fca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080096bc 	.word	0x080096bc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	080096bc 	.word	0x080096bc

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80005b4:	b480      	push	{r7}
 80005b6:	b083      	sub	sp, #12
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005bc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005c0:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80005c4:	f003 0301 	and.w	r3, r3, #1
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d013      	beq.n	80005f4 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80005cc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005d0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80005d4:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d00b      	beq.n	80005f4 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80005dc:	e000      	b.n	80005e0 <ITM_SendChar+0x2c>
    {
      __NOP();
 80005de:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80005e0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d0f9      	beq.n	80005de <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80005ea:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005ee:	687a      	ldr	r2, [r7, #4]
 80005f0:	b2d2      	uxtb	r2, r2
 80005f2:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80005f4:	687b      	ldr	r3, [r7, #4]
}
 80005f6:	4618      	mov	r0, r3
 80005f8:	370c      	adds	r7, #12
 80005fa:	46bd      	mov	sp, r7
 80005fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000600:	4770      	bx	lr
	...

08000604 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b084      	sub	sp, #16
 8000608:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800060a:	f000 fe5d 	bl	80012c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800060e:	f000 f8f1 	bl	80007f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000612:	f000 f9f9 	bl	8000a08 <MX_GPIO_Init>
  MX_DMA_Init();
 8000616:	f000 f9cf 	bl	80009b8 <MX_DMA_Init>
  MX_I2S2_Init();
 800061a:	f000 f955 	bl	80008c8 <MX_I2S2_Init>
  MX_SDIO_SD_Init();
 800061e:	f000 f981 	bl	8000924 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 8000622:	f006 fc8b 	bl	8006f3c <MX_FATFS_Init>
  MX_USART2_UART_Init();
 8000626:	f000 f99d 	bl	8000964 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_I2S_DMAStop(&hi2s2);
 800062a:	4861      	ldr	r0, [pc, #388]	; (80007b0 <main+0x1ac>)
 800062c:	f001 ff88 	bl	8002540 <HAL_I2S_DMAStop>
  HAL_Delay(500);
 8000630:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000634:	f000 feba 	bl	80013ac <HAL_Delay>
  //	Initializing FFT. We apply FFT for the first microphone and half of the buffer.
  //	Therefore we divide by four: WAV_WRITE_SAMPLE_COUNT / 4
  arm_rfft_fast_init_f32(&fft_audio_instance, WAV_WRITE_SAMPLE_COUNT / 4);
 8000638:	2140      	movs	r1, #64	; 0x40
 800063a:	485e      	ldr	r0, [pc, #376]	; (80007b4 <main+0x1b0>)
 800063c:	f006 ff40 	bl	80074c0 <arm_rfft_fast_init_f32>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // when button is pressed
	  if(button_flag)
 8000640:	4b5d      	ldr	r3, [pc, #372]	; (80007b8 <main+0x1b4>)
 8000642:	781b      	ldrb	r3, [r3, #0]
 8000644:	b2db      	uxtb	r3, r3
 8000646:	2b00      	cmp	r3, #0
 8000648:	d023      	beq.n	8000692 <main+0x8e>
	  {
		  //	stop recording: stop I2S DMA
		  if(start_stop_recording)
 800064a:	4b5c      	ldr	r3, [pc, #368]	; (80007bc <main+0x1b8>)
 800064c:	781b      	ldrb	r3, [r3, #0]
 800064e:	b2db      	uxtb	r3, r3
 8000650:	2b00      	cmp	r3, #0
 8000652:	d00f      	beq.n	8000674 <main+0x70>
		  {
			  HAL_I2S_DMAStop(&hi2s2);
 8000654:	4856      	ldr	r0, [pc, #344]	; (80007b0 <main+0x1ac>)
 8000656:	f001 ff73 	bl	8002540 <HAL_I2S_DMAStop>
			  start_stop_recording = 0;
 800065a:	4b58      	ldr	r3, [pc, #352]	; (80007bc <main+0x1b8>)
 800065c:	2200      	movs	r2, #0
 800065e:	701a      	strb	r2, [r3, #0]
			  half_i2s = 0;
 8000660:	4b57      	ldr	r3, [pc, #348]	; (80007c0 <main+0x1bc>)
 8000662:	2200      	movs	r2, #0
 8000664:	701a      	strb	r2, [r3, #0]
			  full_i2s = 0;
 8000666:	4b57      	ldr	r3, [pc, #348]	; (80007c4 <main+0x1c0>)
 8000668:	2200      	movs	r2, #0
 800066a:	701a      	strb	r2, [r3, #0]
			  printf("stop recording \n");
 800066c:	4856      	ldr	r0, [pc, #344]	; (80007c8 <main+0x1c4>)
 800066e:	f008 f885 	bl	800877c <puts>
 8000672:	e00b      	b.n	800068c <main+0x88>
		  }

		  // start recording: start DMA
		  else
		  {
			  start_stop_recording = 1;
 8000674:	4b51      	ldr	r3, [pc, #324]	; (80007bc <main+0x1b8>)
 8000676:	2201      	movs	r2, #1
 8000678:	701a      	strb	r2, [r3, #0]
			  printf("start_recording");
 800067a:	4854      	ldr	r0, [pc, #336]	; (80007cc <main+0x1c8>)
 800067c:	f007 fff8 	bl	8008670 <iprintf>
			  HAL_I2S_Receive_DMA(&hi2s2, (uint16_t *)data_i2s, sizeof(data_i2s)/2);
 8000680:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000684:	4952      	ldr	r1, [pc, #328]	; (80007d0 <main+0x1cc>)
 8000686:	484a      	ldr	r0, [pc, #296]	; (80007b0 <main+0x1ac>)
 8000688:	f001 fe9e 	bl	80023c8 <HAL_I2S_Receive_DMA>
		  }
		  button_flag = 0;
 800068c:	4b4a      	ldr	r3, [pc, #296]	; (80007b8 <main+0x1b4>)
 800068e:	2200      	movs	r2, #0
 8000690:	701a      	strb	r2, [r3, #0]
	  }
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  // When half of the buffer is full
	  if(start_stop_recording == 1 && half_i2s == 1)
 8000692:	4b4a      	ldr	r3, [pc, #296]	; (80007bc <main+0x1b8>)
 8000694:	781b      	ldrb	r3, [r3, #0]
 8000696:	b2db      	uxtb	r3, r3
 8000698:	2b01      	cmp	r3, #1
 800069a:	d14a      	bne.n	8000732 <main+0x12e>
 800069c:	4b48      	ldr	r3, [pc, #288]	; (80007c0 <main+0x1bc>)
 800069e:	781b      	ldrb	r3, [r3, #0]
 80006a0:	b2db      	uxtb	r3, r3
 80006a2:	2b01      	cmp	r3, #1
 80006a4:	d145      	bne.n	8000732 <main+0x12e>
	  {
		  // extracting the data of the first microphone
		  for(int i = 0; i < WAV_WRITE_SAMPLE_COUNT / 4; i++ )
 80006a6:	2300      	movs	r3, #0
 80006a8:	60bb      	str	r3, [r7, #8]
 80006aa:	e011      	b.n	80006d0 <main+0xcc>
		  {
			  mic1_data1[i] = (float32_t)data_i2s[i * 2];
 80006ac:	68bb      	ldr	r3, [r7, #8]
 80006ae:	005b      	lsls	r3, r3, #1
 80006b0:	4a47      	ldr	r2, [pc, #284]	; (80007d0 <main+0x1cc>)
 80006b2:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80006b6:	ee07 3a90 	vmov	s15, r3
 80006ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80006be:	4a45      	ldr	r2, [pc, #276]	; (80007d4 <main+0x1d0>)
 80006c0:	68bb      	ldr	r3, [r7, #8]
 80006c2:	009b      	lsls	r3, r3, #2
 80006c4:	4413      	add	r3, r2
 80006c6:	edc3 7a00 	vstr	s15, [r3]
		  for(int i = 0; i < WAV_WRITE_SAMPLE_COUNT / 4; i++ )
 80006ca:	68bb      	ldr	r3, [r7, #8]
 80006cc:	3301      	adds	r3, #1
 80006ce:	60bb      	str	r3, [r7, #8]
 80006d0:	68bb      	ldr	r3, [r7, #8]
 80006d2:	2b3f      	cmp	r3, #63	; 0x3f
 80006d4:	ddea      	ble.n	80006ac <main+0xa8>
		  }
		  // apply FFT
		  arm_rfft_fast_f32(&fft_audio_instance, mic1_data1, data_out_fft1, 0);
 80006d6:	2300      	movs	r3, #0
 80006d8:	4a3f      	ldr	r2, [pc, #252]	; (80007d8 <main+0x1d4>)
 80006da:	493e      	ldr	r1, [pc, #248]	; (80007d4 <main+0x1d0>)
 80006dc:	4835      	ldr	r0, [pc, #212]	; (80007b4 <main+0x1b0>)
 80006de:	f006 ffd3 	bl	8007688 <arm_rfft_fast_f32>
		  // extract absolute values by computing the magnitude of the complex numbers
		  // Pay attention that after this operation, half of the buffer possesses the magnitudes
		  arm_cmplx_mag_f32(
 80006e2:	2220      	movs	r2, #32
 80006e4:	493c      	ldr	r1, [pc, #240]	; (80007d8 <main+0x1d4>)
 80006e6:	483c      	ldr	r0, [pc, #240]	; (80007d8 <main+0x1d4>)
 80006e8:	f007 fbac 	bl	8007e44 <arm_cmplx_mag_f32>
				  data_out_fft1,
				  data_out_fft1,
				  WAV_WRITE_SAMPLE_COUNT / 8);
		  // bias removal
		  data_out_fft1[0] = 0;
 80006ec:	4b3a      	ldr	r3, [pc, #232]	; (80007d8 <main+0x1d4>)
 80006ee:	f04f 0200 	mov.w	r2, #0
 80006f2:	601a      	str	r2, [r3, #0]
		  if(full_i2s == 1)
 80006f4:	4b33      	ldr	r3, [pc, #204]	; (80007c4 <main+0x1c0>)
 80006f6:	781b      	ldrb	r3, [r3, #0]
 80006f8:	b2db      	uxtb	r3, r3
 80006fa:	2b01      	cmp	r3, #1
 80006fc:	d102      	bne.n	8000704 <main+0x100>
		  {
			  printf("d \n");
 80006fe:	4837      	ldr	r0, [pc, #220]	; (80007dc <main+0x1d8>)
 8000700:	f008 f83c 	bl	800877c <puts>
		  }
		  uart_counter++;
 8000704:	7bfb      	ldrb	r3, [r7, #15]
 8000706:	3301      	adds	r3, #1
 8000708:	73fb      	strb	r3, [r7, #15]
		  //	setting ">>>>" to indicate the end of the buffer
	  	  data_out_fft1[WAV_WRITE_SAMPLE_COUNT / 8] = ('>'<<24|'>'<<16|'>'<<8|'>');
 800070a:	4b33      	ldr	r3, [pc, #204]	; (80007d8 <main+0x1d4>)
 800070c:	4a34      	ldr	r2, [pc, #208]	; (80007e0 <main+0x1dc>)
 800070e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

	  if (uart_counter == 30)
 8000712:	7bfb      	ldrb	r3, [r7, #15]
 8000714:	2b1e      	cmp	r3, #30
 8000716:	d109      	bne.n	800072c <main+0x128>
		  {
			  printf("uart start\n");
 8000718:	4832      	ldr	r0, [pc, #200]	; (80007e4 <main+0x1e0>)
 800071a:	f008 f82f 	bl	800877c <puts>
			  uart_counter = 0;
 800071e:	2300      	movs	r3, #0
 8000720:	73fb      	strb	r3, [r7, #15]
			  //	sending only half of the buffer
			  HAL_UART_Transmit_DMA(&huart2, (uint8_t *)&data_out_fft1, sizeof(data_out_fft1) / 2 + 4);
 8000722:	2284      	movs	r2, #132	; 0x84
 8000724:	492c      	ldr	r1, [pc, #176]	; (80007d8 <main+0x1d4>)
 8000726:	4830      	ldr	r0, [pc, #192]	; (80007e8 <main+0x1e4>)
 8000728:	f004 fe82 	bl	8005430 <HAL_UART_Transmit_DMA>
		  }
		  half_i2s = 0;
 800072c:	4b24      	ldr	r3, [pc, #144]	; (80007c0 <main+0x1bc>)
 800072e:	2200      	movs	r2, #0
 8000730:	701a      	strb	r2, [r3, #0]
	  }

	  //	THe buffer is full
	  if(start_stop_recording == 1 && full_i2s == 1)
 8000732:	4b22      	ldr	r3, [pc, #136]	; (80007bc <main+0x1b8>)
 8000734:	781b      	ldrb	r3, [r3, #0]
 8000736:	b2db      	uxtb	r3, r3
 8000738:	2b01      	cmp	r3, #1
 800073a:	d181      	bne.n	8000640 <main+0x3c>
 800073c:	4b21      	ldr	r3, [pc, #132]	; (80007c4 <main+0x1c0>)
 800073e:	781b      	ldrb	r3, [r3, #0]
 8000740:	b2db      	uxtb	r3, r3
 8000742:	2b01      	cmp	r3, #1
 8000744:	f47f af7c 	bne.w	8000640 <main+0x3c>
	  {
		  // extracting the data of the first microphone
		  for(int i = 0; i < WAV_WRITE_SAMPLE_COUNT / 4; i++ )
 8000748:	2300      	movs	r3, #0
 800074a:	607b      	str	r3, [r7, #4]
 800074c:	e012      	b.n	8000774 <main+0x170>
		  {
			  mic1_data2[i] = (float32_t)data_i2s[i * 2 +
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	3340      	adds	r3, #64	; 0x40
 8000752:	005b      	lsls	r3, r3, #1
 8000754:	4a1e      	ldr	r2, [pc, #120]	; (80007d0 <main+0x1cc>)
 8000756:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800075a:	ee07 3a90 	vmov	s15, r3
 800075e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000762:	4a22      	ldr	r2, [pc, #136]	; (80007ec <main+0x1e8>)
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	009b      	lsls	r3, r3, #2
 8000768:	4413      	add	r3, r2
 800076a:	edc3 7a00 	vstr	s15, [r3]
		  for(int i = 0; i < WAV_WRITE_SAMPLE_COUNT / 4; i++ )
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	3301      	adds	r3, #1
 8000772:	607b      	str	r3, [r7, #4]
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	2b3f      	cmp	r3, #63	; 0x3f
 8000778:	dde9      	ble.n	800074e <main+0x14a>
												WAV_WRITE_SAMPLE_COUNT / 2];
		  }
		  // applying FFT
		  arm_rfft_fast_f32(&fft_audio_instance, mic1_data2, data_out_fft2, 0);
 800077a:	2300      	movs	r3, #0
 800077c:	4a1c      	ldr	r2, [pc, #112]	; (80007f0 <main+0x1ec>)
 800077e:	491b      	ldr	r1, [pc, #108]	; (80007ec <main+0x1e8>)
 8000780:	480c      	ldr	r0, [pc, #48]	; (80007b4 <main+0x1b0>)
 8000782:	f006 ff81 	bl	8007688 <arm_rfft_fast_f32>
		  // extract absolute values by computing the magnitude of the complex numbers
		  // Pay attention that after this operation, half of the buffer possesses the magnitudes
		  arm_cmplx_mag_f32(
 8000786:	2220      	movs	r2, #32
 8000788:	4919      	ldr	r1, [pc, #100]	; (80007f0 <main+0x1ec>)
 800078a:	4819      	ldr	r0, [pc, #100]	; (80007f0 <main+0x1ec>)
 800078c:	f007 fb5a 	bl	8007e44 <arm_cmplx_mag_f32>
				  data_out_fft2,
				  data_out_fft2,
				  WAV_WRITE_SAMPLE_COUNT / 8);
		  // bias removal
		  data_out_fft2[0] = 0;
 8000790:	4b17      	ldr	r3, [pc, #92]	; (80007f0 <main+0x1ec>)
 8000792:	f04f 0200 	mov.w	r2, #0
 8000796:	601a      	str	r2, [r3, #0]
		  if(half_i2s == 1)
 8000798:	4b09      	ldr	r3, [pc, #36]	; (80007c0 <main+0x1bc>)
 800079a:	781b      	ldrb	r3, [r3, #0]
 800079c:	b2db      	uxtb	r3, r3
 800079e:	2b01      	cmp	r3, #1
 80007a0:	d102      	bne.n	80007a8 <main+0x1a4>
		  {
			  printf("d \n");
 80007a2:	480e      	ldr	r0, [pc, #56]	; (80007dc <main+0x1d8>)
 80007a4:	f007 ffea 	bl	800877c <puts>
		  }
		  full_i2s = 0;
 80007a8:	4b06      	ldr	r3, [pc, #24]	; (80007c4 <main+0x1c0>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	701a      	strb	r2, [r3, #0]
	  if(button_flag)
 80007ae:	e747      	b.n	8000640 <main+0x3c>
 80007b0:	2000008c 	.word	0x2000008c
 80007b4:	20000860 	.word	0x20000860
 80007b8:	2000085c 	.word	0x2000085c
 80007bc:	2000085d 	.word	0x2000085d
 80007c0:	2000085e 	.word	0x2000085e
 80007c4:	2000085f 	.word	0x2000085f
 80007c8:	080096d4 	.word	0x080096d4
 80007cc:	080096e4 	.word	0x080096e4
 80007d0:	2000025c 	.word	0x2000025c
 80007d4:	2000045c 	.word	0x2000045c
 80007d8:	2000065c 	.word	0x2000065c
 80007dc:	080096f4 	.word	0x080096f4
 80007e0:	4e78f8f9 	.word	0x4e78f8f9
 80007e4:	080096f8 	.word	0x080096f8
 80007e8:	200001b8 	.word	0x200001b8
 80007ec:	2000055c 	.word	0x2000055c
 80007f0:	2000075c 	.word	0x2000075c

080007f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b094      	sub	sp, #80	; 0x50
 80007f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007fa:	f107 031c 	add.w	r3, r7, #28
 80007fe:	2234      	movs	r2, #52	; 0x34
 8000800:	2100      	movs	r1, #0
 8000802:	4618      	mov	r0, r3
 8000804:	f007 ff2c 	bl	8008660 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000808:	f107 0308 	add.w	r3, r7, #8
 800080c:	2200      	movs	r2, #0
 800080e:	601a      	str	r2, [r3, #0]
 8000810:	605a      	str	r2, [r3, #4]
 8000812:	609a      	str	r2, [r3, #8]
 8000814:	60da      	str	r2, [r3, #12]
 8000816:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000818:	2300      	movs	r3, #0
 800081a:	607b      	str	r3, [r7, #4]
 800081c:	4b28      	ldr	r3, [pc, #160]	; (80008c0 <SystemClock_Config+0xcc>)
 800081e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000820:	4a27      	ldr	r2, [pc, #156]	; (80008c0 <SystemClock_Config+0xcc>)
 8000822:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000826:	6413      	str	r3, [r2, #64]	; 0x40
 8000828:	4b25      	ldr	r3, [pc, #148]	; (80008c0 <SystemClock_Config+0xcc>)
 800082a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800082c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000830:	607b      	str	r3, [r7, #4]
 8000832:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000834:	2300      	movs	r3, #0
 8000836:	603b      	str	r3, [r7, #0]
 8000838:	4b22      	ldr	r3, [pc, #136]	; (80008c4 <SystemClock_Config+0xd0>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	4a21      	ldr	r2, [pc, #132]	; (80008c4 <SystemClock_Config+0xd0>)
 800083e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000842:	6013      	str	r3, [r2, #0]
 8000844:	4b1f      	ldr	r3, [pc, #124]	; (80008c4 <SystemClock_Config+0xd0>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800084c:	603b      	str	r3, [r7, #0]
 800084e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000850:	2302      	movs	r3, #2
 8000852:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000854:	2301      	movs	r3, #1
 8000856:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000858:	2310      	movs	r3, #16
 800085a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800085c:	2302      	movs	r3, #2
 800085e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000860:	2300      	movs	r3, #0
 8000862:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000864:	2308      	movs	r3, #8
 8000866:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000868:	23a8      	movs	r3, #168	; 0xa8
 800086a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800086c:	2302      	movs	r3, #2
 800086e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000870:	2307      	movs	r3, #7
 8000872:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000874:	f107 031c 	add.w	r3, r7, #28
 8000878:	4618      	mov	r0, r3
 800087a:	f003 f963 	bl	8003b44 <HAL_RCC_OscConfig>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d001      	beq.n	8000888 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000884:	f000 fa62 	bl	8000d4c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000888:	230f      	movs	r3, #15
 800088a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800088c:	2302      	movs	r3, #2
 800088e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000890:	2300      	movs	r3, #0
 8000892:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000894:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000898:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800089a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800089e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80008a0:	f107 0308 	add.w	r3, r7, #8
 80008a4:	2105      	movs	r1, #5
 80008a6:	4618      	mov	r0, r3
 80008a8:	f002 f890 	bl	80029cc <HAL_RCC_ClockConfig>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d001      	beq.n	80008b6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80008b2:	f000 fa4b 	bl	8000d4c <Error_Handler>
  }
}
 80008b6:	bf00      	nop
 80008b8:	3750      	adds	r7, #80	; 0x50
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	40023800 	.word	0x40023800
 80008c4:	40007000 	.word	0x40007000

080008c8 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 80008cc:	4b13      	ldr	r3, [pc, #76]	; (800091c <MX_I2S2_Init+0x54>)
 80008ce:	4a14      	ldr	r2, [pc, #80]	; (8000920 <MX_I2S2_Init+0x58>)
 80008d0:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 80008d2:	4b12      	ldr	r3, [pc, #72]	; (800091c <MX_I2S2_Init+0x54>)
 80008d4:	f44f 7240 	mov.w	r2, #768	; 0x300
 80008d8:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 80008da:	4b10      	ldr	r3, [pc, #64]	; (800091c <MX_I2S2_Init+0x54>)
 80008dc:	2200      	movs	r2, #0
 80008de:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B_EXTENDED;
 80008e0:	4b0e      	ldr	r3, [pc, #56]	; (800091c <MX_I2S2_Init+0x54>)
 80008e2:	2201      	movs	r2, #1
 80008e4:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 80008e6:	4b0d      	ldr	r3, [pc, #52]	; (800091c <MX_I2S2_Init+0x54>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_32K;
 80008ec:	4b0b      	ldr	r3, [pc, #44]	; (800091c <MX_I2S2_Init+0x54>)
 80008ee:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 80008f2:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 80008f4:	4b09      	ldr	r3, [pc, #36]	; (800091c <MX_I2S2_Init+0x54>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 80008fa:	4b08      	ldr	r3, [pc, #32]	; (800091c <MX_I2S2_Init+0x54>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000900:	4b06      	ldr	r3, [pc, #24]	; (800091c <MX_I2S2_Init+0x54>)
 8000902:	2200      	movs	r2, #0
 8000904:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000906:	4805      	ldr	r0, [pc, #20]	; (800091c <MX_I2S2_Init+0x54>)
 8000908:	f001 fc66 	bl	80021d8 <HAL_I2S_Init>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <MX_I2S2_Init+0x4e>
  {
    Error_Handler();
 8000912:	f000 fa1b 	bl	8000d4c <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8000916:	bf00      	nop
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	2000008c 	.word	0x2000008c
 8000920:	40003800 	.word	0x40003800

08000924 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8000928:	4b0c      	ldr	r3, [pc, #48]	; (800095c <MX_SDIO_SD_Init+0x38>)
 800092a:	4a0d      	ldr	r2, [pc, #52]	; (8000960 <MX_SDIO_SD_Init+0x3c>)
 800092c:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 800092e:	4b0b      	ldr	r3, [pc, #44]	; (800095c <MX_SDIO_SD_Init+0x38>)
 8000930:	2200      	movs	r2, #0
 8000932:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8000934:	4b09      	ldr	r3, [pc, #36]	; (800095c <MX_SDIO_SD_Init+0x38>)
 8000936:	2200      	movs	r2, #0
 8000938:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800093a:	4b08      	ldr	r3, [pc, #32]	; (800095c <MX_SDIO_SD_Init+0x38>)
 800093c:	2200      	movs	r2, #0
 800093e:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8000940:	4b06      	ldr	r3, [pc, #24]	; (800095c <MX_SDIO_SD_Init+0x38>)
 8000942:	2200      	movs	r2, #0
 8000944:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8000946:	4b05      	ldr	r3, [pc, #20]	; (800095c <MX_SDIO_SD_Init+0x38>)
 8000948:	2200      	movs	r2, #0
 800094a:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 8;
 800094c:	4b03      	ldr	r3, [pc, #12]	; (800095c <MX_SDIO_SD_Init+0x38>)
 800094e:	2208      	movs	r2, #8
 8000950:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */
  /* USER CODE END SDIO_Init 2 */

}
 8000952:	bf00      	nop
 8000954:	46bd      	mov	sp, r7
 8000956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095a:	4770      	bx	lr
 800095c:	20000134 	.word	0x20000134
 8000960:	40012c00 	.word	0x40012c00

08000964 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000968:	4b11      	ldr	r3, [pc, #68]	; (80009b0 <MX_USART2_UART_Init+0x4c>)
 800096a:	4a12      	ldr	r2, [pc, #72]	; (80009b4 <MX_USART2_UART_Init+0x50>)
 800096c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800096e:	4b10      	ldr	r3, [pc, #64]	; (80009b0 <MX_USART2_UART_Init+0x4c>)
 8000970:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000974:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000976:	4b0e      	ldr	r3, [pc, #56]	; (80009b0 <MX_USART2_UART_Init+0x4c>)
 8000978:	2200      	movs	r2, #0
 800097a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800097c:	4b0c      	ldr	r3, [pc, #48]	; (80009b0 <MX_USART2_UART_Init+0x4c>)
 800097e:	2200      	movs	r2, #0
 8000980:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000982:	4b0b      	ldr	r3, [pc, #44]	; (80009b0 <MX_USART2_UART_Init+0x4c>)
 8000984:	2200      	movs	r2, #0
 8000986:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000988:	4b09      	ldr	r3, [pc, #36]	; (80009b0 <MX_USART2_UART_Init+0x4c>)
 800098a:	220c      	movs	r2, #12
 800098c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800098e:	4b08      	ldr	r3, [pc, #32]	; (80009b0 <MX_USART2_UART_Init+0x4c>)
 8000990:	2200      	movs	r2, #0
 8000992:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000994:	4b06      	ldr	r3, [pc, #24]	; (80009b0 <MX_USART2_UART_Init+0x4c>)
 8000996:	2200      	movs	r2, #0
 8000998:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800099a:	4805      	ldr	r0, [pc, #20]	; (80009b0 <MX_USART2_UART_Init+0x4c>)
 800099c:	f004 fcfb 	bl	8005396 <HAL_UART_Init>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d001      	beq.n	80009aa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80009a6:	f000 f9d1 	bl	8000d4c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009aa:	bf00      	nop
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	200001b8 	.word	0x200001b8
 80009b4:	40004400 	.word	0x40004400

080009b8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b082      	sub	sp, #8
 80009bc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80009be:	2300      	movs	r3, #0
 80009c0:	607b      	str	r3, [r7, #4]
 80009c2:	4b10      	ldr	r3, [pc, #64]	; (8000a04 <MX_DMA_Init+0x4c>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c6:	4a0f      	ldr	r2, [pc, #60]	; (8000a04 <MX_DMA_Init+0x4c>)
 80009c8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80009cc:	6313      	str	r3, [r2, #48]	; 0x30
 80009ce:	4b0d      	ldr	r3, [pc, #52]	; (8000a04 <MX_DMA_Init+0x4c>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80009d6:	607b      	str	r3, [r7, #4]
 80009d8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 80009da:	2200      	movs	r2, #0
 80009dc:	2100      	movs	r1, #0
 80009de:	200e      	movs	r0, #14
 80009e0:	f000 fde3 	bl	80015aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80009e4:	200e      	movs	r0, #14
 80009e6:	f000 fdfc 	bl	80015e2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80009ea:	2200      	movs	r2, #0
 80009ec:	2100      	movs	r1, #0
 80009ee:	2011      	movs	r0, #17
 80009f0:	f000 fddb 	bl	80015aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80009f4:	2011      	movs	r0, #17
 80009f6:	f000 fdf4 	bl	80015e2 <HAL_NVIC_EnableIRQ>

}
 80009fa:	bf00      	nop
 80009fc:	3708      	adds	r7, #8
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	40023800 	.word	0x40023800

08000a08 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b08c      	sub	sp, #48	; 0x30
 8000a0c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a0e:	f107 031c 	add.w	r3, r7, #28
 8000a12:	2200      	movs	r2, #0
 8000a14:	601a      	str	r2, [r3, #0]
 8000a16:	605a      	str	r2, [r3, #4]
 8000a18:	609a      	str	r2, [r3, #8]
 8000a1a:	60da      	str	r2, [r3, #12]
 8000a1c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a1e:	2300      	movs	r3, #0
 8000a20:	61bb      	str	r3, [r7, #24]
 8000a22:	4b95      	ldr	r3, [pc, #596]	; (8000c78 <MX_GPIO_Init+0x270>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a26:	4a94      	ldr	r2, [pc, #592]	; (8000c78 <MX_GPIO_Init+0x270>)
 8000a28:	f043 0310 	orr.w	r3, r3, #16
 8000a2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a2e:	4b92      	ldr	r3, [pc, #584]	; (8000c78 <MX_GPIO_Init+0x270>)
 8000a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a32:	f003 0310 	and.w	r3, r3, #16
 8000a36:	61bb      	str	r3, [r7, #24]
 8000a38:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	617b      	str	r3, [r7, #20]
 8000a3e:	4b8e      	ldr	r3, [pc, #568]	; (8000c78 <MX_GPIO_Init+0x270>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a42:	4a8d      	ldr	r2, [pc, #564]	; (8000c78 <MX_GPIO_Init+0x270>)
 8000a44:	f043 0304 	orr.w	r3, r3, #4
 8000a48:	6313      	str	r3, [r2, #48]	; 0x30
 8000a4a:	4b8b      	ldr	r3, [pc, #556]	; (8000c78 <MX_GPIO_Init+0x270>)
 8000a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4e:	f003 0304 	and.w	r3, r3, #4
 8000a52:	617b      	str	r3, [r7, #20]
 8000a54:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a56:	2300      	movs	r3, #0
 8000a58:	613b      	str	r3, [r7, #16]
 8000a5a:	4b87      	ldr	r3, [pc, #540]	; (8000c78 <MX_GPIO_Init+0x270>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5e:	4a86      	ldr	r2, [pc, #536]	; (8000c78 <MX_GPIO_Init+0x270>)
 8000a60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a64:	6313      	str	r3, [r2, #48]	; 0x30
 8000a66:	4b84      	ldr	r3, [pc, #528]	; (8000c78 <MX_GPIO_Init+0x270>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a6e:	613b      	str	r3, [r7, #16]
 8000a70:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a72:	2300      	movs	r3, #0
 8000a74:	60fb      	str	r3, [r7, #12]
 8000a76:	4b80      	ldr	r3, [pc, #512]	; (8000c78 <MX_GPIO_Init+0x270>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7a:	4a7f      	ldr	r2, [pc, #508]	; (8000c78 <MX_GPIO_Init+0x270>)
 8000a7c:	f043 0301 	orr.w	r3, r3, #1
 8000a80:	6313      	str	r3, [r2, #48]	; 0x30
 8000a82:	4b7d      	ldr	r3, [pc, #500]	; (8000c78 <MX_GPIO_Init+0x270>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a86:	f003 0301 	and.w	r3, r3, #1
 8000a8a:	60fb      	str	r3, [r7, #12]
 8000a8c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a8e:	2300      	movs	r3, #0
 8000a90:	60bb      	str	r3, [r7, #8]
 8000a92:	4b79      	ldr	r3, [pc, #484]	; (8000c78 <MX_GPIO_Init+0x270>)
 8000a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a96:	4a78      	ldr	r2, [pc, #480]	; (8000c78 <MX_GPIO_Init+0x270>)
 8000a98:	f043 0302 	orr.w	r3, r3, #2
 8000a9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a9e:	4b76      	ldr	r3, [pc, #472]	; (8000c78 <MX_GPIO_Init+0x270>)
 8000aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa2:	f003 0302 	and.w	r3, r3, #2
 8000aa6:	60bb      	str	r3, [r7, #8]
 8000aa8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000aaa:	2300      	movs	r3, #0
 8000aac:	607b      	str	r3, [r7, #4]
 8000aae:	4b72      	ldr	r3, [pc, #456]	; (8000c78 <MX_GPIO_Init+0x270>)
 8000ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab2:	4a71      	ldr	r2, [pc, #452]	; (8000c78 <MX_GPIO_Init+0x270>)
 8000ab4:	f043 0308 	orr.w	r3, r3, #8
 8000ab8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aba:	4b6f      	ldr	r3, [pc, #444]	; (8000c78 <MX_GPIO_Init+0x270>)
 8000abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000abe:	f003 0308 	and.w	r3, r3, #8
 8000ac2:	607b      	str	r3, [r7, #4]
 8000ac4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	2108      	movs	r1, #8
 8000aca:	486c      	ldr	r0, [pc, #432]	; (8000c7c <MX_GPIO_Init+0x274>)
 8000acc:	f001 fb52 	bl	8002174 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000ad0:	2201      	movs	r2, #1
 8000ad2:	2101      	movs	r1, #1
 8000ad4:	486a      	ldr	r0, [pc, #424]	; (8000c80 <MX_GPIO_Init+0x278>)
 8000ad6:	f001 fb4d 	bl	8002174 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000ada:	2200      	movs	r2, #0
 8000adc:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000ae0:	4868      	ldr	r0, [pc, #416]	; (8000c84 <MX_GPIO_Init+0x27c>)
 8000ae2:	f001 fb47 	bl	8002174 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000ae6:	2308      	movs	r3, #8
 8000ae8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aea:	2301      	movs	r3, #1
 8000aec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aee:	2300      	movs	r3, #0
 8000af0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af2:	2300      	movs	r3, #0
 8000af4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000af6:	f107 031c 	add.w	r3, r7, #28
 8000afa:	4619      	mov	r1, r3
 8000afc:	485f      	ldr	r0, [pc, #380]	; (8000c7c <MX_GPIO_Init+0x274>)
 8000afe:	f001 f98d 	bl	8001e1c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000b02:	2301      	movs	r3, #1
 8000b04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b06:	2301      	movs	r3, #1
 8000b08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000b12:	f107 031c 	add.w	r3, r7, #28
 8000b16:	4619      	mov	r1, r3
 8000b18:	4859      	ldr	r0, [pc, #356]	; (8000c80 <MX_GPIO_Init+0x278>)
 8000b1a:	f001 f97f 	bl	8001e1c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b1e:	2301      	movs	r3, #1
 8000b20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b22:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b26:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b2c:	f107 031c 	add.w	r3, r7, #28
 8000b30:	4619      	mov	r1, r3
 8000b32:	4855      	ldr	r0, [pc, #340]	; (8000c88 <MX_GPIO_Init+0x280>)
 8000b34:	f001 f972 	bl	8001e1c <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000b38:	2310      	movs	r3, #16
 8000b3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b3c:	2302      	movs	r3, #2
 8000b3e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b40:	2300      	movs	r3, #0
 8000b42:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b44:	2300      	movs	r3, #0
 8000b46:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000b48:	2306      	movs	r3, #6
 8000b4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000b4c:	f107 031c 	add.w	r3, r7, #28
 8000b50:	4619      	mov	r1, r3
 8000b52:	484d      	ldr	r0, [pc, #308]	; (8000c88 <MX_GPIO_Init+0x280>)
 8000b54:	f001 f962 	bl	8001e1c <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000b58:	23e0      	movs	r3, #224	; 0xe0
 8000b5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b5c:	2302      	movs	r3, #2
 8000b5e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b60:	2300      	movs	r3, #0
 8000b62:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b64:	2300      	movs	r3, #0
 8000b66:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b68:	2305      	movs	r3, #5
 8000b6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b6c:	f107 031c 	add.w	r3, r7, #28
 8000b70:	4619      	mov	r1, r3
 8000b72:	4845      	ldr	r0, [pc, #276]	; (8000c88 <MX_GPIO_Init+0x280>)
 8000b74:	f001 f952 	bl	8001e1c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000b78:	2304      	movs	r3, #4
 8000b7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b80:	2300      	movs	r3, #0
 8000b82:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000b84:	f107 031c 	add.w	r3, r7, #28
 8000b88:	4619      	mov	r1, r3
 8000b8a:	4840      	ldr	r0, [pc, #256]	; (8000c8c <MX_GPIO_Init+0x284>)
 8000b8c:	f001 f946 	bl	8001e1c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000b90:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000b94:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b96:	2301      	movs	r3, #1
 8000b98:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ba2:	f107 031c 	add.w	r3, r7, #28
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	4836      	ldr	r0, [pc, #216]	; (8000c84 <MX_GPIO_Init+0x27c>)
 8000baa:	f001 f937 	bl	8001e1c <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_MCK_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin;
 8000bae:	2380      	movs	r3, #128	; 0x80
 8000bb0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb2:	2302      	movs	r3, #2
 8000bb4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000bbe:	2306      	movs	r3, #6
 8000bc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_MCK_GPIO_Port, &GPIO_InitStruct);
 8000bc2:	f107 031c 	add.w	r3, r7, #28
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	482d      	ldr	r0, [pc, #180]	; (8000c80 <MX_GPIO_Init+0x278>)
 8000bca:	f001 f927 	bl	8001e1c <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000bce:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000bd2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000bdc:	f107 031c 	add.w	r3, r7, #28
 8000be0:	4619      	mov	r1, r3
 8000be2:	4829      	ldr	r0, [pc, #164]	; (8000c88 <MX_GPIO_Init+0x280>)
 8000be4:	f001 f91a 	bl	8001e1c <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000be8:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000bec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bee:	2302      	movs	r3, #2
 8000bf0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000bfa:	230a      	movs	r3, #10
 8000bfc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bfe:	f107 031c 	add.w	r3, r7, #28
 8000c02:	4619      	mov	r1, r3
 8000c04:	4820      	ldr	r0, [pc, #128]	; (8000c88 <MX_GPIO_Init+0x280>)
 8000c06:	f001 f909 	bl	8001e1c <HAL_GPIO_Init>

  /*Configure GPIO pins : SD_Detect_Pin OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = SD_Detect_Pin|OTG_FS_OverCurrent_Pin;
 8000c0a:	2321      	movs	r3, #33	; 0x21
 8000c0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c12:	2300      	movs	r3, #0
 8000c14:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c16:	f107 031c 	add.w	r3, r7, #28
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	4819      	ldr	r0, [pc, #100]	; (8000c84 <MX_GPIO_Init+0x27c>)
 8000c1e:	f001 f8fd 	bl	8001e1c <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000c22:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000c26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c28:	2312      	movs	r3, #18
 8000c2a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c30:	2300      	movs	r3, #0
 8000c32:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c34:	2304      	movs	r3, #4
 8000c36:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c38:	f107 031c 	add.w	r3, r7, #28
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	4813      	ldr	r0, [pc, #76]	; (8000c8c <MX_GPIO_Init+0x284>)
 8000c40:	f001 f8ec 	bl	8001e1c <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000c44:	2302      	movs	r3, #2
 8000c46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000c48:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000c4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000c52:	f107 031c 	add.w	r3, r7, #28
 8000c56:	4619      	mov	r1, r3
 8000c58:	4808      	ldr	r0, [pc, #32]	; (8000c7c <MX_GPIO_Init+0x274>)
 8000c5a:	f001 f8df 	bl	8001e1c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000c5e:	2200      	movs	r2, #0
 8000c60:	2100      	movs	r1, #0
 8000c62:	2006      	movs	r0, #6
 8000c64:	f000 fca1 	bl	80015aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000c68:	2006      	movs	r0, #6
 8000c6a:	f000 fcba 	bl	80015e2 <HAL_NVIC_EnableIRQ>

}
 8000c6e:	bf00      	nop
 8000c70:	3730      	adds	r7, #48	; 0x30
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	40023800 	.word	0x40023800
 8000c7c:	40021000 	.word	0x40021000
 8000c80:	40020800 	.word	0x40020800
 8000c84:	40020c00 	.word	0x40020c00
 8000c88:	40020000 	.word	0x40020000
 8000c8c:	40020400 	.word	0x40020400

08000c90 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b086      	sub	sp, #24
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	60f8      	str	r0, [r7, #12]
 8000c98:	60b9      	str	r1, [r7, #8]
 8000c9a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	617b      	str	r3, [r7, #20]
 8000ca0:	e009      	b.n	8000cb6 <_write+0x26>
	{
		ITM_SendChar(*ptr++);
 8000ca2:	68bb      	ldr	r3, [r7, #8]
 8000ca4:	1c5a      	adds	r2, r3, #1
 8000ca6:	60ba      	str	r2, [r7, #8]
 8000ca8:	781b      	ldrb	r3, [r3, #0]
 8000caa:	4618      	mov	r0, r3
 8000cac:	f7ff fc82 	bl	80005b4 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cb0:	697b      	ldr	r3, [r7, #20]
 8000cb2:	3301      	adds	r3, #1
 8000cb4:	617b      	str	r3, [r7, #20]
 8000cb6:	697a      	ldr	r2, [r7, #20]
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	429a      	cmp	r2, r3
 8000cbc:	dbf1      	blt.n	8000ca2 <_write+0x12>
	}
	return len;
 8000cbe:	687b      	ldr	r3, [r7, #4]
}
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	3718      	adds	r7, #24
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}

08000cc8 <HAL_I2S_RxCpltCallback>:
//	l,r,l,r,l,
void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b083      	sub	sp, #12
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]

	full_i2s = 1;
 8000cd0:	4b04      	ldr	r3, [pc, #16]	; (8000ce4 <HAL_I2S_RxCpltCallback+0x1c>)
 8000cd2:	2201      	movs	r2, #1
 8000cd4:	701a      	strb	r2, [r3, #0]
}
 8000cd6:	bf00      	nop
 8000cd8:	370c      	adds	r7, #12
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr
 8000ce2:	bf00      	nop
 8000ce4:	2000085f 	.word	0x2000085f

08000ce8 <HAL_I2S_RxHalfCpltCallback>:
void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b083      	sub	sp, #12
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
	//sample_i2s = data_i2s[0];
	half_i2s = 1;
 8000cf0:	4b04      	ldr	r3, [pc, #16]	; (8000d04 <HAL_I2S_RxHalfCpltCallback+0x1c>)
 8000cf2:	2201      	movs	r2, #1
 8000cf4:	701a      	strb	r2, [r3, #0]
}
 8000cf6:	bf00      	nop
 8000cf8:	370c      	adds	r7, #12
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d00:	4770      	bx	lr
 8000d02:	bf00      	nop
 8000d04:	2000085e 	.word	0x2000085e

08000d08 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b083      	sub	sp, #12
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	4603      	mov	r3, r0
 8000d10:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == B1_Pin)
 8000d12:	88fb      	ldrh	r3, [r7, #6]
 8000d14:	2b01      	cmp	r3, #1
 8000d16:	d102      	bne.n	8000d1e <HAL_GPIO_EXTI_Callback+0x16>
	{
		button_flag = 1;
 8000d18:	4b04      	ldr	r3, [pc, #16]	; (8000d2c <HAL_GPIO_EXTI_Callback+0x24>)
 8000d1a:	2201      	movs	r2, #1
 8000d1c:	701a      	strb	r2, [r3, #0]
	}
}
 8000d1e:	bf00      	nop
 8000d20:	370c      	adds	r7, #12
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr
 8000d2a:	bf00      	nop
 8000d2c:	2000085c 	.word	0x2000085c

08000d30 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b082      	sub	sp, #8
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
	printf("uart over \n");
 8000d38:	4803      	ldr	r0, [pc, #12]	; (8000d48 <HAL_UART_TxCpltCallback+0x18>)
 8000d3a:	f007 fd1f 	bl	800877c <puts>
}
 8000d3e:	bf00      	nop
 8000d40:	3708      	adds	r7, #8
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	08009704 	.word	0x08009704

08000d4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d50:	b672      	cpsid	i
}
 8000d52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d54:	e7fe      	b.n	8000d54 <Error_Handler+0x8>
	...

08000d58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d5e:	2300      	movs	r3, #0
 8000d60:	607b      	str	r3, [r7, #4]
 8000d62:	4b10      	ldr	r3, [pc, #64]	; (8000da4 <HAL_MspInit+0x4c>)
 8000d64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d66:	4a0f      	ldr	r2, [pc, #60]	; (8000da4 <HAL_MspInit+0x4c>)
 8000d68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d6c:	6453      	str	r3, [r2, #68]	; 0x44
 8000d6e:	4b0d      	ldr	r3, [pc, #52]	; (8000da4 <HAL_MspInit+0x4c>)
 8000d70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d76:	607b      	str	r3, [r7, #4]
 8000d78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	603b      	str	r3, [r7, #0]
 8000d7e:	4b09      	ldr	r3, [pc, #36]	; (8000da4 <HAL_MspInit+0x4c>)
 8000d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d82:	4a08      	ldr	r2, [pc, #32]	; (8000da4 <HAL_MspInit+0x4c>)
 8000d84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d88:	6413      	str	r3, [r2, #64]	; 0x40
 8000d8a:	4b06      	ldr	r3, [pc, #24]	; (8000da4 <HAL_MspInit+0x4c>)
 8000d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d92:	603b      	str	r3, [r7, #0]
 8000d94:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000d96:	2007      	movs	r0, #7
 8000d98:	f000 fbfc 	bl	8001594 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d9c:	bf00      	nop
 8000d9e:	3708      	adds	r7, #8
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	40023800 	.word	0x40023800

08000da8 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b0a0      	sub	sp, #128	; 0x80
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000db4:	2200      	movs	r2, #0
 8000db6:	601a      	str	r2, [r3, #0]
 8000db8:	605a      	str	r2, [r3, #4]
 8000dba:	609a      	str	r2, [r3, #8]
 8000dbc:	60da      	str	r2, [r3, #12]
 8000dbe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000dc0:	f107 0310 	add.w	r3, r7, #16
 8000dc4:	225c      	movs	r2, #92	; 0x5c
 8000dc6:	2100      	movs	r1, #0
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f007 fc49 	bl	8008660 <memset>
  if(hi2s->Instance==SPI2)
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	4a3a      	ldr	r2, [pc, #232]	; (8000ebc <HAL_I2S_MspInit+0x114>)
 8000dd4:	4293      	cmp	r3, r2
 8000dd6:	d16c      	bne.n	8000eb2 <HAL_I2S_MspInit+0x10a>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 8000dd8:	2308      	movs	r3, #8
 8000dda:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000ddc:	23c0      	movs	r3, #192	; 0xc0
 8000dde:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000de0:	2302      	movs	r3, #2
 8000de2:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000de4:	f107 0310 	add.w	r3, r7, #16
 8000de8:	4618      	mov	r0, r3
 8000dea:	f001 ff09 	bl	8002c00 <HAL_RCCEx_PeriphCLKConfig>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d001      	beq.n	8000df8 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000df4:	f7ff ffaa 	bl	8000d4c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000df8:	2300      	movs	r3, #0
 8000dfa:	60fb      	str	r3, [r7, #12]
 8000dfc:	4b30      	ldr	r3, [pc, #192]	; (8000ec0 <HAL_I2S_MspInit+0x118>)
 8000dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e00:	4a2f      	ldr	r2, [pc, #188]	; (8000ec0 <HAL_I2S_MspInit+0x118>)
 8000e02:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e06:	6413      	str	r3, [r2, #64]	; 0x40
 8000e08:	4b2d      	ldr	r3, [pc, #180]	; (8000ec0 <HAL_I2S_MspInit+0x118>)
 8000e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e0c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e10:	60fb      	str	r3, [r7, #12]
 8000e12:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e14:	2300      	movs	r3, #0
 8000e16:	60bb      	str	r3, [r7, #8]
 8000e18:	4b29      	ldr	r3, [pc, #164]	; (8000ec0 <HAL_I2S_MspInit+0x118>)
 8000e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1c:	4a28      	ldr	r2, [pc, #160]	; (8000ec0 <HAL_I2S_MspInit+0x118>)
 8000e1e:	f043 0302 	orr.w	r3, r3, #2
 8000e22:	6313      	str	r3, [r2, #48]	; 0x30
 8000e24:	4b26      	ldr	r3, [pc, #152]	; (8000ec0 <HAL_I2S_MspInit+0x118>)
 8000e26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e28:	f003 0302 	and.w	r3, r3, #2
 8000e2c:	60bb      	str	r3, [r7, #8]
 8000e2e:	68bb      	ldr	r3, [r7, #8]
    /**I2S2 GPIO Configuration
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    PB15     ------> I2S2_SD
    */
    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12|PDM_OUT_Pin;
 8000e30:	f44f 4314 	mov.w	r3, #37888	; 0x9400
 8000e34:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e36:	2302      	movs	r3, #2
 8000e38:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e42:	2305      	movs	r3, #5
 8000e44:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e46:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	481d      	ldr	r0, [pc, #116]	; (8000ec4 <HAL_I2S_MspInit+0x11c>)
 8000e4e:	f000 ffe5 	bl	8001e1c <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8000e52:	4b1d      	ldr	r3, [pc, #116]	; (8000ec8 <HAL_I2S_MspInit+0x120>)
 8000e54:	4a1d      	ldr	r2, [pc, #116]	; (8000ecc <HAL_I2S_MspInit+0x124>)
 8000e56:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 8000e58:	4b1b      	ldr	r3, [pc, #108]	; (8000ec8 <HAL_I2S_MspInit+0x120>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e5e:	4b1a      	ldr	r3, [pc, #104]	; (8000ec8 <HAL_I2S_MspInit+0x120>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e64:	4b18      	ldr	r3, [pc, #96]	; (8000ec8 <HAL_I2S_MspInit+0x120>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000e6a:	4b17      	ldr	r3, [pc, #92]	; (8000ec8 <HAL_I2S_MspInit+0x120>)
 8000e6c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e70:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000e72:	4b15      	ldr	r3, [pc, #84]	; (8000ec8 <HAL_I2S_MspInit+0x120>)
 8000e74:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000e78:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000e7a:	4b13      	ldr	r3, [pc, #76]	; (8000ec8 <HAL_I2S_MspInit+0x120>)
 8000e7c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e80:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 8000e82:	4b11      	ldr	r3, [pc, #68]	; (8000ec8 <HAL_I2S_MspInit+0x120>)
 8000e84:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e88:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000e8a:	4b0f      	ldr	r3, [pc, #60]	; (8000ec8 <HAL_I2S_MspInit+0x120>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e90:	4b0d      	ldr	r3, [pc, #52]	; (8000ec8 <HAL_I2S_MspInit+0x120>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8000e96:	480c      	ldr	r0, [pc, #48]	; (8000ec8 <HAL_I2S_MspInit+0x120>)
 8000e98:	f000 fbbe 	bl	8001618 <HAL_DMA_Init>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d001      	beq.n	8000ea6 <HAL_I2S_MspInit+0xfe>
    {
      Error_Handler();
 8000ea2:	f7ff ff53 	bl	8000d4c <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmarx,hdma_spi2_rx);
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	4a07      	ldr	r2, [pc, #28]	; (8000ec8 <HAL_I2S_MspInit+0x120>)
 8000eaa:	63da      	str	r2, [r3, #60]	; 0x3c
 8000eac:	4a06      	ldr	r2, [pc, #24]	; (8000ec8 <HAL_I2S_MspInit+0x120>)
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000eb2:	bf00      	nop
 8000eb4:	3780      	adds	r7, #128	; 0x80
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	40003800 	.word	0x40003800
 8000ec0:	40023800 	.word	0x40023800
 8000ec4:	40020400 	.word	0x40020400
 8000ec8:	200000d4 	.word	0x200000d4
 8000ecc:	40026058 	.word	0x40026058

08000ed0 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b08a      	sub	sp, #40	; 0x28
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed8:	f107 0314 	add.w	r3, r7, #20
 8000edc:	2200      	movs	r2, #0
 8000ede:	601a      	str	r2, [r3, #0]
 8000ee0:	605a      	str	r2, [r3, #4]
 8000ee2:	609a      	str	r2, [r3, #8]
 8000ee4:	60da      	str	r2, [r3, #12]
 8000ee6:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a28      	ldr	r2, [pc, #160]	; (8000f90 <HAL_SD_MspInit+0xc0>)
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d14a      	bne.n	8000f88 <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	613b      	str	r3, [r7, #16]
 8000ef6:	4b27      	ldr	r3, [pc, #156]	; (8000f94 <HAL_SD_MspInit+0xc4>)
 8000ef8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000efa:	4a26      	ldr	r2, [pc, #152]	; (8000f94 <HAL_SD_MspInit+0xc4>)
 8000efc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000f00:	6453      	str	r3, [r2, #68]	; 0x44
 8000f02:	4b24      	ldr	r3, [pc, #144]	; (8000f94 <HAL_SD_MspInit+0xc4>)
 8000f04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f06:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000f0a:	613b      	str	r3, [r7, #16]
 8000f0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f0e:	2300      	movs	r3, #0
 8000f10:	60fb      	str	r3, [r7, #12]
 8000f12:	4b20      	ldr	r3, [pc, #128]	; (8000f94 <HAL_SD_MspInit+0xc4>)
 8000f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f16:	4a1f      	ldr	r2, [pc, #124]	; (8000f94 <HAL_SD_MspInit+0xc4>)
 8000f18:	f043 0304 	orr.w	r3, r3, #4
 8000f1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f1e:	4b1d      	ldr	r3, [pc, #116]	; (8000f94 <HAL_SD_MspInit+0xc4>)
 8000f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f22:	f003 0304 	and.w	r3, r3, #4
 8000f26:	60fb      	str	r3, [r7, #12]
 8000f28:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	60bb      	str	r3, [r7, #8]
 8000f2e:	4b19      	ldr	r3, [pc, #100]	; (8000f94 <HAL_SD_MspInit+0xc4>)
 8000f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f32:	4a18      	ldr	r2, [pc, #96]	; (8000f94 <HAL_SD_MspInit+0xc4>)
 8000f34:	f043 0308 	orr.w	r3, r3, #8
 8000f38:	6313      	str	r3, [r2, #48]	; 0x30
 8000f3a:	4b16      	ldr	r3, [pc, #88]	; (8000f94 <HAL_SD_MspInit+0xc4>)
 8000f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3e:	f003 0308 	and.w	r3, r3, #8
 8000f42:	60bb      	str	r3, [r7, #8]
 8000f44:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000f46:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000f4a:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f4c:	2302      	movs	r3, #2
 8000f4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f50:	2300      	movs	r3, #0
 8000f52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f54:	2303      	movs	r3, #3
 8000f56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000f58:	230c      	movs	r3, #12
 8000f5a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f5c:	f107 0314 	add.w	r3, r7, #20
 8000f60:	4619      	mov	r1, r3
 8000f62:	480d      	ldr	r0, [pc, #52]	; (8000f98 <HAL_SD_MspInit+0xc8>)
 8000f64:	f000 ff5a 	bl	8001e1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000f68:	2304      	movs	r3, #4
 8000f6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f6c:	2302      	movs	r3, #2
 8000f6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f70:	2300      	movs	r3, #0
 8000f72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f74:	2303      	movs	r3, #3
 8000f76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000f78:	230c      	movs	r3, #12
 8000f7a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f7c:	f107 0314 	add.w	r3, r7, #20
 8000f80:	4619      	mov	r1, r3
 8000f82:	4806      	ldr	r0, [pc, #24]	; (8000f9c <HAL_SD_MspInit+0xcc>)
 8000f84:	f000 ff4a 	bl	8001e1c <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8000f88:	bf00      	nop
 8000f8a:	3728      	adds	r7, #40	; 0x28
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	40012c00 	.word	0x40012c00
 8000f94:	40023800 	.word	0x40023800
 8000f98:	40020800 	.word	0x40020800
 8000f9c:	40020c00 	.word	0x40020c00

08000fa0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b08a      	sub	sp, #40	; 0x28
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa8:	f107 0314 	add.w	r3, r7, #20
 8000fac:	2200      	movs	r2, #0
 8000fae:	601a      	str	r2, [r3, #0]
 8000fb0:	605a      	str	r2, [r3, #4]
 8000fb2:	609a      	str	r2, [r3, #8]
 8000fb4:	60da      	str	r2, [r3, #12]
 8000fb6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4a34      	ldr	r2, [pc, #208]	; (8001090 <HAL_UART_MspInit+0xf0>)
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	d161      	bne.n	8001086 <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	613b      	str	r3, [r7, #16]
 8000fc6:	4b33      	ldr	r3, [pc, #204]	; (8001094 <HAL_UART_MspInit+0xf4>)
 8000fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fca:	4a32      	ldr	r2, [pc, #200]	; (8001094 <HAL_UART_MspInit+0xf4>)
 8000fcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fd0:	6413      	str	r3, [r2, #64]	; 0x40
 8000fd2:	4b30      	ldr	r3, [pc, #192]	; (8001094 <HAL_UART_MspInit+0xf4>)
 8000fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fda:	613b      	str	r3, [r7, #16]
 8000fdc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fde:	2300      	movs	r3, #0
 8000fe0:	60fb      	str	r3, [r7, #12]
 8000fe2:	4b2c      	ldr	r3, [pc, #176]	; (8001094 <HAL_UART_MspInit+0xf4>)
 8000fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe6:	4a2b      	ldr	r2, [pc, #172]	; (8001094 <HAL_UART_MspInit+0xf4>)
 8000fe8:	f043 0301 	orr.w	r3, r3, #1
 8000fec:	6313      	str	r3, [r2, #48]	; 0x30
 8000fee:	4b29      	ldr	r3, [pc, #164]	; (8001094 <HAL_UART_MspInit+0xf4>)
 8000ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff2:	f003 0301 	and.w	r3, r3, #1
 8000ff6:	60fb      	str	r3, [r7, #12]
 8000ff8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000ffa:	230c      	movs	r3, #12
 8000ffc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ffe:	2302      	movs	r3, #2
 8001000:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001002:	2300      	movs	r3, #0
 8001004:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001006:	2303      	movs	r3, #3
 8001008:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800100a:	2307      	movs	r3, #7
 800100c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800100e:	f107 0314 	add.w	r3, r7, #20
 8001012:	4619      	mov	r1, r3
 8001014:	4820      	ldr	r0, [pc, #128]	; (8001098 <HAL_UART_MspInit+0xf8>)
 8001016:	f000 ff01 	bl	8001e1c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 800101a:	4b20      	ldr	r3, [pc, #128]	; (800109c <HAL_UART_MspInit+0xfc>)
 800101c:	4a20      	ldr	r2, [pc, #128]	; (80010a0 <HAL_UART_MspInit+0x100>)
 800101e:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8001020:	4b1e      	ldr	r3, [pc, #120]	; (800109c <HAL_UART_MspInit+0xfc>)
 8001022:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001026:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001028:	4b1c      	ldr	r3, [pc, #112]	; (800109c <HAL_UART_MspInit+0xfc>)
 800102a:	2240      	movs	r2, #64	; 0x40
 800102c:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800102e:	4b1b      	ldr	r3, [pc, #108]	; (800109c <HAL_UART_MspInit+0xfc>)
 8001030:	2200      	movs	r2, #0
 8001032:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001034:	4b19      	ldr	r3, [pc, #100]	; (800109c <HAL_UART_MspInit+0xfc>)
 8001036:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800103a:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800103c:	4b17      	ldr	r3, [pc, #92]	; (800109c <HAL_UART_MspInit+0xfc>)
 800103e:	2200      	movs	r2, #0
 8001040:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001042:	4b16      	ldr	r3, [pc, #88]	; (800109c <HAL_UART_MspInit+0xfc>)
 8001044:	2200      	movs	r2, #0
 8001046:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001048:	4b14      	ldr	r3, [pc, #80]	; (800109c <HAL_UART_MspInit+0xfc>)
 800104a:	2200      	movs	r2, #0
 800104c:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800104e:	4b13      	ldr	r3, [pc, #76]	; (800109c <HAL_UART_MspInit+0xfc>)
 8001050:	2200      	movs	r2, #0
 8001052:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001054:	4b11      	ldr	r3, [pc, #68]	; (800109c <HAL_UART_MspInit+0xfc>)
 8001056:	2200      	movs	r2, #0
 8001058:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800105a:	4810      	ldr	r0, [pc, #64]	; (800109c <HAL_UART_MspInit+0xfc>)
 800105c:	f000 fadc 	bl	8001618 <HAL_DMA_Init>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8001066:	f7ff fe71 	bl	8000d4c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	4a0b      	ldr	r2, [pc, #44]	; (800109c <HAL_UART_MspInit+0xfc>)
 800106e:	635a      	str	r2, [r3, #52]	; 0x34
 8001070:	4a0a      	ldr	r2, [pc, #40]	; (800109c <HAL_UART_MspInit+0xfc>)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001076:	2200      	movs	r2, #0
 8001078:	2100      	movs	r1, #0
 800107a:	2026      	movs	r0, #38	; 0x26
 800107c:	f000 fa95 	bl	80015aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001080:	2026      	movs	r0, #38	; 0x26
 8001082:	f000 faae 	bl	80015e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001086:	bf00      	nop
 8001088:	3728      	adds	r7, #40	; 0x28
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	40004400 	.word	0x40004400
 8001094:	40023800 	.word	0x40023800
 8001098:	40020000 	.word	0x40020000
 800109c:	200001fc 	.word	0x200001fc
 80010a0:	400260a0 	.word	0x400260a0

080010a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010a8:	e7fe      	b.n	80010a8 <NMI_Handler+0x4>

080010aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010aa:	b480      	push	{r7}
 80010ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010ae:	e7fe      	b.n	80010ae <HardFault_Handler+0x4>

080010b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010b4:	e7fe      	b.n	80010b4 <MemManage_Handler+0x4>

080010b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010b6:	b480      	push	{r7}
 80010b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010ba:	e7fe      	b.n	80010ba <BusFault_Handler+0x4>

080010bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010c0:	e7fe      	b.n	80010c0 <UsageFault_Handler+0x4>

080010c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010c2:	b480      	push	{r7}
 80010c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010c6:	bf00      	nop
 80010c8:	46bd      	mov	sp, r7
 80010ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ce:	4770      	bx	lr

080010d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010d4:	bf00      	nop
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr

080010de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010de:	b480      	push	{r7}
 80010e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010e2:	bf00      	nop
 80010e4:	46bd      	mov	sp, r7
 80010e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ea:	4770      	bx	lr

080010ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010f0:	f000 f93c 	bl	800136c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010f4:	bf00      	nop
 80010f6:	bd80      	pop	{r7, pc}

080010f8 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 80010fc:	4802      	ldr	r0, [pc, #8]	; (8001108 <DMA1_Stream3_IRQHandler+0x10>)
 80010fe:	f000 fc23 	bl	8001948 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001102:	bf00      	nop
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	200000d4 	.word	0x200000d4

0800110c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001110:	4802      	ldr	r0, [pc, #8]	; (800111c <DMA1_Stream6_IRQHandler+0x10>)
 8001112:	f000 fc19 	bl	8001948 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001116:	bf00      	nop
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	200001fc 	.word	0x200001fc

08001120 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001124:	4802      	ldr	r0, [pc, #8]	; (8001130 <USART2_IRQHandler+0x10>)
 8001126:	f004 fa01 	bl	800552c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800112a:	bf00      	nop
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	200001b8 	.word	0x200001b8

08001134 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001138:	2001      	movs	r0, #1
 800113a:	f001 f835 	bl	80021a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800113e:	bf00      	nop
 8001140:	bd80      	pop	{r7, pc}

08001142 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001142:	b580      	push	{r7, lr}
 8001144:	b086      	sub	sp, #24
 8001146:	af00      	add	r7, sp, #0
 8001148:	60f8      	str	r0, [r7, #12]
 800114a:	60b9      	str	r1, [r7, #8]
 800114c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800114e:	2300      	movs	r3, #0
 8001150:	617b      	str	r3, [r7, #20]
 8001152:	e00a      	b.n	800116a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001154:	f3af 8000 	nop.w
 8001158:	4601      	mov	r1, r0
 800115a:	68bb      	ldr	r3, [r7, #8]
 800115c:	1c5a      	adds	r2, r3, #1
 800115e:	60ba      	str	r2, [r7, #8]
 8001160:	b2ca      	uxtb	r2, r1
 8001162:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001164:	697b      	ldr	r3, [r7, #20]
 8001166:	3301      	adds	r3, #1
 8001168:	617b      	str	r3, [r7, #20]
 800116a:	697a      	ldr	r2, [r7, #20]
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	429a      	cmp	r2, r3
 8001170:	dbf0      	blt.n	8001154 <_read+0x12>
  }

  return len;
 8001172:	687b      	ldr	r3, [r7, #4]
}
 8001174:	4618      	mov	r0, r3
 8001176:	3718      	adds	r7, #24
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}

0800117c <_close>:
  }
  return len;
}

int _close(int file)
{
 800117c:	b480      	push	{r7}
 800117e:	b083      	sub	sp, #12
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001184:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001188:	4618      	mov	r0, r3
 800118a:	370c      	adds	r7, #12
 800118c:	46bd      	mov	sp, r7
 800118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001192:	4770      	bx	lr

08001194 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001194:	b480      	push	{r7}
 8001196:	b083      	sub	sp, #12
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
 800119c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80011a4:	605a      	str	r2, [r3, #4]
  return 0;
 80011a6:	2300      	movs	r3, #0
}
 80011a8:	4618      	mov	r0, r3
 80011aa:	370c      	adds	r7, #12
 80011ac:	46bd      	mov	sp, r7
 80011ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b2:	4770      	bx	lr

080011b4 <_isatty>:

int _isatty(int file)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b083      	sub	sp, #12
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80011bc:	2301      	movs	r3, #1
}
 80011be:	4618      	mov	r0, r3
 80011c0:	370c      	adds	r7, #12
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr

080011ca <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80011ca:	b480      	push	{r7}
 80011cc:	b085      	sub	sp, #20
 80011ce:	af00      	add	r7, sp, #0
 80011d0:	60f8      	str	r0, [r7, #12]
 80011d2:	60b9      	str	r1, [r7, #8]
 80011d4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80011d6:	2300      	movs	r3, #0
}
 80011d8:	4618      	mov	r0, r3
 80011da:	3714      	adds	r7, #20
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr

080011e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b086      	sub	sp, #24
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011ec:	4a14      	ldr	r2, [pc, #80]	; (8001240 <_sbrk+0x5c>)
 80011ee:	4b15      	ldr	r3, [pc, #84]	; (8001244 <_sbrk+0x60>)
 80011f0:	1ad3      	subs	r3, r2, r3
 80011f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011f8:	4b13      	ldr	r3, [pc, #76]	; (8001248 <_sbrk+0x64>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d102      	bne.n	8001206 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001200:	4b11      	ldr	r3, [pc, #68]	; (8001248 <_sbrk+0x64>)
 8001202:	4a12      	ldr	r2, [pc, #72]	; (800124c <_sbrk+0x68>)
 8001204:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001206:	4b10      	ldr	r3, [pc, #64]	; (8001248 <_sbrk+0x64>)
 8001208:	681a      	ldr	r2, [r3, #0]
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	4413      	add	r3, r2
 800120e:	693a      	ldr	r2, [r7, #16]
 8001210:	429a      	cmp	r2, r3
 8001212:	d207      	bcs.n	8001224 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001214:	f007 f9fa 	bl	800860c <__errno>
 8001218:	4603      	mov	r3, r0
 800121a:	220c      	movs	r2, #12
 800121c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800121e:	f04f 33ff 	mov.w	r3, #4294967295
 8001222:	e009      	b.n	8001238 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001224:	4b08      	ldr	r3, [pc, #32]	; (8001248 <_sbrk+0x64>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800122a:	4b07      	ldr	r3, [pc, #28]	; (8001248 <_sbrk+0x64>)
 800122c:	681a      	ldr	r2, [r3, #0]
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	4413      	add	r3, r2
 8001232:	4a05      	ldr	r2, [pc, #20]	; (8001248 <_sbrk+0x64>)
 8001234:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001236:	68fb      	ldr	r3, [r7, #12]
}
 8001238:	4618      	mov	r0, r3
 800123a:	3718      	adds	r7, #24
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	20020000 	.word	0x20020000
 8001244:	00000400 	.word	0x00000400
 8001248:	20000878 	.word	0x20000878
 800124c:	200008a8 	.word	0x200008a8

08001250 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001254:	4b06      	ldr	r3, [pc, #24]	; (8001270 <SystemInit+0x20>)
 8001256:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800125a:	4a05      	ldr	r2, [pc, #20]	; (8001270 <SystemInit+0x20>)
 800125c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001260:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001264:	bf00      	nop
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr
 800126e:	bf00      	nop
 8001270:	e000ed00 	.word	0xe000ed00

08001274 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001274:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012ac <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001278:	480d      	ldr	r0, [pc, #52]	; (80012b0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800127a:	490e      	ldr	r1, [pc, #56]	; (80012b4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800127c:	4a0e      	ldr	r2, [pc, #56]	; (80012b8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800127e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001280:	e002      	b.n	8001288 <LoopCopyDataInit>

08001282 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001282:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001284:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001286:	3304      	adds	r3, #4

08001288 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001288:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800128a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800128c:	d3f9      	bcc.n	8001282 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800128e:	4a0b      	ldr	r2, [pc, #44]	; (80012bc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001290:	4c0b      	ldr	r4, [pc, #44]	; (80012c0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001292:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001294:	e001      	b.n	800129a <LoopFillZerobss>

08001296 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001296:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001298:	3204      	adds	r2, #4

0800129a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800129a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800129c:	d3fb      	bcc.n	8001296 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800129e:	f7ff ffd7 	bl	8001250 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012a2:	f007 f9b9 	bl	8008618 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012a6:	f7ff f9ad 	bl	8000604 <main>
  bx  lr    
 80012aa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80012ac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80012b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012b4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80012b8:	0801c7d4 	.word	0x0801c7d4
  ldr r2, =_sbss
 80012bc:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80012c0:	200008a4 	.word	0x200008a4

080012c4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012c4:	e7fe      	b.n	80012c4 <ADC_IRQHandler>
	...

080012c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80012cc:	4b0e      	ldr	r3, [pc, #56]	; (8001308 <HAL_Init+0x40>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a0d      	ldr	r2, [pc, #52]	; (8001308 <HAL_Init+0x40>)
 80012d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80012d8:	4b0b      	ldr	r3, [pc, #44]	; (8001308 <HAL_Init+0x40>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4a0a      	ldr	r2, [pc, #40]	; (8001308 <HAL_Init+0x40>)
 80012de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012e4:	4b08      	ldr	r3, [pc, #32]	; (8001308 <HAL_Init+0x40>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a07      	ldr	r2, [pc, #28]	; (8001308 <HAL_Init+0x40>)
 80012ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012f0:	2003      	movs	r0, #3
 80012f2:	f000 f94f 	bl	8001594 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012f6:	2000      	movs	r0, #0
 80012f8:	f000 f808 	bl	800130c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012fc:	f7ff fd2c 	bl	8000d58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001300:	2300      	movs	r3, #0
}
 8001302:	4618      	mov	r0, r3
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	40023c00 	.word	0x40023c00

0800130c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001314:	4b12      	ldr	r3, [pc, #72]	; (8001360 <HAL_InitTick+0x54>)
 8001316:	681a      	ldr	r2, [r3, #0]
 8001318:	4b12      	ldr	r3, [pc, #72]	; (8001364 <HAL_InitTick+0x58>)
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	4619      	mov	r1, r3
 800131e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001322:	fbb3 f3f1 	udiv	r3, r3, r1
 8001326:	fbb2 f3f3 	udiv	r3, r2, r3
 800132a:	4618      	mov	r0, r3
 800132c:	f000 f967 	bl	80015fe <HAL_SYSTICK_Config>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d001      	beq.n	800133a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001336:	2301      	movs	r3, #1
 8001338:	e00e      	b.n	8001358 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	2b0f      	cmp	r3, #15
 800133e:	d80a      	bhi.n	8001356 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001340:	2200      	movs	r2, #0
 8001342:	6879      	ldr	r1, [r7, #4]
 8001344:	f04f 30ff 	mov.w	r0, #4294967295
 8001348:	f000 f92f 	bl	80015aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800134c:	4a06      	ldr	r2, [pc, #24]	; (8001368 <HAL_InitTick+0x5c>)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001352:	2300      	movs	r3, #0
 8001354:	e000      	b.n	8001358 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001356:	2301      	movs	r3, #1
}
 8001358:	4618      	mov	r0, r3
 800135a:	3708      	adds	r7, #8
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	20000000 	.word	0x20000000
 8001364:	20000008 	.word	0x20000008
 8001368:	20000004 	.word	0x20000004

0800136c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001370:	4b06      	ldr	r3, [pc, #24]	; (800138c <HAL_IncTick+0x20>)
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	461a      	mov	r2, r3
 8001376:	4b06      	ldr	r3, [pc, #24]	; (8001390 <HAL_IncTick+0x24>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	4413      	add	r3, r2
 800137c:	4a04      	ldr	r2, [pc, #16]	; (8001390 <HAL_IncTick+0x24>)
 800137e:	6013      	str	r3, [r2, #0]
}
 8001380:	bf00      	nop
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr
 800138a:	bf00      	nop
 800138c:	20000008 	.word	0x20000008
 8001390:	2000087c 	.word	0x2000087c

08001394 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0
  return uwTick;
 8001398:	4b03      	ldr	r3, [pc, #12]	; (80013a8 <HAL_GetTick+0x14>)
 800139a:	681b      	ldr	r3, [r3, #0]
}
 800139c:	4618      	mov	r0, r3
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr
 80013a6:	bf00      	nop
 80013a8:	2000087c 	.word	0x2000087c

080013ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b084      	sub	sp, #16
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013b4:	f7ff ffee 	bl	8001394 <HAL_GetTick>
 80013b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013c4:	d005      	beq.n	80013d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013c6:	4b0a      	ldr	r3, [pc, #40]	; (80013f0 <HAL_Delay+0x44>)
 80013c8:	781b      	ldrb	r3, [r3, #0]
 80013ca:	461a      	mov	r2, r3
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	4413      	add	r3, r2
 80013d0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80013d2:	bf00      	nop
 80013d4:	f7ff ffde 	bl	8001394 <HAL_GetTick>
 80013d8:	4602      	mov	r2, r0
 80013da:	68bb      	ldr	r3, [r7, #8]
 80013dc:	1ad3      	subs	r3, r2, r3
 80013de:	68fa      	ldr	r2, [r7, #12]
 80013e0:	429a      	cmp	r2, r3
 80013e2:	d8f7      	bhi.n	80013d4 <HAL_Delay+0x28>
  {
  }
}
 80013e4:	bf00      	nop
 80013e6:	bf00      	nop
 80013e8:	3710      	adds	r7, #16
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	20000008 	.word	0x20000008

080013f4 <__NVIC_SetPriorityGrouping>:
{
 80013f4:	b480      	push	{r7}
 80013f6:	b085      	sub	sp, #20
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	f003 0307 	and.w	r3, r3, #7
 8001402:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001404:	4b0c      	ldr	r3, [pc, #48]	; (8001438 <__NVIC_SetPriorityGrouping+0x44>)
 8001406:	68db      	ldr	r3, [r3, #12]
 8001408:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800140a:	68ba      	ldr	r2, [r7, #8]
 800140c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001410:	4013      	ands	r3, r2
 8001412:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001418:	68bb      	ldr	r3, [r7, #8]
 800141a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800141c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001420:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001424:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001426:	4a04      	ldr	r2, [pc, #16]	; (8001438 <__NVIC_SetPriorityGrouping+0x44>)
 8001428:	68bb      	ldr	r3, [r7, #8]
 800142a:	60d3      	str	r3, [r2, #12]
}
 800142c:	bf00      	nop
 800142e:	3714      	adds	r7, #20
 8001430:	46bd      	mov	sp, r7
 8001432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001436:	4770      	bx	lr
 8001438:	e000ed00 	.word	0xe000ed00

0800143c <__NVIC_GetPriorityGrouping>:
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001440:	4b04      	ldr	r3, [pc, #16]	; (8001454 <__NVIC_GetPriorityGrouping+0x18>)
 8001442:	68db      	ldr	r3, [r3, #12]
 8001444:	0a1b      	lsrs	r3, r3, #8
 8001446:	f003 0307 	and.w	r3, r3, #7
}
 800144a:	4618      	mov	r0, r3
 800144c:	46bd      	mov	sp, r7
 800144e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001452:	4770      	bx	lr
 8001454:	e000ed00 	.word	0xe000ed00

08001458 <__NVIC_EnableIRQ>:
{
 8001458:	b480      	push	{r7}
 800145a:	b083      	sub	sp, #12
 800145c:	af00      	add	r7, sp, #0
 800145e:	4603      	mov	r3, r0
 8001460:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001462:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001466:	2b00      	cmp	r3, #0
 8001468:	db0b      	blt.n	8001482 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800146a:	79fb      	ldrb	r3, [r7, #7]
 800146c:	f003 021f 	and.w	r2, r3, #31
 8001470:	4907      	ldr	r1, [pc, #28]	; (8001490 <__NVIC_EnableIRQ+0x38>)
 8001472:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001476:	095b      	lsrs	r3, r3, #5
 8001478:	2001      	movs	r0, #1
 800147a:	fa00 f202 	lsl.w	r2, r0, r2
 800147e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001482:	bf00      	nop
 8001484:	370c      	adds	r7, #12
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr
 800148e:	bf00      	nop
 8001490:	e000e100 	.word	0xe000e100

08001494 <__NVIC_SetPriority>:
{
 8001494:	b480      	push	{r7}
 8001496:	b083      	sub	sp, #12
 8001498:	af00      	add	r7, sp, #0
 800149a:	4603      	mov	r3, r0
 800149c:	6039      	str	r1, [r7, #0]
 800149e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	db0a      	blt.n	80014be <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	b2da      	uxtb	r2, r3
 80014ac:	490c      	ldr	r1, [pc, #48]	; (80014e0 <__NVIC_SetPriority+0x4c>)
 80014ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014b2:	0112      	lsls	r2, r2, #4
 80014b4:	b2d2      	uxtb	r2, r2
 80014b6:	440b      	add	r3, r1
 80014b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80014bc:	e00a      	b.n	80014d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	b2da      	uxtb	r2, r3
 80014c2:	4908      	ldr	r1, [pc, #32]	; (80014e4 <__NVIC_SetPriority+0x50>)
 80014c4:	79fb      	ldrb	r3, [r7, #7]
 80014c6:	f003 030f 	and.w	r3, r3, #15
 80014ca:	3b04      	subs	r3, #4
 80014cc:	0112      	lsls	r2, r2, #4
 80014ce:	b2d2      	uxtb	r2, r2
 80014d0:	440b      	add	r3, r1
 80014d2:	761a      	strb	r2, [r3, #24]
}
 80014d4:	bf00      	nop
 80014d6:	370c      	adds	r7, #12
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr
 80014e0:	e000e100 	.word	0xe000e100
 80014e4:	e000ed00 	.word	0xe000ed00

080014e8 <NVIC_EncodePriority>:
{
 80014e8:	b480      	push	{r7}
 80014ea:	b089      	sub	sp, #36	; 0x24
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	60f8      	str	r0, [r7, #12]
 80014f0:	60b9      	str	r1, [r7, #8]
 80014f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	f003 0307 	and.w	r3, r3, #7
 80014fa:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014fc:	69fb      	ldr	r3, [r7, #28]
 80014fe:	f1c3 0307 	rsb	r3, r3, #7
 8001502:	2b04      	cmp	r3, #4
 8001504:	bf28      	it	cs
 8001506:	2304      	movcs	r3, #4
 8001508:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800150a:	69fb      	ldr	r3, [r7, #28]
 800150c:	3304      	adds	r3, #4
 800150e:	2b06      	cmp	r3, #6
 8001510:	d902      	bls.n	8001518 <NVIC_EncodePriority+0x30>
 8001512:	69fb      	ldr	r3, [r7, #28]
 8001514:	3b03      	subs	r3, #3
 8001516:	e000      	b.n	800151a <NVIC_EncodePriority+0x32>
 8001518:	2300      	movs	r3, #0
 800151a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800151c:	f04f 32ff 	mov.w	r2, #4294967295
 8001520:	69bb      	ldr	r3, [r7, #24]
 8001522:	fa02 f303 	lsl.w	r3, r2, r3
 8001526:	43da      	mvns	r2, r3
 8001528:	68bb      	ldr	r3, [r7, #8]
 800152a:	401a      	ands	r2, r3
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001530:	f04f 31ff 	mov.w	r1, #4294967295
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	fa01 f303 	lsl.w	r3, r1, r3
 800153a:	43d9      	mvns	r1, r3
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001540:	4313      	orrs	r3, r2
}
 8001542:	4618      	mov	r0, r3
 8001544:	3724      	adds	r7, #36	; 0x24
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr
	...

08001550 <SysTick_Config>:
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b082      	sub	sp, #8
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	3b01      	subs	r3, #1
 800155c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001560:	d301      	bcc.n	8001566 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001562:	2301      	movs	r3, #1
 8001564:	e00f      	b.n	8001586 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001566:	4a0a      	ldr	r2, [pc, #40]	; (8001590 <SysTick_Config+0x40>)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	3b01      	subs	r3, #1
 800156c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800156e:	210f      	movs	r1, #15
 8001570:	f04f 30ff 	mov.w	r0, #4294967295
 8001574:	f7ff ff8e 	bl	8001494 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001578:	4b05      	ldr	r3, [pc, #20]	; (8001590 <SysTick_Config+0x40>)
 800157a:	2200      	movs	r2, #0
 800157c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800157e:	4b04      	ldr	r3, [pc, #16]	; (8001590 <SysTick_Config+0x40>)
 8001580:	2207      	movs	r2, #7
 8001582:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001584:	2300      	movs	r3, #0
}
 8001586:	4618      	mov	r0, r3
 8001588:	3708      	adds	r7, #8
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	e000e010 	.word	0xe000e010

08001594 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b082      	sub	sp, #8
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800159c:	6878      	ldr	r0, [r7, #4]
 800159e:	f7ff ff29 	bl	80013f4 <__NVIC_SetPriorityGrouping>
}
 80015a2:	bf00      	nop
 80015a4:	3708      	adds	r7, #8
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}

080015aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015aa:	b580      	push	{r7, lr}
 80015ac:	b086      	sub	sp, #24
 80015ae:	af00      	add	r7, sp, #0
 80015b0:	4603      	mov	r3, r0
 80015b2:	60b9      	str	r1, [r7, #8]
 80015b4:	607a      	str	r2, [r7, #4]
 80015b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015b8:	2300      	movs	r3, #0
 80015ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015bc:	f7ff ff3e 	bl	800143c <__NVIC_GetPriorityGrouping>
 80015c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015c2:	687a      	ldr	r2, [r7, #4]
 80015c4:	68b9      	ldr	r1, [r7, #8]
 80015c6:	6978      	ldr	r0, [r7, #20]
 80015c8:	f7ff ff8e 	bl	80014e8 <NVIC_EncodePriority>
 80015cc:	4602      	mov	r2, r0
 80015ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015d2:	4611      	mov	r1, r2
 80015d4:	4618      	mov	r0, r3
 80015d6:	f7ff ff5d 	bl	8001494 <__NVIC_SetPriority>
}
 80015da:	bf00      	nop
 80015dc:	3718      	adds	r7, #24
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}

080015e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015e2:	b580      	push	{r7, lr}
 80015e4:	b082      	sub	sp, #8
 80015e6:	af00      	add	r7, sp, #0
 80015e8:	4603      	mov	r3, r0
 80015ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015f0:	4618      	mov	r0, r3
 80015f2:	f7ff ff31 	bl	8001458 <__NVIC_EnableIRQ>
}
 80015f6:	bf00      	nop
 80015f8:	3708      	adds	r7, #8
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}

080015fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015fe:	b580      	push	{r7, lr}
 8001600:	b082      	sub	sp, #8
 8001602:	af00      	add	r7, sp, #0
 8001604:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001606:	6878      	ldr	r0, [r7, #4]
 8001608:	f7ff ffa2 	bl	8001550 <SysTick_Config>
 800160c:	4603      	mov	r3, r0
}
 800160e:	4618      	mov	r0, r3
 8001610:	3708      	adds	r7, #8
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
	...

08001618 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b086      	sub	sp, #24
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001620:	2300      	movs	r3, #0
 8001622:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001624:	f7ff feb6 	bl	8001394 <HAL_GetTick>
 8001628:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d101      	bne.n	8001634 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001630:	2301      	movs	r3, #1
 8001632:	e099      	b.n	8001768 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2202      	movs	r2, #2
 8001638:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2200      	movs	r2, #0
 8001640:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	681a      	ldr	r2, [r3, #0]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f022 0201 	bic.w	r2, r2, #1
 8001652:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001654:	e00f      	b.n	8001676 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001656:	f7ff fe9d 	bl	8001394 <HAL_GetTick>
 800165a:	4602      	mov	r2, r0
 800165c:	693b      	ldr	r3, [r7, #16]
 800165e:	1ad3      	subs	r3, r2, r3
 8001660:	2b05      	cmp	r3, #5
 8001662:	d908      	bls.n	8001676 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2220      	movs	r2, #32
 8001668:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	2203      	movs	r2, #3
 800166e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001672:	2303      	movs	r3, #3
 8001674:	e078      	b.n	8001768 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f003 0301 	and.w	r3, r3, #1
 8001680:	2b00      	cmp	r3, #0
 8001682:	d1e8      	bne.n	8001656 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800168c:	697a      	ldr	r2, [r7, #20]
 800168e:	4b38      	ldr	r3, [pc, #224]	; (8001770 <HAL_DMA_Init+0x158>)
 8001690:	4013      	ands	r3, r2
 8001692:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	685a      	ldr	r2, [r3, #4]
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	689b      	ldr	r3, [r3, #8]
 800169c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80016a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	691b      	ldr	r3, [r3, #16]
 80016a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	699b      	ldr	r3, [r3, #24]
 80016b4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016ba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6a1b      	ldr	r3, [r3, #32]
 80016c0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80016c2:	697a      	ldr	r2, [r7, #20]
 80016c4:	4313      	orrs	r3, r2
 80016c6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016cc:	2b04      	cmp	r3, #4
 80016ce:	d107      	bne.n	80016e0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d8:	4313      	orrs	r3, r2
 80016da:	697a      	ldr	r2, [r7, #20]
 80016dc:	4313      	orrs	r3, r2
 80016de:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	697a      	ldr	r2, [r7, #20]
 80016e6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	695b      	ldr	r3, [r3, #20]
 80016ee:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	f023 0307 	bic.w	r3, r3, #7
 80016f6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016fc:	697a      	ldr	r2, [r7, #20]
 80016fe:	4313      	orrs	r3, r2
 8001700:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001706:	2b04      	cmp	r3, #4
 8001708:	d117      	bne.n	800173a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800170e:	697a      	ldr	r2, [r7, #20]
 8001710:	4313      	orrs	r3, r2
 8001712:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001718:	2b00      	cmp	r3, #0
 800171a:	d00e      	beq.n	800173a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800171c:	6878      	ldr	r0, [r7, #4]
 800171e:	f000 fb01 	bl	8001d24 <DMA_CheckFifoParam>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	d008      	beq.n	800173a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2240      	movs	r2, #64	; 0x40
 800172c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2201      	movs	r2, #1
 8001732:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001736:	2301      	movs	r3, #1
 8001738:	e016      	b.n	8001768 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	697a      	ldr	r2, [r7, #20]
 8001740:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001742:	6878      	ldr	r0, [r7, #4]
 8001744:	f000 fab8 	bl	8001cb8 <DMA_CalcBaseAndBitshift>
 8001748:	4603      	mov	r3, r0
 800174a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001750:	223f      	movs	r2, #63	; 0x3f
 8001752:	409a      	lsls	r2, r3
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2200      	movs	r2, #0
 800175c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	2201      	movs	r2, #1
 8001762:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001766:	2300      	movs	r3, #0
}
 8001768:	4618      	mov	r0, r3
 800176a:	3718      	adds	r7, #24
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}
 8001770:	f010803f 	.word	0xf010803f

08001774 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b086      	sub	sp, #24
 8001778:	af00      	add	r7, sp, #0
 800177a:	60f8      	str	r0, [r7, #12]
 800177c:	60b9      	str	r1, [r7, #8]
 800177e:	607a      	str	r2, [r7, #4]
 8001780:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001782:	2300      	movs	r3, #0
 8001784:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800178a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001792:	2b01      	cmp	r3, #1
 8001794:	d101      	bne.n	800179a <HAL_DMA_Start_IT+0x26>
 8001796:	2302      	movs	r3, #2
 8001798:	e040      	b.n	800181c <HAL_DMA_Start_IT+0xa8>
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	2201      	movs	r2, #1
 800179e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80017a8:	b2db      	uxtb	r3, r3
 80017aa:	2b01      	cmp	r3, #1
 80017ac:	d12f      	bne.n	800180e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	2202      	movs	r2, #2
 80017b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	2200      	movs	r2, #0
 80017ba:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	687a      	ldr	r2, [r7, #4]
 80017c0:	68b9      	ldr	r1, [r7, #8]
 80017c2:	68f8      	ldr	r0, [r7, #12]
 80017c4:	f000 fa4a 	bl	8001c5c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017cc:	223f      	movs	r2, #63	; 0x3f
 80017ce:	409a      	lsls	r2, r3
 80017d0:	693b      	ldr	r3, [r7, #16]
 80017d2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	681a      	ldr	r2, [r3, #0]
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f042 0216 	orr.w	r2, r2, #22
 80017e2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d007      	beq.n	80017fc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	681a      	ldr	r2, [r3, #0]
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f042 0208 	orr.w	r2, r2, #8
 80017fa:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	681a      	ldr	r2, [r3, #0]
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f042 0201 	orr.w	r2, r2, #1
 800180a:	601a      	str	r2, [r3, #0]
 800180c:	e005      	b.n	800181a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	2200      	movs	r2, #0
 8001812:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001816:	2302      	movs	r3, #2
 8001818:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800181a:	7dfb      	ldrb	r3, [r7, #23]
}
 800181c:	4618      	mov	r0, r3
 800181e:	3718      	adds	r7, #24
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}

08001824 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b084      	sub	sp, #16
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001830:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001832:	f7ff fdaf 	bl	8001394 <HAL_GetTick>
 8001836:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800183e:	b2db      	uxtb	r3, r3
 8001840:	2b02      	cmp	r3, #2
 8001842:	d008      	beq.n	8001856 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2280      	movs	r2, #128	; 0x80
 8001848:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2200      	movs	r2, #0
 800184e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001852:	2301      	movs	r3, #1
 8001854:	e052      	b.n	80018fc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	681a      	ldr	r2, [r3, #0]
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f022 0216 	bic.w	r2, r2, #22
 8001864:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	695a      	ldr	r2, [r3, #20]
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001874:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800187a:	2b00      	cmp	r3, #0
 800187c:	d103      	bne.n	8001886 <HAL_DMA_Abort+0x62>
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001882:	2b00      	cmp	r3, #0
 8001884:	d007      	beq.n	8001896 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	681a      	ldr	r2, [r3, #0]
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f022 0208 	bic.w	r2, r2, #8
 8001894:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	681a      	ldr	r2, [r3, #0]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f022 0201 	bic.w	r2, r2, #1
 80018a4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80018a6:	e013      	b.n	80018d0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80018a8:	f7ff fd74 	bl	8001394 <HAL_GetTick>
 80018ac:	4602      	mov	r2, r0
 80018ae:	68bb      	ldr	r3, [r7, #8]
 80018b0:	1ad3      	subs	r3, r2, r3
 80018b2:	2b05      	cmp	r3, #5
 80018b4:	d90c      	bls.n	80018d0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2220      	movs	r2, #32
 80018ba:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2203      	movs	r2, #3
 80018c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2200      	movs	r2, #0
 80018c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80018cc:	2303      	movs	r3, #3
 80018ce:	e015      	b.n	80018fc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f003 0301 	and.w	r3, r3, #1
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d1e4      	bne.n	80018a8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018e2:	223f      	movs	r2, #63	; 0x3f
 80018e4:	409a      	lsls	r2, r3
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2201      	movs	r2, #1
 80018ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	2200      	movs	r2, #0
 80018f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80018fa:	2300      	movs	r3, #0
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	3710      	adds	r7, #16
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}

08001904 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001904:	b480      	push	{r7}
 8001906:	b083      	sub	sp, #12
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001912:	b2db      	uxtb	r3, r3
 8001914:	2b02      	cmp	r3, #2
 8001916:	d004      	beq.n	8001922 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2280      	movs	r2, #128	; 0x80
 800191c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800191e:	2301      	movs	r3, #1
 8001920:	e00c      	b.n	800193c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2205      	movs	r2, #5
 8001926:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	681a      	ldr	r2, [r3, #0]
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f022 0201 	bic.w	r2, r2, #1
 8001938:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800193a:	2300      	movs	r3, #0
}
 800193c:	4618      	mov	r0, r3
 800193e:	370c      	adds	r7, #12
 8001940:	46bd      	mov	sp, r7
 8001942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001946:	4770      	bx	lr

08001948 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b086      	sub	sp, #24
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001950:	2300      	movs	r3, #0
 8001952:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001954:	4b8e      	ldr	r3, [pc, #568]	; (8001b90 <HAL_DMA_IRQHandler+0x248>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a8e      	ldr	r2, [pc, #568]	; (8001b94 <HAL_DMA_IRQHandler+0x24c>)
 800195a:	fba2 2303 	umull	r2, r3, r2, r3
 800195e:	0a9b      	lsrs	r3, r3, #10
 8001960:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001966:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001968:	693b      	ldr	r3, [r7, #16]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001972:	2208      	movs	r2, #8
 8001974:	409a      	lsls	r2, r3
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	4013      	ands	r3, r2
 800197a:	2b00      	cmp	r3, #0
 800197c:	d01a      	beq.n	80019b4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f003 0304 	and.w	r3, r3, #4
 8001988:	2b00      	cmp	r3, #0
 800198a:	d013      	beq.n	80019b4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	681a      	ldr	r2, [r3, #0]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f022 0204 	bic.w	r2, r2, #4
 800199a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019a0:	2208      	movs	r2, #8
 80019a2:	409a      	lsls	r2, r3
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019ac:	f043 0201 	orr.w	r2, r3, #1
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019b8:	2201      	movs	r2, #1
 80019ba:	409a      	lsls	r2, r3
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	4013      	ands	r3, r2
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d012      	beq.n	80019ea <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	695b      	ldr	r3, [r3, #20]
 80019ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d00b      	beq.n	80019ea <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019d6:	2201      	movs	r2, #1
 80019d8:	409a      	lsls	r2, r3
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019e2:	f043 0202 	orr.w	r2, r3, #2
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019ee:	2204      	movs	r2, #4
 80019f0:	409a      	lsls	r2, r3
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	4013      	ands	r3, r2
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d012      	beq.n	8001a20 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f003 0302 	and.w	r3, r3, #2
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d00b      	beq.n	8001a20 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a0c:	2204      	movs	r2, #4
 8001a0e:	409a      	lsls	r2, r3
 8001a10:	693b      	ldr	r3, [r7, #16]
 8001a12:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a18:	f043 0204 	orr.w	r2, r3, #4
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a24:	2210      	movs	r2, #16
 8001a26:	409a      	lsls	r2, r3
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	4013      	ands	r3, r2
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d043      	beq.n	8001ab8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f003 0308 	and.w	r3, r3, #8
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d03c      	beq.n	8001ab8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a42:	2210      	movs	r2, #16
 8001a44:	409a      	lsls	r2, r3
 8001a46:	693b      	ldr	r3, [r7, #16]
 8001a48:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d018      	beq.n	8001a8a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d108      	bne.n	8001a78 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d024      	beq.n	8001ab8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a72:	6878      	ldr	r0, [r7, #4]
 8001a74:	4798      	blx	r3
 8001a76:	e01f      	b.n	8001ab8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d01b      	beq.n	8001ab8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a84:	6878      	ldr	r0, [r7, #4]
 8001a86:	4798      	blx	r3
 8001a88:	e016      	b.n	8001ab8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d107      	bne.n	8001aa8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	681a      	ldr	r2, [r3, #0]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f022 0208 	bic.w	r2, r2, #8
 8001aa6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d003      	beq.n	8001ab8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab4:	6878      	ldr	r0, [r7, #4]
 8001ab6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001abc:	2220      	movs	r2, #32
 8001abe:	409a      	lsls	r2, r3
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	4013      	ands	r3, r2
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	f000 808f 	beq.w	8001be8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f003 0310 	and.w	r3, r3, #16
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	f000 8087 	beq.w	8001be8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ade:	2220      	movs	r2, #32
 8001ae0:	409a      	lsls	r2, r3
 8001ae2:	693b      	ldr	r3, [r7, #16]
 8001ae4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001aec:	b2db      	uxtb	r3, r3
 8001aee:	2b05      	cmp	r3, #5
 8001af0:	d136      	bne.n	8001b60 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	681a      	ldr	r2, [r3, #0]
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f022 0216 	bic.w	r2, r2, #22
 8001b00:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	695a      	ldr	r2, [r3, #20]
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001b10:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d103      	bne.n	8001b22 <HAL_DMA_IRQHandler+0x1da>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d007      	beq.n	8001b32 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	681a      	ldr	r2, [r3, #0]
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f022 0208 	bic.w	r2, r2, #8
 8001b30:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b36:	223f      	movs	r2, #63	; 0x3f
 8001b38:	409a      	lsls	r2, r3
 8001b3a:	693b      	ldr	r3, [r7, #16]
 8001b3c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2201      	movs	r2, #1
 8001b42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2200      	movs	r2, #0
 8001b4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d07e      	beq.n	8001c54 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b5a:	6878      	ldr	r0, [r7, #4]
 8001b5c:	4798      	blx	r3
        }
        return;
 8001b5e:	e079      	b.n	8001c54 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d01d      	beq.n	8001baa <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d10d      	bne.n	8001b98 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d031      	beq.n	8001be8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b88:	6878      	ldr	r0, [r7, #4]
 8001b8a:	4798      	blx	r3
 8001b8c:	e02c      	b.n	8001be8 <HAL_DMA_IRQHandler+0x2a0>
 8001b8e:	bf00      	nop
 8001b90:	20000000 	.word	0x20000000
 8001b94:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d023      	beq.n	8001be8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ba4:	6878      	ldr	r0, [r7, #4]
 8001ba6:	4798      	blx	r3
 8001ba8:	e01e      	b.n	8001be8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d10f      	bne.n	8001bd8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	681a      	ldr	r2, [r3, #0]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f022 0210 	bic.w	r2, r2, #16
 8001bc6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2201      	movs	r2, #1
 8001bcc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d003      	beq.n	8001be8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001be4:	6878      	ldr	r0, [r7, #4]
 8001be6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d032      	beq.n	8001c56 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bf4:	f003 0301 	and.w	r3, r3, #1
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d022      	beq.n	8001c42 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2205      	movs	r2, #5
 8001c00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	681a      	ldr	r2, [r3, #0]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f022 0201 	bic.w	r2, r2, #1
 8001c12:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001c14:	68bb      	ldr	r3, [r7, #8]
 8001c16:	3301      	adds	r3, #1
 8001c18:	60bb      	str	r3, [r7, #8]
 8001c1a:	697a      	ldr	r2, [r7, #20]
 8001c1c:	429a      	cmp	r2, r3
 8001c1e:	d307      	bcc.n	8001c30 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f003 0301 	and.w	r3, r3, #1
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d1f2      	bne.n	8001c14 <HAL_DMA_IRQHandler+0x2cc>
 8001c2e:	e000      	b.n	8001c32 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001c30:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2201      	movs	r2, #1
 8001c36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d005      	beq.n	8001c56 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c4e:	6878      	ldr	r0, [r7, #4]
 8001c50:	4798      	blx	r3
 8001c52:	e000      	b.n	8001c56 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001c54:	bf00      	nop
    }
  }
}
 8001c56:	3718      	adds	r7, #24
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}

08001c5c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b085      	sub	sp, #20
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	60f8      	str	r0, [r7, #12]
 8001c64:	60b9      	str	r1, [r7, #8]
 8001c66:	607a      	str	r2, [r7, #4]
 8001c68:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	681a      	ldr	r2, [r3, #0]
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001c78:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	683a      	ldr	r2, [r7, #0]
 8001c80:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	689b      	ldr	r3, [r3, #8]
 8001c86:	2b40      	cmp	r3, #64	; 0x40
 8001c88:	d108      	bne.n	8001c9c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	687a      	ldr	r2, [r7, #4]
 8001c90:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	68ba      	ldr	r2, [r7, #8]
 8001c98:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001c9a:	e007      	b.n	8001cac <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	68ba      	ldr	r2, [r7, #8]
 8001ca2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	687a      	ldr	r2, [r7, #4]
 8001caa:	60da      	str	r2, [r3, #12]
}
 8001cac:	bf00      	nop
 8001cae:	3714      	adds	r7, #20
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb6:	4770      	bx	lr

08001cb8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b085      	sub	sp, #20
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	b2db      	uxtb	r3, r3
 8001cc6:	3b10      	subs	r3, #16
 8001cc8:	4a14      	ldr	r2, [pc, #80]	; (8001d1c <DMA_CalcBaseAndBitshift+0x64>)
 8001cca:	fba2 2303 	umull	r2, r3, r2, r3
 8001cce:	091b      	lsrs	r3, r3, #4
 8001cd0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001cd2:	4a13      	ldr	r2, [pc, #76]	; (8001d20 <DMA_CalcBaseAndBitshift+0x68>)
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	4413      	add	r3, r2
 8001cd8:	781b      	ldrb	r3, [r3, #0]
 8001cda:	461a      	mov	r2, r3
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	2b03      	cmp	r3, #3
 8001ce4:	d909      	bls.n	8001cfa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001cee:	f023 0303 	bic.w	r3, r3, #3
 8001cf2:	1d1a      	adds	r2, r3, #4
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	659a      	str	r2, [r3, #88]	; 0x58
 8001cf8:	e007      	b.n	8001d0a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001d02:	f023 0303 	bic.w	r3, r3, #3
 8001d06:	687a      	ldr	r2, [r7, #4]
 8001d08:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	3714      	adds	r7, #20
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr
 8001d1a:	bf00      	nop
 8001d1c:	aaaaaaab 	.word	0xaaaaaaab
 8001d20:	08009728 	.word	0x08009728

08001d24 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b085      	sub	sp, #20
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d34:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	699b      	ldr	r3, [r3, #24]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d11f      	bne.n	8001d7e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001d3e:	68bb      	ldr	r3, [r7, #8]
 8001d40:	2b03      	cmp	r3, #3
 8001d42:	d856      	bhi.n	8001df2 <DMA_CheckFifoParam+0xce>
 8001d44:	a201      	add	r2, pc, #4	; (adr r2, 8001d4c <DMA_CheckFifoParam+0x28>)
 8001d46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d4a:	bf00      	nop
 8001d4c:	08001d5d 	.word	0x08001d5d
 8001d50:	08001d6f 	.word	0x08001d6f
 8001d54:	08001d5d 	.word	0x08001d5d
 8001d58:	08001df3 	.word	0x08001df3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d60:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d046      	beq.n	8001df6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001d6c:	e043      	b.n	8001df6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d72:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001d76:	d140      	bne.n	8001dfa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001d7c:	e03d      	b.n	8001dfa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	699b      	ldr	r3, [r3, #24]
 8001d82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d86:	d121      	bne.n	8001dcc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001d88:	68bb      	ldr	r3, [r7, #8]
 8001d8a:	2b03      	cmp	r3, #3
 8001d8c:	d837      	bhi.n	8001dfe <DMA_CheckFifoParam+0xda>
 8001d8e:	a201      	add	r2, pc, #4	; (adr r2, 8001d94 <DMA_CheckFifoParam+0x70>)
 8001d90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d94:	08001da5 	.word	0x08001da5
 8001d98:	08001dab 	.word	0x08001dab
 8001d9c:	08001da5 	.word	0x08001da5
 8001da0:	08001dbd 	.word	0x08001dbd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001da4:	2301      	movs	r3, #1
 8001da6:	73fb      	strb	r3, [r7, #15]
      break;
 8001da8:	e030      	b.n	8001e0c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d025      	beq.n	8001e02 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001db6:	2301      	movs	r3, #1
 8001db8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001dba:	e022      	b.n	8001e02 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dc0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001dc4:	d11f      	bne.n	8001e06 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001dca:	e01c      	b.n	8001e06 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001dcc:	68bb      	ldr	r3, [r7, #8]
 8001dce:	2b02      	cmp	r3, #2
 8001dd0:	d903      	bls.n	8001dda <DMA_CheckFifoParam+0xb6>
 8001dd2:	68bb      	ldr	r3, [r7, #8]
 8001dd4:	2b03      	cmp	r3, #3
 8001dd6:	d003      	beq.n	8001de0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001dd8:	e018      	b.n	8001e0c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	73fb      	strb	r3, [r7, #15]
      break;
 8001dde:	e015      	b.n	8001e0c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001de4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d00e      	beq.n	8001e0a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001dec:	2301      	movs	r3, #1
 8001dee:	73fb      	strb	r3, [r7, #15]
      break;
 8001df0:	e00b      	b.n	8001e0a <DMA_CheckFifoParam+0xe6>
      break;
 8001df2:	bf00      	nop
 8001df4:	e00a      	b.n	8001e0c <DMA_CheckFifoParam+0xe8>
      break;
 8001df6:	bf00      	nop
 8001df8:	e008      	b.n	8001e0c <DMA_CheckFifoParam+0xe8>
      break;
 8001dfa:	bf00      	nop
 8001dfc:	e006      	b.n	8001e0c <DMA_CheckFifoParam+0xe8>
      break;
 8001dfe:	bf00      	nop
 8001e00:	e004      	b.n	8001e0c <DMA_CheckFifoParam+0xe8>
      break;
 8001e02:	bf00      	nop
 8001e04:	e002      	b.n	8001e0c <DMA_CheckFifoParam+0xe8>
      break;   
 8001e06:	bf00      	nop
 8001e08:	e000      	b.n	8001e0c <DMA_CheckFifoParam+0xe8>
      break;
 8001e0a:	bf00      	nop
    }
  } 
  
  return status; 
 8001e0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	3714      	adds	r7, #20
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr
 8001e1a:	bf00      	nop

08001e1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b089      	sub	sp, #36	; 0x24
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
 8001e24:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e26:	2300      	movs	r3, #0
 8001e28:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e32:	2300      	movs	r3, #0
 8001e34:	61fb      	str	r3, [r7, #28]
 8001e36:	e165      	b.n	8002104 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e38:	2201      	movs	r2, #1
 8001e3a:	69fb      	ldr	r3, [r7, #28]
 8001e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e40:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	697a      	ldr	r2, [r7, #20]
 8001e48:	4013      	ands	r3, r2
 8001e4a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e4c:	693a      	ldr	r2, [r7, #16]
 8001e4e:	697b      	ldr	r3, [r7, #20]
 8001e50:	429a      	cmp	r2, r3
 8001e52:	f040 8154 	bne.w	80020fe <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	f003 0303 	and.w	r3, r3, #3
 8001e5e:	2b01      	cmp	r3, #1
 8001e60:	d005      	beq.n	8001e6e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e6a:	2b02      	cmp	r3, #2
 8001e6c:	d130      	bne.n	8001ed0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	689b      	ldr	r3, [r3, #8]
 8001e72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e74:	69fb      	ldr	r3, [r7, #28]
 8001e76:	005b      	lsls	r3, r3, #1
 8001e78:	2203      	movs	r2, #3
 8001e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7e:	43db      	mvns	r3, r3
 8001e80:	69ba      	ldr	r2, [r7, #24]
 8001e82:	4013      	ands	r3, r2
 8001e84:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	68da      	ldr	r2, [r3, #12]
 8001e8a:	69fb      	ldr	r3, [r7, #28]
 8001e8c:	005b      	lsls	r3, r3, #1
 8001e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e92:	69ba      	ldr	r2, [r7, #24]
 8001e94:	4313      	orrs	r3, r2
 8001e96:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	69ba      	ldr	r2, [r7, #24]
 8001e9c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	69fb      	ldr	r3, [r7, #28]
 8001ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8001eac:	43db      	mvns	r3, r3
 8001eae:	69ba      	ldr	r2, [r7, #24]
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	091b      	lsrs	r3, r3, #4
 8001eba:	f003 0201 	and.w	r2, r3, #1
 8001ebe:	69fb      	ldr	r3, [r7, #28]
 8001ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec4:	69ba      	ldr	r2, [r7, #24]
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	69ba      	ldr	r2, [r7, #24]
 8001ece:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	f003 0303 	and.w	r3, r3, #3
 8001ed8:	2b03      	cmp	r3, #3
 8001eda:	d017      	beq.n	8001f0c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	68db      	ldr	r3, [r3, #12]
 8001ee0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001ee2:	69fb      	ldr	r3, [r7, #28]
 8001ee4:	005b      	lsls	r3, r3, #1
 8001ee6:	2203      	movs	r2, #3
 8001ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8001eec:	43db      	mvns	r3, r3
 8001eee:	69ba      	ldr	r2, [r7, #24]
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	689a      	ldr	r2, [r3, #8]
 8001ef8:	69fb      	ldr	r3, [r7, #28]
 8001efa:	005b      	lsls	r3, r3, #1
 8001efc:	fa02 f303 	lsl.w	r3, r2, r3
 8001f00:	69ba      	ldr	r2, [r7, #24]
 8001f02:	4313      	orrs	r3, r2
 8001f04:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	69ba      	ldr	r2, [r7, #24]
 8001f0a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	f003 0303 	and.w	r3, r3, #3
 8001f14:	2b02      	cmp	r3, #2
 8001f16:	d123      	bne.n	8001f60 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f18:	69fb      	ldr	r3, [r7, #28]
 8001f1a:	08da      	lsrs	r2, r3, #3
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	3208      	adds	r2, #8
 8001f20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f24:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f26:	69fb      	ldr	r3, [r7, #28]
 8001f28:	f003 0307 	and.w	r3, r3, #7
 8001f2c:	009b      	lsls	r3, r3, #2
 8001f2e:	220f      	movs	r2, #15
 8001f30:	fa02 f303 	lsl.w	r3, r2, r3
 8001f34:	43db      	mvns	r3, r3
 8001f36:	69ba      	ldr	r2, [r7, #24]
 8001f38:	4013      	ands	r3, r2
 8001f3a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	691a      	ldr	r2, [r3, #16]
 8001f40:	69fb      	ldr	r3, [r7, #28]
 8001f42:	f003 0307 	and.w	r3, r3, #7
 8001f46:	009b      	lsls	r3, r3, #2
 8001f48:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4c:	69ba      	ldr	r2, [r7, #24]
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f52:	69fb      	ldr	r3, [r7, #28]
 8001f54:	08da      	lsrs	r2, r3, #3
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	3208      	adds	r2, #8
 8001f5a:	69b9      	ldr	r1, [r7, #24]
 8001f5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f66:	69fb      	ldr	r3, [r7, #28]
 8001f68:	005b      	lsls	r3, r3, #1
 8001f6a:	2203      	movs	r2, #3
 8001f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f70:	43db      	mvns	r3, r3
 8001f72:	69ba      	ldr	r2, [r7, #24]
 8001f74:	4013      	ands	r3, r2
 8001f76:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	f003 0203 	and.w	r2, r3, #3
 8001f80:	69fb      	ldr	r3, [r7, #28]
 8001f82:	005b      	lsls	r3, r3, #1
 8001f84:	fa02 f303 	lsl.w	r3, r2, r3
 8001f88:	69ba      	ldr	r2, [r7, #24]
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	69ba      	ldr	r2, [r7, #24]
 8001f92:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	f000 80ae 	beq.w	80020fe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	60fb      	str	r3, [r7, #12]
 8001fa6:	4b5d      	ldr	r3, [pc, #372]	; (800211c <HAL_GPIO_Init+0x300>)
 8001fa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001faa:	4a5c      	ldr	r2, [pc, #368]	; (800211c <HAL_GPIO_Init+0x300>)
 8001fac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fb0:	6453      	str	r3, [r2, #68]	; 0x44
 8001fb2:	4b5a      	ldr	r3, [pc, #360]	; (800211c <HAL_GPIO_Init+0x300>)
 8001fb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fba:	60fb      	str	r3, [r7, #12]
 8001fbc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001fbe:	4a58      	ldr	r2, [pc, #352]	; (8002120 <HAL_GPIO_Init+0x304>)
 8001fc0:	69fb      	ldr	r3, [r7, #28]
 8001fc2:	089b      	lsrs	r3, r3, #2
 8001fc4:	3302      	adds	r3, #2
 8001fc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001fcc:	69fb      	ldr	r3, [r7, #28]
 8001fce:	f003 0303 	and.w	r3, r3, #3
 8001fd2:	009b      	lsls	r3, r3, #2
 8001fd4:	220f      	movs	r2, #15
 8001fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fda:	43db      	mvns	r3, r3
 8001fdc:	69ba      	ldr	r2, [r7, #24]
 8001fde:	4013      	ands	r3, r2
 8001fe0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	4a4f      	ldr	r2, [pc, #316]	; (8002124 <HAL_GPIO_Init+0x308>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d025      	beq.n	8002036 <HAL_GPIO_Init+0x21a>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	4a4e      	ldr	r2, [pc, #312]	; (8002128 <HAL_GPIO_Init+0x30c>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d01f      	beq.n	8002032 <HAL_GPIO_Init+0x216>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	4a4d      	ldr	r2, [pc, #308]	; (800212c <HAL_GPIO_Init+0x310>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d019      	beq.n	800202e <HAL_GPIO_Init+0x212>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	4a4c      	ldr	r2, [pc, #304]	; (8002130 <HAL_GPIO_Init+0x314>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d013      	beq.n	800202a <HAL_GPIO_Init+0x20e>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	4a4b      	ldr	r2, [pc, #300]	; (8002134 <HAL_GPIO_Init+0x318>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d00d      	beq.n	8002026 <HAL_GPIO_Init+0x20a>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	4a4a      	ldr	r2, [pc, #296]	; (8002138 <HAL_GPIO_Init+0x31c>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d007      	beq.n	8002022 <HAL_GPIO_Init+0x206>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	4a49      	ldr	r2, [pc, #292]	; (800213c <HAL_GPIO_Init+0x320>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d101      	bne.n	800201e <HAL_GPIO_Init+0x202>
 800201a:	2306      	movs	r3, #6
 800201c:	e00c      	b.n	8002038 <HAL_GPIO_Init+0x21c>
 800201e:	2307      	movs	r3, #7
 8002020:	e00a      	b.n	8002038 <HAL_GPIO_Init+0x21c>
 8002022:	2305      	movs	r3, #5
 8002024:	e008      	b.n	8002038 <HAL_GPIO_Init+0x21c>
 8002026:	2304      	movs	r3, #4
 8002028:	e006      	b.n	8002038 <HAL_GPIO_Init+0x21c>
 800202a:	2303      	movs	r3, #3
 800202c:	e004      	b.n	8002038 <HAL_GPIO_Init+0x21c>
 800202e:	2302      	movs	r3, #2
 8002030:	e002      	b.n	8002038 <HAL_GPIO_Init+0x21c>
 8002032:	2301      	movs	r3, #1
 8002034:	e000      	b.n	8002038 <HAL_GPIO_Init+0x21c>
 8002036:	2300      	movs	r3, #0
 8002038:	69fa      	ldr	r2, [r7, #28]
 800203a:	f002 0203 	and.w	r2, r2, #3
 800203e:	0092      	lsls	r2, r2, #2
 8002040:	4093      	lsls	r3, r2
 8002042:	69ba      	ldr	r2, [r7, #24]
 8002044:	4313      	orrs	r3, r2
 8002046:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002048:	4935      	ldr	r1, [pc, #212]	; (8002120 <HAL_GPIO_Init+0x304>)
 800204a:	69fb      	ldr	r3, [r7, #28]
 800204c:	089b      	lsrs	r3, r3, #2
 800204e:	3302      	adds	r3, #2
 8002050:	69ba      	ldr	r2, [r7, #24]
 8002052:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002056:	4b3a      	ldr	r3, [pc, #232]	; (8002140 <HAL_GPIO_Init+0x324>)
 8002058:	689b      	ldr	r3, [r3, #8]
 800205a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800205c:	693b      	ldr	r3, [r7, #16]
 800205e:	43db      	mvns	r3, r3
 8002060:	69ba      	ldr	r2, [r7, #24]
 8002062:	4013      	ands	r3, r2
 8002064:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800206e:	2b00      	cmp	r3, #0
 8002070:	d003      	beq.n	800207a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002072:	69ba      	ldr	r2, [r7, #24]
 8002074:	693b      	ldr	r3, [r7, #16]
 8002076:	4313      	orrs	r3, r2
 8002078:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800207a:	4a31      	ldr	r2, [pc, #196]	; (8002140 <HAL_GPIO_Init+0x324>)
 800207c:	69bb      	ldr	r3, [r7, #24]
 800207e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002080:	4b2f      	ldr	r3, [pc, #188]	; (8002140 <HAL_GPIO_Init+0x324>)
 8002082:	68db      	ldr	r3, [r3, #12]
 8002084:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	43db      	mvns	r3, r3
 800208a:	69ba      	ldr	r2, [r7, #24]
 800208c:	4013      	ands	r3, r2
 800208e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002098:	2b00      	cmp	r3, #0
 800209a:	d003      	beq.n	80020a4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800209c:	69ba      	ldr	r2, [r7, #24]
 800209e:	693b      	ldr	r3, [r7, #16]
 80020a0:	4313      	orrs	r3, r2
 80020a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80020a4:	4a26      	ldr	r2, [pc, #152]	; (8002140 <HAL_GPIO_Init+0x324>)
 80020a6:	69bb      	ldr	r3, [r7, #24]
 80020a8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80020aa:	4b25      	ldr	r3, [pc, #148]	; (8002140 <HAL_GPIO_Init+0x324>)
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020b0:	693b      	ldr	r3, [r7, #16]
 80020b2:	43db      	mvns	r3, r3
 80020b4:	69ba      	ldr	r2, [r7, #24]
 80020b6:	4013      	ands	r3, r2
 80020b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d003      	beq.n	80020ce <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80020c6:	69ba      	ldr	r2, [r7, #24]
 80020c8:	693b      	ldr	r3, [r7, #16]
 80020ca:	4313      	orrs	r3, r2
 80020cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80020ce:	4a1c      	ldr	r2, [pc, #112]	; (8002140 <HAL_GPIO_Init+0x324>)
 80020d0:	69bb      	ldr	r3, [r7, #24]
 80020d2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80020d4:	4b1a      	ldr	r3, [pc, #104]	; (8002140 <HAL_GPIO_Init+0x324>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	43db      	mvns	r3, r3
 80020de:	69ba      	ldr	r2, [r7, #24]
 80020e0:	4013      	ands	r3, r2
 80020e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d003      	beq.n	80020f8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80020f0:	69ba      	ldr	r2, [r7, #24]
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	4313      	orrs	r3, r2
 80020f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80020f8:	4a11      	ldr	r2, [pc, #68]	; (8002140 <HAL_GPIO_Init+0x324>)
 80020fa:	69bb      	ldr	r3, [r7, #24]
 80020fc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020fe:	69fb      	ldr	r3, [r7, #28]
 8002100:	3301      	adds	r3, #1
 8002102:	61fb      	str	r3, [r7, #28]
 8002104:	69fb      	ldr	r3, [r7, #28]
 8002106:	2b0f      	cmp	r3, #15
 8002108:	f67f ae96 	bls.w	8001e38 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800210c:	bf00      	nop
 800210e:	bf00      	nop
 8002110:	3724      	adds	r7, #36	; 0x24
 8002112:	46bd      	mov	sp, r7
 8002114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002118:	4770      	bx	lr
 800211a:	bf00      	nop
 800211c:	40023800 	.word	0x40023800
 8002120:	40013800 	.word	0x40013800
 8002124:	40020000 	.word	0x40020000
 8002128:	40020400 	.word	0x40020400
 800212c:	40020800 	.word	0x40020800
 8002130:	40020c00 	.word	0x40020c00
 8002134:	40021000 	.word	0x40021000
 8002138:	40021400 	.word	0x40021400
 800213c:	40021800 	.word	0x40021800
 8002140:	40013c00 	.word	0x40013c00

08002144 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002144:	b480      	push	{r7}
 8002146:	b085      	sub	sp, #20
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
 800214c:	460b      	mov	r3, r1
 800214e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	691a      	ldr	r2, [r3, #16]
 8002154:	887b      	ldrh	r3, [r7, #2]
 8002156:	4013      	ands	r3, r2
 8002158:	2b00      	cmp	r3, #0
 800215a:	d002      	beq.n	8002162 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800215c:	2301      	movs	r3, #1
 800215e:	73fb      	strb	r3, [r7, #15]
 8002160:	e001      	b.n	8002166 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002162:	2300      	movs	r3, #0
 8002164:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002166:	7bfb      	ldrb	r3, [r7, #15]
}
 8002168:	4618      	mov	r0, r3
 800216a:	3714      	adds	r7, #20
 800216c:	46bd      	mov	sp, r7
 800216e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002172:	4770      	bx	lr

08002174 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002174:	b480      	push	{r7}
 8002176:	b083      	sub	sp, #12
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
 800217c:	460b      	mov	r3, r1
 800217e:	807b      	strh	r3, [r7, #2]
 8002180:	4613      	mov	r3, r2
 8002182:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002184:	787b      	ldrb	r3, [r7, #1]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d003      	beq.n	8002192 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800218a:	887a      	ldrh	r2, [r7, #2]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002190:	e003      	b.n	800219a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002192:	887b      	ldrh	r3, [r7, #2]
 8002194:	041a      	lsls	r2, r3, #16
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	619a      	str	r2, [r3, #24]
}
 800219a:	bf00      	nop
 800219c:	370c      	adds	r7, #12
 800219e:	46bd      	mov	sp, r7
 80021a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a4:	4770      	bx	lr
	...

080021a8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b082      	sub	sp, #8
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	4603      	mov	r3, r0
 80021b0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80021b2:	4b08      	ldr	r3, [pc, #32]	; (80021d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80021b4:	695a      	ldr	r2, [r3, #20]
 80021b6:	88fb      	ldrh	r3, [r7, #6]
 80021b8:	4013      	ands	r3, r2
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d006      	beq.n	80021cc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80021be:	4a05      	ldr	r2, [pc, #20]	; (80021d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80021c0:	88fb      	ldrh	r3, [r7, #6]
 80021c2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80021c4:	88fb      	ldrh	r3, [r7, #6]
 80021c6:	4618      	mov	r0, r3
 80021c8:	f7fe fd9e 	bl	8000d08 <HAL_GPIO_EXTI_Callback>
  }
}
 80021cc:	bf00      	nop
 80021ce:	3708      	adds	r7, #8
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}
 80021d4:	40013c00 	.word	0x40013c00

080021d8 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b088      	sub	sp, #32
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d101      	bne.n	80021ea <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
 80021e8:	e0e1      	b.n	80023ae <HAL_I2S_Init+0x1d6>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80021f0:	b2db      	uxtb	r3, r3
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d109      	bne.n	800220a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2200      	movs	r2, #0
 80021fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	4a6d      	ldr	r2, [pc, #436]	; (80023b8 <HAL_I2S_Init+0x1e0>)
 8002202:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8002204:	6878      	ldr	r0, [r7, #4]
 8002206:	f7fe fdcf 	bl	8000da8 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2202      	movs	r2, #2
 800220e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	69db      	ldr	r3, [r3, #28]
 8002218:	687a      	ldr	r2, [r7, #4]
 800221a:	6812      	ldr	r2, [r2, #0]
 800221c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002220:	f023 030f 	bic.w	r3, r3, #15
 8002224:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	2202      	movs	r2, #2
 800222c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	695b      	ldr	r3, [r3, #20]
 8002232:	2b02      	cmp	r3, #2
 8002234:	d06f      	beq.n	8002316 <HAL_I2S_Init+0x13e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	68db      	ldr	r3, [r3, #12]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d102      	bne.n	8002244 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800223e:	2310      	movs	r3, #16
 8002240:	617b      	str	r3, [r7, #20]
 8002242:	e001      	b.n	8002248 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8002244:	2320      	movs	r3, #32
 8002246:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	2b20      	cmp	r3, #32
 800224e:	d802      	bhi.n	8002256 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8002250:	697b      	ldr	r3, [r7, #20]
 8002252:	005b      	lsls	r3, r3, #1
 8002254:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value **********************************************/
#if defined(I2S_APB1_APB2_FEATURE)
    if (IS_I2S_APB1_INSTANCE(hi2s->Instance))
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a58      	ldr	r2, [pc, #352]	; (80023bc <HAL_I2S_Init+0x1e4>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d004      	beq.n	800226a <HAL_I2S_Init+0x92>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a56      	ldr	r2, [pc, #344]	; (80023c0 <HAL_I2S_Init+0x1e8>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d104      	bne.n	8002274 <HAL_I2S_Init+0x9c>
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB1);
 800226a:	2001      	movs	r0, #1
 800226c:	f000 fff2 	bl	8003254 <HAL_RCCEx_GetPeriphCLKFreq>
 8002270:	60f8      	str	r0, [r7, #12]
 8002272:	e003      	b.n	800227c <HAL_I2S_Init+0xa4>
    }
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
 8002274:	2002      	movs	r0, #2
 8002276:	f000 ffed 	bl	8003254 <HAL_RCCEx_GetPeriphCLKFreq>
 800227a:	60f8      	str	r0, [r7, #12]
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	691b      	ldr	r3, [r3, #16]
 8002280:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002284:	d125      	bne.n	80022d2 <HAL_I2S_Init+0xfa>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	68db      	ldr	r3, [r3, #12]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d010      	beq.n	80022b0 <HAL_I2S_Init+0xd8>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800228e:	697b      	ldr	r3, [r7, #20]
 8002290:	009b      	lsls	r3, r3, #2
 8002292:	68fa      	ldr	r2, [r7, #12]
 8002294:	fbb2 f2f3 	udiv	r2, r2, r3
 8002298:	4613      	mov	r3, r2
 800229a:	009b      	lsls	r3, r3, #2
 800229c:	4413      	add	r3, r2
 800229e:	005b      	lsls	r3, r3, #1
 80022a0:	461a      	mov	r2, r3
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	695b      	ldr	r3, [r3, #20]
 80022a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80022aa:	3305      	adds	r3, #5
 80022ac:	613b      	str	r3, [r7, #16]
 80022ae:	e01f      	b.n	80022f0 <HAL_I2S_Init+0x118>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	00db      	lsls	r3, r3, #3
 80022b4:	68fa      	ldr	r2, [r7, #12]
 80022b6:	fbb2 f2f3 	udiv	r2, r2, r3
 80022ba:	4613      	mov	r3, r2
 80022bc:	009b      	lsls	r3, r3, #2
 80022be:	4413      	add	r3, r2
 80022c0:	005b      	lsls	r3, r3, #1
 80022c2:	461a      	mov	r2, r3
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	695b      	ldr	r3, [r3, #20]
 80022c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80022cc:	3305      	adds	r3, #5
 80022ce:	613b      	str	r3, [r7, #16]
 80022d0:	e00e      	b.n	80022f0 <HAL_I2S_Init+0x118>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80022d2:	68fa      	ldr	r2, [r7, #12]
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	fbb2 f2f3 	udiv	r2, r2, r3
 80022da:	4613      	mov	r3, r2
 80022dc:	009b      	lsls	r3, r3, #2
 80022de:	4413      	add	r3, r2
 80022e0:	005b      	lsls	r3, r3, #1
 80022e2:	461a      	mov	r2, r3
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	695b      	ldr	r3, [r3, #20]
 80022e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80022ec:	3305      	adds	r3, #5
 80022ee:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80022f0:	693b      	ldr	r3, [r7, #16]
 80022f2:	4a34      	ldr	r2, [pc, #208]	; (80023c4 <HAL_I2S_Init+0x1ec>)
 80022f4:	fba2 2303 	umull	r2, r3, r2, r3
 80022f8:	08db      	lsrs	r3, r3, #3
 80022fa:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80022fc:	693b      	ldr	r3, [r7, #16]
 80022fe:	f003 0301 	and.w	r3, r3, #1
 8002302:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8002304:	693a      	ldr	r2, [r7, #16]
 8002306:	69bb      	ldr	r3, [r7, #24]
 8002308:	1ad3      	subs	r3, r2, r3
 800230a:	085b      	lsrs	r3, r3, #1
 800230c:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800230e:	69bb      	ldr	r3, [r7, #24]
 8002310:	021b      	lsls	r3, r3, #8
 8002312:	61bb      	str	r3, [r7, #24]
 8002314:	e003      	b.n	800231e <HAL_I2S_Init+0x146>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8002316:	2302      	movs	r3, #2
 8002318:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800231a:	2300      	movs	r3, #0
 800231c:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800231e:	69fb      	ldr	r3, [r7, #28]
 8002320:	2b01      	cmp	r3, #1
 8002322:	d902      	bls.n	800232a <HAL_I2S_Init+0x152>
 8002324:	69fb      	ldr	r3, [r7, #28]
 8002326:	2bff      	cmp	r3, #255	; 0xff
 8002328:	d907      	bls.n	800233a <HAL_I2S_Init+0x162>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800232e:	f043 0210 	orr.w	r2, r3, #16
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8002336:	2301      	movs	r3, #1
 8002338:	e039      	b.n	80023ae <HAL_I2S_Init+0x1d6>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	691a      	ldr	r2, [r3, #16]
 800233e:	69bb      	ldr	r3, [r7, #24]
 8002340:	ea42 0103 	orr.w	r1, r2, r3
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	69fa      	ldr	r2, [r7, #28]
 800234a:	430a      	orrs	r2, r1
 800234c:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	69db      	ldr	r3, [r3, #28]
 8002354:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002358:	f023 030f 	bic.w	r3, r3, #15
 800235c:	687a      	ldr	r2, [r7, #4]
 800235e:	6851      	ldr	r1, [r2, #4]
 8002360:	687a      	ldr	r2, [r7, #4]
 8002362:	6892      	ldr	r2, [r2, #8]
 8002364:	4311      	orrs	r1, r2
 8002366:	687a      	ldr	r2, [r7, #4]
 8002368:	68d2      	ldr	r2, [r2, #12]
 800236a:	4311      	orrs	r1, r2
 800236c:	687a      	ldr	r2, [r7, #4]
 800236e:	6992      	ldr	r2, [r2, #24]
 8002370:	430a      	orrs	r2, r1
 8002372:	431a      	orrs	r2, r3
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800237c:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	689b      	ldr	r3, [r3, #8]
 8002382:	2b30      	cmp	r3, #48	; 0x30
 8002384:	d003      	beq.n	800238e <HAL_I2S_Init+0x1b6>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	689b      	ldr	r3, [r3, #8]
 800238a:	2bb0      	cmp	r3, #176	; 0xb0
 800238c:	d107      	bne.n	800239e <HAL_I2S_Init+0x1c6>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	69da      	ldr	r2, [r3, #28]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800239c:	61da      	str	r2, [r3, #28]
    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2200      	movs	r2, #0
 80023a2:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2201      	movs	r2, #1
 80023a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80023ac:	2300      	movs	r3, #0
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	3720      	adds	r7, #32
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	bf00      	nop
 80023b8:	08002845 	.word	0x08002845
 80023bc:	40003800 	.word	0x40003800
 80023c0:	40003c00 	.word	0x40003c00
 80023c4:	cccccccd 	.word	0xcccccccd

080023c8 <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b086      	sub	sp, #24
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	60f8      	str	r0, [r7, #12]
 80023d0:	60b9      	str	r1, [r7, #8]
 80023d2:	4613      	mov	r3, r2
 80023d4:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 80023d6:	68bb      	ldr	r3, [r7, #8]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d002      	beq.n	80023e2 <HAL_I2S_Receive_DMA+0x1a>
 80023dc:	88fb      	ldrh	r3, [r7, #6]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d101      	bne.n	80023e6 <HAL_I2S_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	e0a1      	b.n	800252a <HAL_I2S_Receive_DMA+0x162>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80023ec:	b2db      	uxtb	r3, r3
 80023ee:	2b01      	cmp	r3, #1
 80023f0:	d101      	bne.n	80023f6 <HAL_I2S_Receive_DMA+0x2e>
 80023f2:	2302      	movs	r3, #2
 80023f4:	e099      	b.n	800252a <HAL_I2S_Receive_DMA+0x162>
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	2201      	movs	r2, #1
 80023fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002404:	b2db      	uxtb	r3, r3
 8002406:	2b01      	cmp	r3, #1
 8002408:	d005      	beq.n	8002416 <HAL_I2S_Receive_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	2200      	movs	r2, #0
 800240e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 8002412:	2302      	movs	r3, #2
 8002414:	e089      	b.n	800252a <HAL_I2S_Receive_DMA+0x162>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	2204      	movs	r2, #4
 800241a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	2200      	movs	r2, #0
 8002422:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pRxBuffPtr = pData;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	68ba      	ldr	r2, [r7, #8]
 8002428:	62da      	str	r2, [r3, #44]	; 0x2c

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	69db      	ldr	r3, [r3, #28]
 8002430:	f003 0307 	and.w	r3, r3, #7
 8002434:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8002436:	697b      	ldr	r3, [r7, #20]
 8002438:	2b03      	cmp	r3, #3
 800243a:	d002      	beq.n	8002442 <HAL_I2S_Receive_DMA+0x7a>
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	2b05      	cmp	r3, #5
 8002440:	d10a      	bne.n	8002458 <HAL_I2S_Receive_DMA+0x90>
  {
    hi2s->RxXferSize = (Size << 1U);
 8002442:	88fb      	ldrh	r3, [r7, #6]
 8002444:	005b      	lsls	r3, r3, #1
 8002446:	b29a      	uxth	r2, r3
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = (Size << 1U);
 800244c:	88fb      	ldrh	r3, [r7, #6]
 800244e:	005b      	lsls	r3, r3, #1
 8002450:	b29a      	uxth	r2, r3
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	865a      	strh	r2, [r3, #50]	; 0x32
 8002456:	e005      	b.n	8002464 <HAL_I2S_Receive_DMA+0x9c>
  }
  else
  {
    hi2s->RxXferSize = Size;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	88fa      	ldrh	r2, [r7, #6]
 800245c:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = Size;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	88fa      	ldrh	r2, [r7, #6]
 8002462:	865a      	strh	r2, [r3, #50]	; 0x32
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002468:	4a32      	ldr	r2, [pc, #200]	; (8002534 <HAL_I2S_Receive_DMA+0x16c>)
 800246a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002470:	4a31      	ldr	r2, [pc, #196]	; (8002538 <HAL_I2S_Receive_DMA+0x170>)
 8002472:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002478:	4a30      	ldr	r2, [pc, #192]	; (800253c <HAL_I2S_Receive_DMA+0x174>)
 800247a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	69db      	ldr	r3, [r3, #28]
 8002482:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002486:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800248a:	d10a      	bne.n	80024a2 <HAL_I2S_Receive_DMA+0xda>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800248c:	2300      	movs	r3, #0
 800248e:	613b      	str	r3, [r7, #16]
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	68db      	ldr	r3, [r3, #12]
 8002496:	613b      	str	r3, [r7, #16]
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	689b      	ldr	r3, [r3, #8]
 800249e:	613b      	str	r3, [r7, #16]
 80024a0:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	330c      	adds	r3, #12
 80024ac:	4619      	mov	r1, r3
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024b2:	461a      	mov	r2, r3
                                 hi2s->RxXferSize))
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80024b8:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 80024ba:	f7ff f95b 	bl	8001774 <HAL_DMA_Start_IT>
 80024be:	4603      	mov	r3, r0
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d00f      	beq.n	80024e4 <HAL_I2S_Receive_DMA+0x11c>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024c8:	f043 0208 	orr.w	r2, r3, #8
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	2201      	movs	r2, #1
 80024d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	2200      	movs	r2, #0
 80024dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 80024e0:	2301      	movs	r3, #1
 80024e2:	e022      	b.n	800252a <HAL_I2S_Receive_DMA+0x162>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	69db      	ldr	r3, [r3, #28]
 80024ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d107      	bne.n	8002502 <HAL_I2S_Receive_DMA+0x13a>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	69da      	ldr	r2, [r3, #28]
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002500:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	f003 0301 	and.w	r3, r3, #1
 800250c:	2b00      	cmp	r3, #0
 800250e:	d107      	bne.n	8002520 <HAL_I2S_Receive_DMA+0x158>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	685a      	ldr	r2, [r3, #4]
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f042 0201 	orr.w	r2, r2, #1
 800251e:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	2200      	movs	r2, #0
 8002524:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 8002528:	2300      	movs	r3, #0
}
 800252a:	4618      	mov	r0, r3
 800252c:	3718      	adds	r7, #24
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}
 8002532:	bf00      	nop
 8002534:	08002723 	.word	0x08002723
 8002538:	080026e1 	.word	0x080026e1
 800253c:	0800273f 	.word	0x0800273f

08002540 <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b086      	sub	sp, #24
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint32_t tickstart;
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002548:	2300      	movs	r3, #0
 800254a:	75fb      	strb	r3, [r7, #23]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002554:	d003      	beq.n	800255e <HAL_I2S_DMAStop+0x1e>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d155      	bne.n	800260a <HAL_I2S_DMAStop+0xca>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002562:	2b00      	cmp	r3, #0
 8002564:	d00f      	beq.n	8002586 <HAL_I2S_DMAStop+0x46>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800256a:	4618      	mov	r0, r3
 800256c:	f7ff f95a 	bl	8001824 <HAL_DMA_Abort>
 8002570:	4603      	mov	r3, r0
 8002572:	2b00      	cmp	r3, #0
 8002574:	d007      	beq.n	8002586 <HAL_I2S_DMAStop+0x46>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800257a:	f043 0208 	orr.w	r2, r3, #8
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	645a      	str	r2, [r3, #68]	; 0x44
        errorcode = HAL_ERROR;
 8002582:	2301      	movs	r3, #1
 8002584:	75fb      	strb	r3, [r7, #23]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8002586:	2364      	movs	r3, #100	; 0x64
 8002588:	2201      	movs	r2, #1
 800258a:	2102      	movs	r1, #2
 800258c:	6878      	ldr	r0, [r7, #4]
 800258e:	f000 f9e3 	bl	8002958 <I2S_WaitFlagStateUntilTimeout>
 8002592:	4603      	mov	r3, r0
 8002594:	2b00      	cmp	r3, #0
 8002596:	d00b      	beq.n	80025b0 <HAL_I2S_DMAStop+0x70>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800259c:	f043 0201 	orr.w	r2, r3, #1
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2201      	movs	r2, #1
 80025a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode   = HAL_ERROR;
 80025ac:	2301      	movs	r3, #1
 80025ae:	75fb      	strb	r3, [r7, #23]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 80025b0:	2364      	movs	r3, #100	; 0x64
 80025b2:	2200      	movs	r2, #0
 80025b4:	2180      	movs	r1, #128	; 0x80
 80025b6:	6878      	ldr	r0, [r7, #4]
 80025b8:	f000 f9ce 	bl	8002958 <I2S_WaitFlagStateUntilTimeout>
 80025bc:	4603      	mov	r3, r0
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d00b      	beq.n	80025da <HAL_I2S_DMAStop+0x9a>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025c6:	f043 0201 	orr.w	r2, r3, #1
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	645a      	str	r2, [r3, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2201      	movs	r2, #1
 80025d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode   = HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	75fb      	strb	r3, [r7, #23]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	69da      	ldr	r2, [r3, #28]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025e8:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80025ea:	2300      	movs	r3, #0
 80025ec:	613b      	str	r3, [r7, #16]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	689b      	ldr	r3, [r3, #8]
 80025f4:	613b      	str	r3, [r7, #16]
 80025f6:	693b      	ldr	r3, [r7, #16]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	685a      	ldr	r2, [r3, #4]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f022 0202 	bic.w	r2, r2, #2
 8002606:	605a      	str	r2, [r3, #4]
 8002608:	e04d      	b.n	80026a6 <HAL_I2S_DMAStop+0x166>
      }
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002612:	d004      	beq.n	800261e <HAL_I2S_DMAStop+0xde>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800261c:	d143      	bne.n	80026a6 <HAL_I2S_DMAStop+0x166>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002622:	2b00      	cmp	r3, #0
 8002624:	d00f      	beq.n	8002646 <HAL_I2S_DMAStop+0x106>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800262a:	4618      	mov	r0, r3
 800262c:	f7ff f8fa 	bl	8001824 <HAL_DMA_Abort>
 8002630:	4603      	mov	r3, r0
 8002632:	2b00      	cmp	r3, #0
 8002634:	d007      	beq.n	8002646 <HAL_I2S_DMAStop+0x106>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800263a:	f043 0208 	orr.w	r2, r3, #8
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	645a      	str	r2, [r3, #68]	; 0x44
        errorcode = HAL_ERROR;
 8002642:	2301      	movs	r3, #1
 8002644:	75fb      	strb	r3, [r7, #23]
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	69da      	ldr	r2, [r3, #28]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002654:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002656:	2300      	movs	r3, #0
 8002658:	60fb      	str	r3, [r7, #12]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	68db      	ldr	r3, [r3, #12]
 8002660:	60fb      	str	r3, [r7, #12]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	689b      	ldr	r3, [r3, #8]
 8002668:	60fb      	str	r3, [r7, #12]
 800266a:	68fb      	ldr	r3, [r7, #12]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	685a      	ldr	r2, [r3, #4]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f022 0201 	bic.w	r2, r2, #1
 800267a:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002684:	d10c      	bne.n	80026a0 <HAL_I2S_DMAStop+0x160>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800268a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	645a      	str	r2, [r3, #68]	; 0x44

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2201      	movs	r2, #1
 8002696:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode = HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	75fb      	strb	r3, [r7, #23]
 800269e:	e002      	b.n	80026a6 <HAL_I2S_DMAStop+0x166>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2201      	movs	r2, #1
 80026aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return errorcode;
 80026ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	3718      	adds	r7, #24
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}

080026b8 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80026b8:	b480      	push	{r7}
 80026ba:	b083      	sub	sp, #12
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80026c0:	bf00      	nop
 80026c2:	370c      	adds	r7, #12
 80026c4:	46bd      	mov	sp, r7
 80026c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ca:	4770      	bx	lr

080026cc <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b083      	sub	sp, #12
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80026d4:	bf00      	nop
 80026d6:	370c      	adds	r7, #12
 80026d8:	46bd      	mov	sp, r7
 80026da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026de:	4770      	bx	lr

080026e0 <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b084      	sub	sp, #16
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026ec:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	69db      	ldr	r3, [r3, #28]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d10e      	bne.n	8002714 <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	685a      	ldr	r2, [r3, #4]
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f022 0201 	bic.w	r2, r2, #1
 8002704:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	2200      	movs	r2, #0
 800270a:	865a      	strh	r2, [r3, #50]	; 0x32
    hi2s->State = HAL_I2S_STATE_READY;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	2201      	movs	r2, #1
 8002710:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 8002714:	68f8      	ldr	r0, [r7, #12]
 8002716:	f7fe fad7 	bl	8000cc8 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800271a:	bf00      	nop
 800271c:	3710      	adds	r7, #16
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}

08002722 <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002722:	b580      	push	{r7, lr}
 8002724:	b084      	sub	sp, #16
 8002726:	af00      	add	r7, sp, #0
 8002728:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800272e:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 8002730:	68f8      	ldr	r0, [r7, #12]
 8002732:	f7fe fad9 	bl	8000ce8 <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002736:	bf00      	nop
 8002738:	3710      	adds	r7, #16
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}

0800273e <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 800273e:	b580      	push	{r7, lr}
 8002740:	b084      	sub	sp, #16
 8002742:	af00      	add	r7, sp, #0
 8002744:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800274a:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	685a      	ldr	r2, [r3, #4]
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f022 0203 	bic.w	r2, r2, #3
 800275a:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	2200      	movs	r2, #0
 8002760:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	2200      	movs	r2, #0
 8002766:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	2201      	movs	r2, #1
 800276c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002774:	f043 0208 	orr.w	r2, r3, #8
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 800277c:	68f8      	ldr	r0, [r7, #12]
 800277e:	f7ff ffa5 	bl	80026cc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002782:	bf00      	nop
 8002784:	3710      	adds	r7, #16
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}

0800278a <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800278a:	b580      	push	{r7, lr}
 800278c:	b082      	sub	sp, #8
 800278e:	af00      	add	r7, sp, #0
 8002790:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002796:	881a      	ldrh	r2, [r3, #0]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a2:	1c9a      	adds	r2, r3, #2
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027ac:	b29b      	uxth	r3, r3
 80027ae:	3b01      	subs	r3, #1
 80027b0:	b29a      	uxth	r2, r3
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027ba:	b29b      	uxth	r3, r3
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d10e      	bne.n	80027de <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	685a      	ldr	r2, [r3, #4]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80027ce:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2201      	movs	r2, #1
 80027d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80027d8:	6878      	ldr	r0, [r7, #4]
 80027da:	f7ff ff6d 	bl	80026b8 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80027de:	bf00      	nop
 80027e0:	3708      	adds	r7, #8
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}

080027e6 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80027e6:	b580      	push	{r7, lr}
 80027e8:	b082      	sub	sp, #8
 80027ea:	af00      	add	r7, sp, #0
 80027ec:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	68da      	ldr	r2, [r3, #12]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027f8:	b292      	uxth	r2, r2
 80027fa:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002800:	1c9a      	adds	r2, r3, #2
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800280a:	b29b      	uxth	r3, r3
 800280c:	3b01      	subs	r3, #1
 800280e:	b29a      	uxth	r2, r3
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002818:	b29b      	uxth	r3, r3
 800281a:	2b00      	cmp	r3, #0
 800281c:	d10e      	bne.n	800283c <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	685a      	ldr	r2, [r3, #4]
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800282c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2201      	movs	r2, #1
 8002832:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8002836:	6878      	ldr	r0, [r7, #4]
 8002838:	f7fe fa46 	bl	8000cc8 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800283c:	bf00      	nop
 800283e:	3708      	adds	r7, #8
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}

08002844 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b086      	sub	sp, #24
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	689b      	ldr	r3, [r3, #8]
 8002852:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800285a:	b2db      	uxtb	r3, r3
 800285c:	2b04      	cmp	r3, #4
 800285e:	d13a      	bne.n	80028d6 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	f003 0301 	and.w	r3, r3, #1
 8002866:	2b01      	cmp	r3, #1
 8002868:	d109      	bne.n	800287e <I2S_IRQHandler+0x3a>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002874:	2b40      	cmp	r3, #64	; 0x40
 8002876:	d102      	bne.n	800287e <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8002878:	6878      	ldr	r0, [r7, #4]
 800287a:	f7ff ffb4 	bl	80027e6 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002884:	2b40      	cmp	r3, #64	; 0x40
 8002886:	d126      	bne.n	80028d6 <I2S_IRQHandler+0x92>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	f003 0320 	and.w	r3, r3, #32
 8002892:	2b20      	cmp	r3, #32
 8002894:	d11f      	bne.n	80028d6 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	685a      	ldr	r2, [r3, #4]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80028a4:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80028a6:	2300      	movs	r3, #0
 80028a8:	613b      	str	r3, [r7, #16]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	68db      	ldr	r3, [r3, #12]
 80028b0:	613b      	str	r3, [r7, #16]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	689b      	ldr	r3, [r3, #8]
 80028b8:	613b      	str	r3, [r7, #16]
 80028ba:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2201      	movs	r2, #1
 80028c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028c8:	f043 0202 	orr.w	r2, r3, #2
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80028d0:	6878      	ldr	r0, [r7, #4]
 80028d2:	f7ff fefb 	bl	80026cc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028dc:	b2db      	uxtb	r3, r3
 80028de:	2b03      	cmp	r3, #3
 80028e0:	d136      	bne.n	8002950 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	f003 0302 	and.w	r3, r3, #2
 80028e8:	2b02      	cmp	r3, #2
 80028ea:	d109      	bne.n	8002900 <I2S_IRQHandler+0xbc>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028f6:	2b80      	cmp	r3, #128	; 0x80
 80028f8:	d102      	bne.n	8002900 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80028fa:	6878      	ldr	r0, [r7, #4]
 80028fc:	f7ff ff45 	bl	800278a <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	f003 0308 	and.w	r3, r3, #8
 8002906:	2b08      	cmp	r3, #8
 8002908:	d122      	bne.n	8002950 <I2S_IRQHandler+0x10c>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	f003 0320 	and.w	r3, r3, #32
 8002914:	2b20      	cmp	r3, #32
 8002916:	d11b      	bne.n	8002950 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	685a      	ldr	r2, [r3, #4]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002926:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002928:	2300      	movs	r3, #0
 800292a:	60fb      	str	r3, [r7, #12]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	60fb      	str	r3, [r7, #12]
 8002934:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2201      	movs	r2, #1
 800293a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002942:	f043 0204 	orr.w	r2, r3, #4
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800294a:	6878      	ldr	r0, [r7, #4]
 800294c:	f7ff febe 	bl	80026cc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002950:	bf00      	nop
 8002952:	3718      	adds	r7, #24
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}

08002958 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b086      	sub	sp, #24
 800295c:	af00      	add	r7, sp, #0
 800295e:	60f8      	str	r0, [r7, #12]
 8002960:	60b9      	str	r1, [r7, #8]
 8002962:	603b      	str	r3, [r7, #0]
 8002964:	4613      	mov	r3, r2
 8002966:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8002968:	f7fe fd14 	bl	8001394 <HAL_GetTick>
 800296c:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 800296e:	e018      	b.n	80029a2 <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002976:	d014      	beq.n	80029a2 <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 8002978:	f7fe fd0c 	bl	8001394 <HAL_GetTick>
 800297c:	4602      	mov	r2, r0
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	1ad3      	subs	r3, r2, r3
 8002982:	683a      	ldr	r2, [r7, #0]
 8002984:	429a      	cmp	r2, r3
 8002986:	d902      	bls.n	800298e <I2S_WaitFlagStateUntilTimeout+0x36>
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d109      	bne.n	80029a2 <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	2201      	movs	r2, #1
 8002992:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	2200      	movs	r2, #0
 800299a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800299e:	2303      	movs	r3, #3
 80029a0:	e00f      	b.n	80029c2 <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	689a      	ldr	r2, [r3, #8]
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	4013      	ands	r3, r2
 80029ac:	68ba      	ldr	r2, [r7, #8]
 80029ae:	429a      	cmp	r2, r3
 80029b0:	bf0c      	ite	eq
 80029b2:	2301      	moveq	r3, #1
 80029b4:	2300      	movne	r3, #0
 80029b6:	b2db      	uxtb	r3, r3
 80029b8:	461a      	mov	r2, r3
 80029ba:	79fb      	ldrb	r3, [r7, #7]
 80029bc:	429a      	cmp	r2, r3
 80029be:	d1d7      	bne.n	8002970 <I2S_WaitFlagStateUntilTimeout+0x18>
      }
    }
  }
  return HAL_OK;
 80029c0:	2300      	movs	r3, #0
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	3718      	adds	r7, #24
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}
	...

080029cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b084      	sub	sp, #16
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
 80029d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d101      	bne.n	80029e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029dc:	2301      	movs	r3, #1
 80029de:	e0cc      	b.n	8002b7a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80029e0:	4b68      	ldr	r3, [pc, #416]	; (8002b84 <HAL_RCC_ClockConfig+0x1b8>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f003 030f 	and.w	r3, r3, #15
 80029e8:	683a      	ldr	r2, [r7, #0]
 80029ea:	429a      	cmp	r2, r3
 80029ec:	d90c      	bls.n	8002a08 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029ee:	4b65      	ldr	r3, [pc, #404]	; (8002b84 <HAL_RCC_ClockConfig+0x1b8>)
 80029f0:	683a      	ldr	r2, [r7, #0]
 80029f2:	b2d2      	uxtb	r2, r2
 80029f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029f6:	4b63      	ldr	r3, [pc, #396]	; (8002b84 <HAL_RCC_ClockConfig+0x1b8>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f003 030f 	and.w	r3, r3, #15
 80029fe:	683a      	ldr	r2, [r7, #0]
 8002a00:	429a      	cmp	r2, r3
 8002a02:	d001      	beq.n	8002a08 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002a04:	2301      	movs	r3, #1
 8002a06:	e0b8      	b.n	8002b7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f003 0302 	and.w	r3, r3, #2
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d020      	beq.n	8002a56 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f003 0304 	and.w	r3, r3, #4
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d005      	beq.n	8002a2c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a20:	4b59      	ldr	r3, [pc, #356]	; (8002b88 <HAL_RCC_ClockConfig+0x1bc>)
 8002a22:	689b      	ldr	r3, [r3, #8]
 8002a24:	4a58      	ldr	r2, [pc, #352]	; (8002b88 <HAL_RCC_ClockConfig+0x1bc>)
 8002a26:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002a2a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f003 0308 	and.w	r3, r3, #8
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d005      	beq.n	8002a44 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a38:	4b53      	ldr	r3, [pc, #332]	; (8002b88 <HAL_RCC_ClockConfig+0x1bc>)
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	4a52      	ldr	r2, [pc, #328]	; (8002b88 <HAL_RCC_ClockConfig+0x1bc>)
 8002a3e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002a42:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a44:	4b50      	ldr	r3, [pc, #320]	; (8002b88 <HAL_RCC_ClockConfig+0x1bc>)
 8002a46:	689b      	ldr	r3, [r3, #8]
 8002a48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	494d      	ldr	r1, [pc, #308]	; (8002b88 <HAL_RCC_ClockConfig+0x1bc>)
 8002a52:	4313      	orrs	r3, r2
 8002a54:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f003 0301 	and.w	r3, r3, #1
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d044      	beq.n	8002aec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	2b01      	cmp	r3, #1
 8002a68:	d107      	bne.n	8002a7a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a6a:	4b47      	ldr	r3, [pc, #284]	; (8002b88 <HAL_RCC_ClockConfig+0x1bc>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d119      	bne.n	8002aaa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a76:	2301      	movs	r3, #1
 8002a78:	e07f      	b.n	8002b7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	2b02      	cmp	r3, #2
 8002a80:	d003      	beq.n	8002a8a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a86:	2b03      	cmp	r3, #3
 8002a88:	d107      	bne.n	8002a9a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a8a:	4b3f      	ldr	r3, [pc, #252]	; (8002b88 <HAL_RCC_ClockConfig+0x1bc>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d109      	bne.n	8002aaa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a96:	2301      	movs	r3, #1
 8002a98:	e06f      	b.n	8002b7a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a9a:	4b3b      	ldr	r3, [pc, #236]	; (8002b88 <HAL_RCC_ClockConfig+0x1bc>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f003 0302 	and.w	r3, r3, #2
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d101      	bne.n	8002aaa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	e067      	b.n	8002b7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002aaa:	4b37      	ldr	r3, [pc, #220]	; (8002b88 <HAL_RCC_ClockConfig+0x1bc>)
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	f023 0203 	bic.w	r2, r3, #3
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	4934      	ldr	r1, [pc, #208]	; (8002b88 <HAL_RCC_ClockConfig+0x1bc>)
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002abc:	f7fe fc6a 	bl	8001394 <HAL_GetTick>
 8002ac0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ac2:	e00a      	b.n	8002ada <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ac4:	f7fe fc66 	bl	8001394 <HAL_GetTick>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	1ad3      	subs	r3, r2, r3
 8002ace:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d901      	bls.n	8002ada <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002ad6:	2303      	movs	r3, #3
 8002ad8:	e04f      	b.n	8002b7a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ada:	4b2b      	ldr	r3, [pc, #172]	; (8002b88 <HAL_RCC_ClockConfig+0x1bc>)
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	f003 020c 	and.w	r2, r3, #12
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	009b      	lsls	r3, r3, #2
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	d1eb      	bne.n	8002ac4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002aec:	4b25      	ldr	r3, [pc, #148]	; (8002b84 <HAL_RCC_ClockConfig+0x1b8>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f003 030f 	and.w	r3, r3, #15
 8002af4:	683a      	ldr	r2, [r7, #0]
 8002af6:	429a      	cmp	r2, r3
 8002af8:	d20c      	bcs.n	8002b14 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002afa:	4b22      	ldr	r3, [pc, #136]	; (8002b84 <HAL_RCC_ClockConfig+0x1b8>)
 8002afc:	683a      	ldr	r2, [r7, #0]
 8002afe:	b2d2      	uxtb	r2, r2
 8002b00:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b02:	4b20      	ldr	r3, [pc, #128]	; (8002b84 <HAL_RCC_ClockConfig+0x1b8>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f003 030f 	and.w	r3, r3, #15
 8002b0a:	683a      	ldr	r2, [r7, #0]
 8002b0c:	429a      	cmp	r2, r3
 8002b0e:	d001      	beq.n	8002b14 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002b10:	2301      	movs	r3, #1
 8002b12:	e032      	b.n	8002b7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f003 0304 	and.w	r3, r3, #4
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d008      	beq.n	8002b32 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b20:	4b19      	ldr	r3, [pc, #100]	; (8002b88 <HAL_RCC_ClockConfig+0x1bc>)
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	68db      	ldr	r3, [r3, #12]
 8002b2c:	4916      	ldr	r1, [pc, #88]	; (8002b88 <HAL_RCC_ClockConfig+0x1bc>)
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f003 0308 	and.w	r3, r3, #8
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d009      	beq.n	8002b52 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b3e:	4b12      	ldr	r3, [pc, #72]	; (8002b88 <HAL_RCC_ClockConfig+0x1bc>)
 8002b40:	689b      	ldr	r3, [r3, #8]
 8002b42:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	691b      	ldr	r3, [r3, #16]
 8002b4a:	00db      	lsls	r3, r3, #3
 8002b4c:	490e      	ldr	r1, [pc, #56]	; (8002b88 <HAL_RCC_ClockConfig+0x1bc>)
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002b52:	f000 fdc7 	bl	80036e4 <HAL_RCC_GetSysClockFreq>
 8002b56:	4602      	mov	r2, r0
 8002b58:	4b0b      	ldr	r3, [pc, #44]	; (8002b88 <HAL_RCC_ClockConfig+0x1bc>)
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	091b      	lsrs	r3, r3, #4
 8002b5e:	f003 030f 	and.w	r3, r3, #15
 8002b62:	490a      	ldr	r1, [pc, #40]	; (8002b8c <HAL_RCC_ClockConfig+0x1c0>)
 8002b64:	5ccb      	ldrb	r3, [r1, r3]
 8002b66:	fa22 f303 	lsr.w	r3, r2, r3
 8002b6a:	4a09      	ldr	r2, [pc, #36]	; (8002b90 <HAL_RCC_ClockConfig+0x1c4>)
 8002b6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002b6e:	4b09      	ldr	r3, [pc, #36]	; (8002b94 <HAL_RCC_ClockConfig+0x1c8>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4618      	mov	r0, r3
 8002b74:	f7fe fbca 	bl	800130c <HAL_InitTick>

  return HAL_OK;
 8002b78:	2300      	movs	r3, #0
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	3710      	adds	r7, #16
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}
 8002b82:	bf00      	nop
 8002b84:	40023c00 	.word	0x40023c00
 8002b88:	40023800 	.word	0x40023800
 8002b8c:	08009710 	.word	0x08009710
 8002b90:	20000000 	.word	0x20000000
 8002b94:	20000004 	.word	0x20000004

08002b98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b9c:	4b03      	ldr	r3, [pc, #12]	; (8002bac <HAL_RCC_GetHCLKFreq+0x14>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba8:	4770      	bx	lr
 8002baa:	bf00      	nop
 8002bac:	20000000 	.word	0x20000000

08002bb0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002bb4:	f7ff fff0 	bl	8002b98 <HAL_RCC_GetHCLKFreq>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	4b05      	ldr	r3, [pc, #20]	; (8002bd0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002bbc:	689b      	ldr	r3, [r3, #8]
 8002bbe:	0a9b      	lsrs	r3, r3, #10
 8002bc0:	f003 0307 	and.w	r3, r3, #7
 8002bc4:	4903      	ldr	r1, [pc, #12]	; (8002bd4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002bc6:	5ccb      	ldrb	r3, [r1, r3]
 8002bc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002bcc:	4618      	mov	r0, r3
 8002bce:	bd80      	pop	{r7, pc}
 8002bd0:	40023800 	.word	0x40023800
 8002bd4:	08009720 	.word	0x08009720

08002bd8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002bdc:	f7ff ffdc 	bl	8002b98 <HAL_RCC_GetHCLKFreq>
 8002be0:	4602      	mov	r2, r0
 8002be2:	4b05      	ldr	r3, [pc, #20]	; (8002bf8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002be4:	689b      	ldr	r3, [r3, #8]
 8002be6:	0b5b      	lsrs	r3, r3, #13
 8002be8:	f003 0307 	and.w	r3, r3, #7
 8002bec:	4903      	ldr	r1, [pc, #12]	; (8002bfc <HAL_RCC_GetPCLK2Freq+0x24>)
 8002bee:	5ccb      	ldrb	r3, [r1, r3]
 8002bf0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	bd80      	pop	{r7, pc}
 8002bf8:	40023800 	.word	0x40023800
 8002bfc:	08009720 	.word	0x08009720

08002c00 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b08c      	sub	sp, #48	; 0x30
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8002c10:	2300      	movs	r3, #0
 8002c12:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8002c14:	2300      	movs	r3, #0
 8002c16:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8002c20:	2300      	movs	r3, #0
 8002c22:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8002c24:	2300      	movs	r3, #0
 8002c26:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f003 0301 	and.w	r3, r3, #1
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d010      	beq.n	8002c5a <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8002c38:	4b6f      	ldr	r3, [pc, #444]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002c3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c3e:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c46:	496c      	ldr	r1, [pc, #432]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d101      	bne.n	8002c5a <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8002c56:	2301      	movs	r3, #1
 8002c58:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f003 0302 	and.w	r3, r3, #2
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d010      	beq.n	8002c88 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8002c66:	4b64      	ldr	r3, [pc, #400]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002c68:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c6c:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c74:	4960      	ldr	r1, [pc, #384]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002c76:	4313      	orrs	r3, r2
 8002c78:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d101      	bne.n	8002c88 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8002c84:	2301      	movs	r3, #1
 8002c86:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f003 0304 	and.w	r3, r3, #4
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d017      	beq.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002c94:	4b58      	ldr	r3, [pc, #352]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002c96:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c9a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ca2:	4955      	ldr	r1, [pc, #340]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002cb2:	d101      	bne.n	8002cb8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d101      	bne.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f003 0308 	and.w	r3, r3, #8
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d017      	beq.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002cd0:	4b49      	ldr	r3, [pc, #292]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002cd2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002cd6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cde:	4946      	ldr	r1, [pc, #280]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002cee:	d101      	bne.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d101      	bne.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f003 0320 	and.w	r3, r3, #32
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	f000 808a 	beq.w	8002e22 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002d0e:	2300      	movs	r3, #0
 8002d10:	60bb      	str	r3, [r7, #8]
 8002d12:	4b39      	ldr	r3, [pc, #228]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d16:	4a38      	ldr	r2, [pc, #224]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002d18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d1c:	6413      	str	r3, [r2, #64]	; 0x40
 8002d1e:	4b36      	ldr	r3, [pc, #216]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d26:	60bb      	str	r3, [r7, #8]
 8002d28:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002d2a:	4b34      	ldr	r3, [pc, #208]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a33      	ldr	r2, [pc, #204]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002d30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d34:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002d36:	f7fe fb2d 	bl	8001394 <HAL_GetTick>
 8002d3a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002d3c:	e008      	b.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002d3e:	f7fe fb29 	bl	8001394 <HAL_GetTick>
 8002d42:	4602      	mov	r2, r0
 8002d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d46:	1ad3      	subs	r3, r2, r3
 8002d48:	2b02      	cmp	r3, #2
 8002d4a:	d901      	bls.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8002d4c:	2303      	movs	r3, #3
 8002d4e:	e278      	b.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002d50:	4b2a      	ldr	r3, [pc, #168]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d0f0      	beq.n	8002d3e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002d5c:	4b26      	ldr	r3, [pc, #152]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002d5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d60:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d64:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002d66:	6a3b      	ldr	r3, [r7, #32]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d02f      	beq.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d70:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d74:	6a3a      	ldr	r2, [r7, #32]
 8002d76:	429a      	cmp	r2, r3
 8002d78:	d028      	beq.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002d7a:	4b1f      	ldr	r3, [pc, #124]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002d7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d82:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002d84:	4b1e      	ldr	r3, [pc, #120]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8002d86:	2201      	movs	r2, #1
 8002d88:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002d8a:	4b1d      	ldr	r3, [pc, #116]	; (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002d90:	4a19      	ldr	r2, [pc, #100]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002d92:	6a3b      	ldr	r3, [r7, #32]
 8002d94:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002d96:	4b18      	ldr	r3, [pc, #96]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002d98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d9a:	f003 0301 	and.w	r3, r3, #1
 8002d9e:	2b01      	cmp	r3, #1
 8002da0:	d114      	bne.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002da2:	f7fe faf7 	bl	8001394 <HAL_GetTick>
 8002da6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002da8:	e00a      	b.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002daa:	f7fe faf3 	bl	8001394 <HAL_GetTick>
 8002dae:	4602      	mov	r2, r0
 8002db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db2:	1ad3      	subs	r3, r2, r3
 8002db4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d901      	bls.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8002dbc:	2303      	movs	r3, #3
 8002dbe:	e240      	b.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dc0:	4b0d      	ldr	r3, [pc, #52]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002dc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dc4:	f003 0302 	and.w	r3, r3, #2
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d0ee      	beq.n	8002daa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002dd4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002dd8:	d114      	bne.n	8002e04 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8002dda:	4b07      	ldr	r3, [pc, #28]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002ddc:	689b      	ldr	r3, [r3, #8]
 8002dde:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002dea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002dee:	4902      	ldr	r1, [pc, #8]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002df0:	4313      	orrs	r3, r2
 8002df2:	608b      	str	r3, [r1, #8]
 8002df4:	e00c      	b.n	8002e10 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8002df6:	bf00      	nop
 8002df8:	40023800 	.word	0x40023800
 8002dfc:	40007000 	.word	0x40007000
 8002e00:	42470e40 	.word	0x42470e40
 8002e04:	4b4a      	ldr	r3, [pc, #296]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	4a49      	ldr	r2, [pc, #292]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002e0a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002e0e:	6093      	str	r3, [r2, #8]
 8002e10:	4b47      	ldr	r3, [pc, #284]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002e12:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e1c:	4944      	ldr	r1, [pc, #272]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 0310 	and.w	r3, r3, #16
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d004      	beq.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8002e34:	4b3f      	ldr	r3, [pc, #252]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8002e36:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d00a      	beq.n	8002e5a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8002e44:	4b3a      	ldr	r3, [pc, #232]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002e46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e4a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e52:	4937      	ldr	r1, [pc, #220]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002e54:	4313      	orrs	r3, r2
 8002e56:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d00a      	beq.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002e66:	4b32      	ldr	r3, [pc, #200]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002e68:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e6c:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e74:	492e      	ldr	r1, [pc, #184]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002e76:	4313      	orrs	r3, r2
 8002e78:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d011      	beq.n	8002eac <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002e88:	4b29      	ldr	r3, [pc, #164]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002e8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e8e:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e96:	4926      	ldr	r1, [pc, #152]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ea2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ea6:	d101      	bne.n	8002eac <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d00a      	beq.n	8002ece <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8002eb8:	4b1d      	ldr	r3, [pc, #116]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002eba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ebe:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ec6:	491a      	ldr	r1, [pc, #104]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d011      	beq.n	8002efe <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8002eda:	4b15      	ldr	r3, [pc, #84]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002edc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ee0:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ee8:	4911      	ldr	r1, [pc, #68]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002eea:	4313      	orrs	r3, r2
 8002eec:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ef4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ef8:	d101      	bne.n	8002efe <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8002efa:	2301      	movs	r3, #1
 8002efc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8002efe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f00:	2b01      	cmp	r3, #1
 8002f02:	d005      	beq.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f0c:	f040 80ff 	bne.w	800310e <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002f10:	4b09      	ldr	r3, [pc, #36]	; (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002f12:	2200      	movs	r2, #0
 8002f14:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002f16:	f7fe fa3d 	bl	8001394 <HAL_GetTick>
 8002f1a:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002f1c:	e00e      	b.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002f1e:	f7fe fa39 	bl	8001394 <HAL_GetTick>
 8002f22:	4602      	mov	r2, r0
 8002f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f26:	1ad3      	subs	r3, r2, r3
 8002f28:	2b02      	cmp	r3, #2
 8002f2a:	d907      	bls.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002f2c:	2303      	movs	r3, #3
 8002f2e:	e188      	b.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8002f30:	40023800 	.word	0x40023800
 8002f34:	424711e0 	.word	0x424711e0
 8002f38:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002f3c:	4b7e      	ldr	r3, [pc, #504]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d1ea      	bne.n	8002f1e <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f003 0301 	and.w	r3, r3, #1
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d003      	beq.n	8002f5c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d009      	beq.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d028      	beq.n	8002fba <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d124      	bne.n	8002fba <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002f70:	4b71      	ldr	r3, [pc, #452]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002f72:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f76:	0c1b      	lsrs	r3, r3, #16
 8002f78:	f003 0303 	and.w	r3, r3, #3
 8002f7c:	3301      	adds	r3, #1
 8002f7e:	005b      	lsls	r3, r3, #1
 8002f80:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002f82:	4b6d      	ldr	r3, [pc, #436]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002f84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f88:	0e1b      	lsrs	r3, r3, #24
 8002f8a:	f003 030f 	and.w	r3, r3, #15
 8002f8e:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	685a      	ldr	r2, [r3, #4]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	019b      	lsls	r3, r3, #6
 8002f9a:	431a      	orrs	r2, r3
 8002f9c:	69fb      	ldr	r3, [r7, #28]
 8002f9e:	085b      	lsrs	r3, r3, #1
 8002fa0:	3b01      	subs	r3, #1
 8002fa2:	041b      	lsls	r3, r3, #16
 8002fa4:	431a      	orrs	r2, r3
 8002fa6:	69bb      	ldr	r3, [r7, #24]
 8002fa8:	061b      	lsls	r3, r3, #24
 8002faa:	431a      	orrs	r2, r3
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	695b      	ldr	r3, [r3, #20]
 8002fb0:	071b      	lsls	r3, r3, #28
 8002fb2:	4961      	ldr	r1, [pc, #388]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f003 0304 	and.w	r3, r3, #4
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d004      	beq.n	8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002fce:	d00a      	beq.n	8002fe6 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d035      	beq.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fe0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002fe4:	d130      	bne.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002fe6:	4b54      	ldr	r3, [pc, #336]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002fe8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002fec:	0c1b      	lsrs	r3, r3, #16
 8002fee:	f003 0303 	and.w	r3, r3, #3
 8002ff2:	3301      	adds	r3, #1
 8002ff4:	005b      	lsls	r3, r3, #1
 8002ff6:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002ff8:	4b4f      	ldr	r3, [pc, #316]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002ffa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ffe:	0f1b      	lsrs	r3, r3, #28
 8003000:	f003 0307 	and.w	r3, r3, #7
 8003004:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	685a      	ldr	r2, [r3, #4]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	689b      	ldr	r3, [r3, #8]
 800300e:	019b      	lsls	r3, r3, #6
 8003010:	431a      	orrs	r2, r3
 8003012:	69fb      	ldr	r3, [r7, #28]
 8003014:	085b      	lsrs	r3, r3, #1
 8003016:	3b01      	subs	r3, #1
 8003018:	041b      	lsls	r3, r3, #16
 800301a:	431a      	orrs	r2, r3
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	691b      	ldr	r3, [r3, #16]
 8003020:	061b      	lsls	r3, r3, #24
 8003022:	431a      	orrs	r2, r3
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	071b      	lsls	r3, r3, #28
 8003028:	4943      	ldr	r1, [pc, #268]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800302a:	4313      	orrs	r3, r2
 800302c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003030:	4b41      	ldr	r3, [pc, #260]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003032:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003036:	f023 021f 	bic.w	r2, r3, #31
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800303e:	3b01      	subs	r3, #1
 8003040:	493d      	ldr	r1, [pc, #244]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003042:	4313      	orrs	r3, r2
 8003044:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003050:	2b00      	cmp	r3, #0
 8003052:	d029      	beq.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003058:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800305c:	d124      	bne.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800305e:	4b36      	ldr	r3, [pc, #216]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003060:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003064:	0c1b      	lsrs	r3, r3, #16
 8003066:	f003 0303 	and.w	r3, r3, #3
 800306a:	3301      	adds	r3, #1
 800306c:	005b      	lsls	r3, r3, #1
 800306e:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003070:	4b31      	ldr	r3, [pc, #196]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003072:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003076:	0f1b      	lsrs	r3, r3, #28
 8003078:	f003 0307 	and.w	r3, r3, #7
 800307c:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	685a      	ldr	r2, [r3, #4]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	689b      	ldr	r3, [r3, #8]
 8003086:	019b      	lsls	r3, r3, #6
 8003088:	431a      	orrs	r2, r3
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	68db      	ldr	r3, [r3, #12]
 800308e:	085b      	lsrs	r3, r3, #1
 8003090:	3b01      	subs	r3, #1
 8003092:	041b      	lsls	r3, r3, #16
 8003094:	431a      	orrs	r2, r3
 8003096:	69bb      	ldr	r3, [r7, #24]
 8003098:	061b      	lsls	r3, r3, #24
 800309a:	431a      	orrs	r2, r3
 800309c:	697b      	ldr	r3, [r7, #20]
 800309e:	071b      	lsls	r3, r3, #28
 80030a0:	4925      	ldr	r1, [pc, #148]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80030a2:	4313      	orrs	r3, r2
 80030a4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d016      	beq.n	80030e2 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	685a      	ldr	r2, [r3, #4]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	689b      	ldr	r3, [r3, #8]
 80030bc:	019b      	lsls	r3, r3, #6
 80030be:	431a      	orrs	r2, r3
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	68db      	ldr	r3, [r3, #12]
 80030c4:	085b      	lsrs	r3, r3, #1
 80030c6:	3b01      	subs	r3, #1
 80030c8:	041b      	lsls	r3, r3, #16
 80030ca:	431a      	orrs	r2, r3
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	691b      	ldr	r3, [r3, #16]
 80030d0:	061b      	lsls	r3, r3, #24
 80030d2:	431a      	orrs	r2, r3
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	695b      	ldr	r3, [r3, #20]
 80030d8:	071b      	lsls	r3, r3, #28
 80030da:	4917      	ldr	r1, [pc, #92]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80030dc:	4313      	orrs	r3, r2
 80030de:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80030e2:	4b16      	ldr	r3, [pc, #88]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 80030e4:	2201      	movs	r2, #1
 80030e6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80030e8:	f7fe f954 	bl	8001394 <HAL_GetTick>
 80030ec:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80030ee:	e008      	b.n	8003102 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80030f0:	f7fe f950 	bl	8001394 <HAL_GetTick>
 80030f4:	4602      	mov	r2, r0
 80030f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f8:	1ad3      	subs	r3, r2, r3
 80030fa:	2b02      	cmp	r3, #2
 80030fc:	d901      	bls.n	8003102 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80030fe:	2303      	movs	r3, #3
 8003100:	e09f      	b.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003102:	4b0d      	ldr	r3, [pc, #52]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800310a:	2b00      	cmp	r3, #0
 800310c:	d0f0      	beq.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 800310e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003110:	2b01      	cmp	r3, #1
 8003112:	f040 8095 	bne.w	8003240 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003116:	4b0a      	ldr	r3, [pc, #40]	; (8003140 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003118:	2200      	movs	r2, #0
 800311a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800311c:	f7fe f93a 	bl	8001394 <HAL_GetTick>
 8003120:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003122:	e00f      	b.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003124:	f7fe f936 	bl	8001394 <HAL_GetTick>
 8003128:	4602      	mov	r2, r0
 800312a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800312c:	1ad3      	subs	r3, r2, r3
 800312e:	2b02      	cmp	r3, #2
 8003130:	d908      	bls.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003132:	2303      	movs	r3, #3
 8003134:	e085      	b.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8003136:	bf00      	nop
 8003138:	40023800 	.word	0x40023800
 800313c:	42470068 	.word	0x42470068
 8003140:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003144:	4b41      	ldr	r3, [pc, #260]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800314c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003150:	d0e8      	beq.n	8003124 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f003 0304 	and.w	r3, r3, #4
 800315a:	2b00      	cmp	r3, #0
 800315c:	d003      	beq.n	8003166 <HAL_RCCEx_PeriphCLKConfig+0x566>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003162:	2b00      	cmp	r3, #0
 8003164:	d009      	beq.n	800317a <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800316e:	2b00      	cmp	r3, #0
 8003170:	d02b      	beq.n	80031ca <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003176:	2b00      	cmp	r3, #0
 8003178:	d127      	bne.n	80031ca <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800317a:	4b34      	ldr	r3, [pc, #208]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800317c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003180:	0c1b      	lsrs	r3, r3, #16
 8003182:	f003 0303 	and.w	r3, r3, #3
 8003186:	3301      	adds	r3, #1
 8003188:	005b      	lsls	r3, r3, #1
 800318a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	699a      	ldr	r2, [r3, #24]
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	69db      	ldr	r3, [r3, #28]
 8003194:	019b      	lsls	r3, r3, #6
 8003196:	431a      	orrs	r2, r3
 8003198:	693b      	ldr	r3, [r7, #16]
 800319a:	085b      	lsrs	r3, r3, #1
 800319c:	3b01      	subs	r3, #1
 800319e:	041b      	lsls	r3, r3, #16
 80031a0:	431a      	orrs	r2, r3
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a6:	061b      	lsls	r3, r3, #24
 80031a8:	4928      	ldr	r1, [pc, #160]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80031aa:	4313      	orrs	r3, r2
 80031ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80031b0:	4b26      	ldr	r3, [pc, #152]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80031b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80031b6:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031be:	3b01      	subs	r3, #1
 80031c0:	021b      	lsls	r3, r3, #8
 80031c2:	4922      	ldr	r1, [pc, #136]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80031c4:	4313      	orrs	r3, r2
 80031c6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d01d      	beq.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0x612>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031da:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80031de:	d118      	bne.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80031e0:	4b1a      	ldr	r3, [pc, #104]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80031e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031e6:	0e1b      	lsrs	r3, r3, #24
 80031e8:	f003 030f 	and.w	r3, r3, #15
 80031ec:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	699a      	ldr	r2, [r3, #24]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	69db      	ldr	r3, [r3, #28]
 80031f6:	019b      	lsls	r3, r3, #6
 80031f8:	431a      	orrs	r2, r3
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6a1b      	ldr	r3, [r3, #32]
 80031fe:	085b      	lsrs	r3, r3, #1
 8003200:	3b01      	subs	r3, #1
 8003202:	041b      	lsls	r3, r3, #16
 8003204:	431a      	orrs	r2, r3
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	061b      	lsls	r3, r3, #24
 800320a:	4910      	ldr	r1, [pc, #64]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800320c:	4313      	orrs	r3, r2
 800320e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003212:	4b0f      	ldr	r3, [pc, #60]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8003214:	2201      	movs	r2, #1
 8003216:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003218:	f7fe f8bc 	bl	8001394 <HAL_GetTick>
 800321c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800321e:	e008      	b.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003220:	f7fe f8b8 	bl	8001394 <HAL_GetTick>
 8003224:	4602      	mov	r2, r0
 8003226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003228:	1ad3      	subs	r3, r2, r3
 800322a:	2b02      	cmp	r3, #2
 800322c:	d901      	bls.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800322e:	2303      	movs	r3, #3
 8003230:	e007      	b.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003232:	4b06      	ldr	r3, [pc, #24]	; (800324c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800323a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800323e:	d1ef      	bne.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8003240:	2300      	movs	r3, #0
}
 8003242:	4618      	mov	r0, r3
 8003244:	3730      	adds	r7, #48	; 0x30
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}
 800324a:	bf00      	nop
 800324c:	40023800 	.word	0x40023800
 8003250:	42470070 	.word	0x42470070

08003254 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_I2S_APB1: I2S APB1 peripheral clock
  *            @arg RCC_PERIPHCLK_I2S_APB2: I2S APB2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003254:	b480      	push	{r7}
 8003256:	b089      	sub	sp, #36	; 0x24
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U;
 800325c:	2300      	movs	r3, #0
 800325e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8003260:	2300      	movs	r3, #0
 8003262:	61fb      	str	r3, [r7, #28]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8003264:	2300      	movs	r3, #0
 8003266:	61bb      	str	r3, [r7, #24]
  /* This variable used to store the SAI clock source */
  uint32_t saiclocksource = 0U;
 8003268:	2300      	movs	r3, #0
 800326a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 800326c:	2300      	movs	r3, #0
 800326e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8003270:	2300      	movs	r3, #0
 8003272:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	3b01      	subs	r3, #1
 8003278:	2b07      	cmp	r3, #7
 800327a:	f200 8224 	bhi.w	80036c6 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800327e:	a201      	add	r2, pc, #4	; (adr r2, 8003284 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8003280:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003284:	08003487 	.word	0x08003487
 8003288:	080035b1 	.word	0x080035b1
 800328c:	080036c7 	.word	0x080036c7
 8003290:	080032a5 	.word	0x080032a5
 8003294:	080036c7 	.word	0x080036c7
 8003298:	080036c7 	.word	0x080036c7
 800329c:	080036c7 	.word	0x080036c7
 80032a0:	080032a5 	.word	0x080032a5
  {
  case RCC_PERIPHCLK_SAI1:
  case RCC_PERIPHCLK_SAI2:
    {
      saiclocksource = RCC->DCKCFGR;
 80032a4:	4ba8      	ldr	r3, [pc, #672]	; (8003548 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80032a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80032aa:	613b      	str	r3, [r7, #16]
      saiclocksource &= (RCC_DCKCFGR_SAI1SRC | RCC_DCKCFGR_SAI2SRC);
 80032ac:	693b      	ldr	r3, [r7, #16]
 80032ae:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
 80032b2:	613b      	str	r3, [r7, #16]
 80032b4:	693b      	ldr	r3, [r7, #16]
 80032b6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80032ba:	f000 80d6 	beq.w	800346a <HAL_RCCEx_GetPeriphCLKFreq+0x216>
 80032be:	693b      	ldr	r3, [r7, #16]
 80032c0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80032c4:	f200 80dd 	bhi.w	8003482 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80032ce:	f000 809f 	beq.w	8003410 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 80032d2:	693b      	ldr	r3, [r7, #16]
 80032d4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80032d8:	f200 80d3 	bhi.w	8003482 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80032e2:	d05b      	beq.n	800339c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
 80032e4:	693b      	ldr	r3, [r7, #16]
 80032e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80032ea:	f200 80ca 	bhi.w	8003482 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80032f4:	f000 80b6 	beq.w	8003464 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80032fe:	f200 80c0 	bhi.w	8003482 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003308:	f000 8082 	beq.w	8003410 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 800330c:	693b      	ldr	r3, [r7, #16]
 800330e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003312:	f200 80b6 	bhi.w	8003482 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d004      	beq.n	8003326 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
 800331c:	693b      	ldr	r3, [r7, #16]
 800331e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003322:	d03b      	beq.n	800339c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
          }
          break;
        }
      default :
        {
          break;
 8003324:	e0ad      	b.n	8003482 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8003326:	4b88      	ldr	r3, [pc, #544]	; (8003548 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800332e:	2b00      	cmp	r3, #0
 8003330:	d109      	bne.n	8003346 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIM));
 8003332:	4b85      	ldr	r3, [pc, #532]	; (8003548 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003334:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003338:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800333c:	4a83      	ldr	r2, [pc, #524]	; (800354c <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800333e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003342:	61bb      	str	r3, [r7, #24]
 8003344:	e008      	b.n	8003358 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIM)));
 8003346:	4b80      	ldr	r3, [pc, #512]	; (8003548 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003348:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800334c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003350:	4a7f      	ldr	r2, [pc, #508]	; (8003550 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8003352:	fbb2 f3f3 	udiv	r3, r2, r3
 8003356:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24U;
 8003358:	4b7b      	ldr	r3, [pc, #492]	; (8003548 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800335a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800335e:	0e1b      	lsrs	r3, r3, #24
 8003360:	f003 030f 	and.w	r3, r3, #15
 8003364:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6U))/(tmpreg1);
 8003366:	4b78      	ldr	r3, [pc, #480]	; (8003548 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003368:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800336c:	099b      	lsrs	r3, r3, #6
 800336e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003372:	69ba      	ldr	r2, [r7, #24]
 8003374:	fb03 f202 	mul.w	r2, r3, r2
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	fbb2 f3f3 	udiv	r3, r2, r3
 800337e:	61fb      	str	r3, [r7, #28]
          tmpreg1 = (((RCC->DCKCFGR & RCC_DCKCFGR_PLLSAIDIVQ) >> 8U) + 1U);
 8003380:	4b71      	ldr	r3, [pc, #452]	; (8003548 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003382:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003386:	0a1b      	lsrs	r3, r3, #8
 8003388:	f003 031f 	and.w	r3, r3, #31
 800338c:	3301      	adds	r3, #1
 800338e:	617b      	str	r3, [r7, #20]
          frequency = frequency/(tmpreg1);
 8003390:	69fa      	ldr	r2, [r7, #28]
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	fbb2 f3f3 	udiv	r3, r2, r3
 8003398:	61fb      	str	r3, [r7, #28]
          break;
 800339a:	e073      	b.n	8003484 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800339c:	4b6a      	ldr	r3, [pc, #424]	; (8003548 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d109      	bne.n	80033bc <HAL_RCCEx_GetPeriphCLKFreq+0x168>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80033a8:	4b67      	ldr	r3, [pc, #412]	; (8003548 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80033aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033ae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80033b2:	4a66      	ldr	r2, [pc, #408]	; (800354c <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80033b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80033b8:	61bb      	str	r3, [r7, #24]
 80033ba:	e008      	b.n	80033ce <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM)));
 80033bc:	4b62      	ldr	r3, [pc, #392]	; (8003548 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80033be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033c2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80033c6:	4a62      	ldr	r2, [pc, #392]	; (8003550 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 80033c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80033cc:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24U;
 80033ce:	4b5e      	ldr	r3, [pc, #376]	; (8003548 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80033d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033d4:	0e1b      	lsrs	r3, r3, #24
 80033d6:	f003 030f 	and.w	r3, r3, #15
 80033da:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U))/(tmpreg1);
 80033dc:	4b5a      	ldr	r3, [pc, #360]	; (8003548 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80033de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033e2:	099b      	lsrs	r3, r3, #6
 80033e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033e8:	69ba      	ldr	r2, [r7, #24]
 80033ea:	fb03 f202 	mul.w	r2, r3, r2
 80033ee:	697b      	ldr	r3, [r7, #20]
 80033f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80033f4:	61fb      	str	r3, [r7, #28]
          tmpreg1 = ((RCC->DCKCFGR & RCC_DCKCFGR_PLLI2SDIVQ) + 1U);
 80033f6:	4b54      	ldr	r3, [pc, #336]	; (8003548 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80033f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80033fc:	f003 031f 	and.w	r3, r3, #31
 8003400:	3301      	adds	r3, #1
 8003402:	617b      	str	r3, [r7, #20]
          frequency = frequency/(tmpreg1);
 8003404:	69fa      	ldr	r2, [r7, #28]
 8003406:	697b      	ldr	r3, [r7, #20]
 8003408:	fbb2 f3f3 	udiv	r3, r2, r3
 800340c:	61fb      	str	r3, [r7, #28]
          break;
 800340e:	e039      	b.n	8003484 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8003410:	4b4d      	ldr	r3, [pc, #308]	; (8003548 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003418:	2b00      	cmp	r3, #0
 800341a:	d108      	bne.n	800342e <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800341c:	4b4a      	ldr	r3, [pc, #296]	; (8003548 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003424:	4a49      	ldr	r2, [pc, #292]	; (800354c <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003426:	fbb2 f3f3 	udiv	r3, r2, r3
 800342a:	61bb      	str	r3, [r7, #24]
 800342c:	e007      	b.n	800343e <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800342e:	4b46      	ldr	r3, [pc, #280]	; (8003548 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003436:	4a46      	ldr	r2, [pc, #280]	; (8003550 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8003438:	fbb2 f3f3 	udiv	r3, r2, r3
 800343c:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U;
 800343e:	4b42      	ldr	r3, [pc, #264]	; (8003548 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	0f1b      	lsrs	r3, r3, #28
 8003444:	f003 0307 	and.w	r3, r3, #7
 8003448:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U))/(tmpreg1);
 800344a:	4b3f      	ldr	r3, [pc, #252]	; (8003548 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	099b      	lsrs	r3, r3, #6
 8003450:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003454:	69ba      	ldr	r2, [r7, #24]
 8003456:	fb03 f202 	mul.w	r2, r3, r2
 800345a:	697b      	ldr	r3, [r7, #20]
 800345c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003460:	61fb      	str	r3, [r7, #28]
          break;
 8003462:	e00f      	b.n	8003484 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          frequency = EXTERNAL_CLOCK_VALUE;
 8003464:	4b3b      	ldr	r3, [pc, #236]	; (8003554 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 8003466:	61fb      	str	r3, [r7, #28]
          break;
 8003468:	e00c      	b.n	8003484 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800346a:	4b37      	ldr	r3, [pc, #220]	; (8003548 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003472:	2b00      	cmp	r3, #0
 8003474:	d102      	bne.n	800347c <HAL_RCCEx_GetPeriphCLKFreq+0x228>
            frequency = (uint32_t)(HSI_VALUE);
 8003476:	4b35      	ldr	r3, [pc, #212]	; (800354c <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8003478:	61fb      	str	r3, [r7, #28]
          break;
 800347a:	e003      	b.n	8003484 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
            frequency = (uint32_t)(HSE_VALUE);
 800347c:	4b34      	ldr	r3, [pc, #208]	; (8003550 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 800347e:	61fb      	str	r3, [r7, #28]
          break;
 8003480:	e000      	b.n	8003484 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          break;
 8003482:	bf00      	nop
        }
      }
      break;
 8003484:	e11f      	b.n	80036c6 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
    }
  case RCC_PERIPHCLK_I2S_APB1:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB1_SOURCE();
 8003486:	4b30      	ldr	r3, [pc, #192]	; (8003548 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003488:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800348c:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8003490:	60fb      	str	r3, [r7, #12]
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8003498:	d079      	beq.n	800358e <HAL_RCCEx_GetPeriphCLKFreq+0x33a>
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 80034a0:	f200 8082 	bhi.w	80035a8 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80034aa:	d03c      	beq.n	8003526 <HAL_RCCEx_GetPeriphCLKFreq+0x2d2>
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80034b2:	d879      	bhi.n	80035a8 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d006      	beq.n	80034c8 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80034c0:	d172      	bne.n	80035a8 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80034c2:	4b24      	ldr	r3, [pc, #144]	; (8003554 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 80034c4:	61fb      	str	r3, [r7, #28]
          break;
 80034c6:	e072      	b.n	80035ae <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
      /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLI2S:
        {
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80034c8:	4b1f      	ldr	r3, [pc, #124]	; (8003548 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80034d4:	d109      	bne.n	80034ea <HAL_RCCEx_GetPeriphCLKFreq+0x296>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80034d6:	4b1c      	ldr	r3, [pc, #112]	; (8003548 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80034d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80034dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80034e0:	4a1b      	ldr	r2, [pc, #108]	; (8003550 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 80034e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80034e6:	61bb      	str	r3, [r7, #24]
 80034e8:	e008      	b.n	80034fc <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80034ea:	4b17      	ldr	r3, [pc, #92]	; (8003548 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80034ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80034f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80034f4:	4a15      	ldr	r2, [pc, #84]	; (800354c <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80034f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80034fa:	61bb      	str	r3, [r7, #24]
          }

          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80034fc:	4b12      	ldr	r3, [pc, #72]	; (8003548 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80034fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003502:	099b      	lsrs	r3, r3, #6
 8003504:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003508:	69bb      	ldr	r3, [r7, #24]
 800350a:	fb02 f303 	mul.w	r3, r2, r3
 800350e:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8003510:	4b0d      	ldr	r3, [pc, #52]	; (8003548 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003512:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003516:	0f1b      	lsrs	r3, r3, #28
 8003518:	f003 0307 	and.w	r3, r3, #7
 800351c:	68ba      	ldr	r2, [r7, #8]
 800351e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003522:	61fb      	str	r3, [r7, #28]
          break;
 8003524:	e043      	b.n	80035ae <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
      /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003526:	4b08      	ldr	r3, [pc, #32]	; (8003548 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800352e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003532:	d111      	bne.n	8003558 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003534:	4b04      	ldr	r3, [pc, #16]	; (8003548 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800353c:	4a04      	ldr	r2, [pc, #16]	; (8003550 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 800353e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003542:	61bb      	str	r3, [r7, #24]
 8003544:	e010      	b.n	8003568 <HAL_RCCEx_GetPeriphCLKFreq+0x314>
 8003546:	bf00      	nop
 8003548:	40023800 	.word	0x40023800
 800354c:	00f42400 	.word	0x00f42400
 8003550:	007a1200 	.word	0x007a1200
 8003554:	00bb8000 	.word	0x00bb8000
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003558:	4b5e      	ldr	r3, [pc, #376]	; (80036d4 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003560:	4a5d      	ldr	r2, [pc, #372]	; (80036d8 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8003562:	fbb2 f3f3 	udiv	r3, r2, r3
 8003566:	61bb      	str	r3, [r7, #24]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 8003568:	4b5a      	ldr	r3, [pc, #360]	; (80036d4 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	099b      	lsrs	r3, r3, #6
 800356e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003572:	69bb      	ldr	r3, [r7, #24]
 8003574:	fb02 f303 	mul.w	r3, r2, r3
 8003578:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 800357a:	4b56      	ldr	r3, [pc, #344]	; (80036d4 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	0f1b      	lsrs	r3, r3, #28
 8003580:	f003 0307 	and.w	r3, r3, #7
 8003584:	68ba      	ldr	r2, [r7, #8]
 8003586:	fbb2 f3f3 	udiv	r3, r2, r3
 800358a:	61fb      	str	r3, [r7, #28]
          break;
 800358c:	e00f      	b.n	80035ae <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
        }
      /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB1CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800358e:	4b51      	ldr	r3, [pc, #324]	; (80036d4 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003596:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800359a:	d102      	bne.n	80035a2 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            frequency = HSE_VALUE;
 800359c:	4b4f      	ldr	r3, [pc, #316]	; (80036dc <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 800359e:	61fb      	str	r3, [r7, #28]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 80035a0:	e005      	b.n	80035ae <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
            frequency = HSI_VALUE;
 80035a2:	4b4d      	ldr	r3, [pc, #308]	; (80036d8 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 80035a4:	61fb      	str	r3, [r7, #28]
          break;
 80035a6:	e002      	b.n	80035ae <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80035a8:	2300      	movs	r3, #0
 80035aa:	61fb      	str	r3, [r7, #28]
          break;
 80035ac:	bf00      	nop
        }
      }
      break;
 80035ae:	e08a      	b.n	80036c6 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
    }
  case RCC_PERIPHCLK_I2S_APB2:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB2_SOURCE();
 80035b0:	4b48      	ldr	r3, [pc, #288]	; (80036d4 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 80035b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80035b6:	f003 53c0 	and.w	r3, r3, #402653184	; 0x18000000
 80035ba:	60fb      	str	r3, [r7, #12]
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80035c2:	d06f      	beq.n	80036a4 <HAL_RCCEx_GetPeriphCLKFreq+0x450>
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80035ca:	d878      	bhi.n	80036be <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80035d2:	d03c      	beq.n	800364e <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80035da:	d870      	bhi.n	80036be <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d006      	beq.n	80035f0 <HAL_RCCEx_GetPeriphCLKFreq+0x39c>
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80035e8:	d169      	bne.n	80036be <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80035ea:	4b3d      	ldr	r3, [pc, #244]	; (80036e0 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>)
 80035ec:	61fb      	str	r3, [r7, #28]
          break;
 80035ee:	e069      	b.n	80036c4 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLI2S:
        {
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80035f0:	4b38      	ldr	r3, [pc, #224]	; (80036d4 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035fc:	d109      	bne.n	8003612 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80035fe:	4b35      	ldr	r3, [pc, #212]	; (80036d4 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003600:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003604:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003608:	4a34      	ldr	r2, [pc, #208]	; (80036dc <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 800360a:	fbb2 f3f3 	udiv	r3, r2, r3
 800360e:	61bb      	str	r3, [r7, #24]
 8003610:	e008      	b.n	8003624 <HAL_RCCEx_GetPeriphCLKFreq+0x3d0>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8003612:	4b30      	ldr	r3, [pc, #192]	; (80036d4 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003614:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003618:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800361c:	4a2e      	ldr	r2, [pc, #184]	; (80036d8 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 800361e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003622:	61bb      	str	r3, [r7, #24]
          }

          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8003624:	4b2b      	ldr	r3, [pc, #172]	; (80036d4 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003626:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800362a:	099b      	lsrs	r3, r3, #6
 800362c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003630:	69bb      	ldr	r3, [r7, #24]
 8003632:	fb02 f303 	mul.w	r3, r2, r3
 8003636:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8003638:	4b26      	ldr	r3, [pc, #152]	; (80036d4 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 800363a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800363e:	0f1b      	lsrs	r3, r3, #28
 8003640:	f003 0307 	and.w	r3, r3, #7
 8003644:	68ba      	ldr	r2, [r7, #8]
 8003646:	fbb2 f3f3 	udiv	r3, r2, r3
 800364a:	61fb      	str	r3, [r7, #28]
          break;
 800364c:	e03a      	b.n	80036c4 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800364e:	4b21      	ldr	r3, [pc, #132]	; (80036d4 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003656:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800365a:	d108      	bne.n	800366e <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800365c:	4b1d      	ldr	r3, [pc, #116]	; (80036d4 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003664:	4a1d      	ldr	r2, [pc, #116]	; (80036dc <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 8003666:	fbb2 f3f3 	udiv	r3, r2, r3
 800366a:	61bb      	str	r3, [r7, #24]
 800366c:	e007      	b.n	800367e <HAL_RCCEx_GetPeriphCLKFreq+0x42a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800366e:	4b19      	ldr	r3, [pc, #100]	; (80036d4 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003676:	4a18      	ldr	r2, [pc, #96]	; (80036d8 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8003678:	fbb2 f3f3 	udiv	r3, r2, r3
 800367c:	61bb      	str	r3, [r7, #24]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 800367e:	4b15      	ldr	r3, [pc, #84]	; (80036d4 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	099b      	lsrs	r3, r3, #6
 8003684:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003688:	69bb      	ldr	r3, [r7, #24]
 800368a:	fb02 f303 	mul.w	r3, r2, r3
 800368e:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 8003690:	4b10      	ldr	r3, [pc, #64]	; (80036d4 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	0f1b      	lsrs	r3, r3, #28
 8003696:	f003 0307 	and.w	r3, r3, #7
 800369a:	68ba      	ldr	r2, [r7, #8]
 800369c:	fbb2 f3f3 	udiv	r3, r2, r3
 80036a0:	61fb      	str	r3, [r7, #28]
          break;
 80036a2:	e00f      	b.n	80036c4 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        }
        /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB2CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80036a4:	4b0b      	ldr	r3, [pc, #44]	; (80036d4 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036b0:	d102      	bne.n	80036b8 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
          {
            frequency = HSE_VALUE;
 80036b2:	4b0a      	ldr	r3, [pc, #40]	; (80036dc <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 80036b4:	61fb      	str	r3, [r7, #28]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 80036b6:	e005      	b.n	80036c4 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
            frequency = HSI_VALUE;
 80036b8:	4b07      	ldr	r3, [pc, #28]	; (80036d8 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 80036ba:	61fb      	str	r3, [r7, #28]
          break;
 80036bc:	e002      	b.n	80036c4 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80036be:	2300      	movs	r3, #0
 80036c0:	61fb      	str	r3, [r7, #28]
          break;
 80036c2:	bf00      	nop
        }
      }
      break;
 80036c4:	bf00      	nop
    }
  }
  return frequency;
 80036c6:	69fb      	ldr	r3, [r7, #28]
}
 80036c8:	4618      	mov	r0, r3
 80036ca:	3724      	adds	r7, #36	; 0x24
 80036cc:	46bd      	mov	sp, r7
 80036ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d2:	4770      	bx	lr
 80036d4:	40023800 	.word	0x40023800
 80036d8:	00f42400 	.word	0x00f42400
 80036dc:	007a1200 	.word	0x007a1200
 80036e0:	00bb8000 	.word	0x00bb8000

080036e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80036e8:	b0ae      	sub	sp, #184	; 0xb8
 80036ea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80036ec:	2300      	movs	r3, #0
 80036ee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80036f2:	2300      	movs	r3, #0
 80036f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80036f8:	2300      	movs	r3, #0
 80036fa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80036fe:	2300      	movs	r3, #0
 8003700:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8003704:	2300      	movs	r3, #0
 8003706:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800370a:	4bcb      	ldr	r3, [pc, #812]	; (8003a38 <HAL_RCC_GetSysClockFreq+0x354>)
 800370c:	689b      	ldr	r3, [r3, #8]
 800370e:	f003 030c 	and.w	r3, r3, #12
 8003712:	2b0c      	cmp	r3, #12
 8003714:	f200 8206 	bhi.w	8003b24 <HAL_RCC_GetSysClockFreq+0x440>
 8003718:	a201      	add	r2, pc, #4	; (adr r2, 8003720 <HAL_RCC_GetSysClockFreq+0x3c>)
 800371a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800371e:	bf00      	nop
 8003720:	08003755 	.word	0x08003755
 8003724:	08003b25 	.word	0x08003b25
 8003728:	08003b25 	.word	0x08003b25
 800372c:	08003b25 	.word	0x08003b25
 8003730:	0800375d 	.word	0x0800375d
 8003734:	08003b25 	.word	0x08003b25
 8003738:	08003b25 	.word	0x08003b25
 800373c:	08003b25 	.word	0x08003b25
 8003740:	08003765 	.word	0x08003765
 8003744:	08003b25 	.word	0x08003b25
 8003748:	08003b25 	.word	0x08003b25
 800374c:	08003b25 	.word	0x08003b25
 8003750:	08003955 	.word	0x08003955
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003754:	4bb9      	ldr	r3, [pc, #740]	; (8003a3c <HAL_RCC_GetSysClockFreq+0x358>)
 8003756:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800375a:	e1e7      	b.n	8003b2c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800375c:	4bb8      	ldr	r3, [pc, #736]	; (8003a40 <HAL_RCC_GetSysClockFreq+0x35c>)
 800375e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003762:	e1e3      	b.n	8003b2c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003764:	4bb4      	ldr	r3, [pc, #720]	; (8003a38 <HAL_RCC_GetSysClockFreq+0x354>)
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800376c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003770:	4bb1      	ldr	r3, [pc, #708]	; (8003a38 <HAL_RCC_GetSysClockFreq+0x354>)
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003778:	2b00      	cmp	r3, #0
 800377a:	d071      	beq.n	8003860 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800377c:	4bae      	ldr	r3, [pc, #696]	; (8003a38 <HAL_RCC_GetSysClockFreq+0x354>)
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	099b      	lsrs	r3, r3, #6
 8003782:	2200      	movs	r2, #0
 8003784:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003788:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800378c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003790:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003794:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003798:	2300      	movs	r3, #0
 800379a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800379e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80037a2:	4622      	mov	r2, r4
 80037a4:	462b      	mov	r3, r5
 80037a6:	f04f 0000 	mov.w	r0, #0
 80037aa:	f04f 0100 	mov.w	r1, #0
 80037ae:	0159      	lsls	r1, r3, #5
 80037b0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80037b4:	0150      	lsls	r0, r2, #5
 80037b6:	4602      	mov	r2, r0
 80037b8:	460b      	mov	r3, r1
 80037ba:	4621      	mov	r1, r4
 80037bc:	1a51      	subs	r1, r2, r1
 80037be:	6439      	str	r1, [r7, #64]	; 0x40
 80037c0:	4629      	mov	r1, r5
 80037c2:	eb63 0301 	sbc.w	r3, r3, r1
 80037c6:	647b      	str	r3, [r7, #68]	; 0x44
 80037c8:	f04f 0200 	mov.w	r2, #0
 80037cc:	f04f 0300 	mov.w	r3, #0
 80037d0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80037d4:	4649      	mov	r1, r9
 80037d6:	018b      	lsls	r3, r1, #6
 80037d8:	4641      	mov	r1, r8
 80037da:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80037de:	4641      	mov	r1, r8
 80037e0:	018a      	lsls	r2, r1, #6
 80037e2:	4641      	mov	r1, r8
 80037e4:	1a51      	subs	r1, r2, r1
 80037e6:	63b9      	str	r1, [r7, #56]	; 0x38
 80037e8:	4649      	mov	r1, r9
 80037ea:	eb63 0301 	sbc.w	r3, r3, r1
 80037ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80037f0:	f04f 0200 	mov.w	r2, #0
 80037f4:	f04f 0300 	mov.w	r3, #0
 80037f8:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80037fc:	4649      	mov	r1, r9
 80037fe:	00cb      	lsls	r3, r1, #3
 8003800:	4641      	mov	r1, r8
 8003802:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003806:	4641      	mov	r1, r8
 8003808:	00ca      	lsls	r2, r1, #3
 800380a:	4610      	mov	r0, r2
 800380c:	4619      	mov	r1, r3
 800380e:	4603      	mov	r3, r0
 8003810:	4622      	mov	r2, r4
 8003812:	189b      	adds	r3, r3, r2
 8003814:	633b      	str	r3, [r7, #48]	; 0x30
 8003816:	462b      	mov	r3, r5
 8003818:	460a      	mov	r2, r1
 800381a:	eb42 0303 	adc.w	r3, r2, r3
 800381e:	637b      	str	r3, [r7, #52]	; 0x34
 8003820:	f04f 0200 	mov.w	r2, #0
 8003824:	f04f 0300 	mov.w	r3, #0
 8003828:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800382c:	4629      	mov	r1, r5
 800382e:	024b      	lsls	r3, r1, #9
 8003830:	4621      	mov	r1, r4
 8003832:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003836:	4621      	mov	r1, r4
 8003838:	024a      	lsls	r2, r1, #9
 800383a:	4610      	mov	r0, r2
 800383c:	4619      	mov	r1, r3
 800383e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003842:	2200      	movs	r2, #0
 8003844:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003848:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800384c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8003850:	f7fc fd2e 	bl	80002b0 <__aeabi_uldivmod>
 8003854:	4602      	mov	r2, r0
 8003856:	460b      	mov	r3, r1
 8003858:	4613      	mov	r3, r2
 800385a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800385e:	e067      	b.n	8003930 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003860:	4b75      	ldr	r3, [pc, #468]	; (8003a38 <HAL_RCC_GetSysClockFreq+0x354>)
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	099b      	lsrs	r3, r3, #6
 8003866:	2200      	movs	r2, #0
 8003868:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800386c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003870:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003874:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003878:	67bb      	str	r3, [r7, #120]	; 0x78
 800387a:	2300      	movs	r3, #0
 800387c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800387e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8003882:	4622      	mov	r2, r4
 8003884:	462b      	mov	r3, r5
 8003886:	f04f 0000 	mov.w	r0, #0
 800388a:	f04f 0100 	mov.w	r1, #0
 800388e:	0159      	lsls	r1, r3, #5
 8003890:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003894:	0150      	lsls	r0, r2, #5
 8003896:	4602      	mov	r2, r0
 8003898:	460b      	mov	r3, r1
 800389a:	4621      	mov	r1, r4
 800389c:	1a51      	subs	r1, r2, r1
 800389e:	62b9      	str	r1, [r7, #40]	; 0x28
 80038a0:	4629      	mov	r1, r5
 80038a2:	eb63 0301 	sbc.w	r3, r3, r1
 80038a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80038a8:	f04f 0200 	mov.w	r2, #0
 80038ac:	f04f 0300 	mov.w	r3, #0
 80038b0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80038b4:	4649      	mov	r1, r9
 80038b6:	018b      	lsls	r3, r1, #6
 80038b8:	4641      	mov	r1, r8
 80038ba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80038be:	4641      	mov	r1, r8
 80038c0:	018a      	lsls	r2, r1, #6
 80038c2:	4641      	mov	r1, r8
 80038c4:	ebb2 0a01 	subs.w	sl, r2, r1
 80038c8:	4649      	mov	r1, r9
 80038ca:	eb63 0b01 	sbc.w	fp, r3, r1
 80038ce:	f04f 0200 	mov.w	r2, #0
 80038d2:	f04f 0300 	mov.w	r3, #0
 80038d6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80038da:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80038de:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80038e2:	4692      	mov	sl, r2
 80038e4:	469b      	mov	fp, r3
 80038e6:	4623      	mov	r3, r4
 80038e8:	eb1a 0303 	adds.w	r3, sl, r3
 80038ec:	623b      	str	r3, [r7, #32]
 80038ee:	462b      	mov	r3, r5
 80038f0:	eb4b 0303 	adc.w	r3, fp, r3
 80038f4:	627b      	str	r3, [r7, #36]	; 0x24
 80038f6:	f04f 0200 	mov.w	r2, #0
 80038fa:	f04f 0300 	mov.w	r3, #0
 80038fe:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003902:	4629      	mov	r1, r5
 8003904:	028b      	lsls	r3, r1, #10
 8003906:	4621      	mov	r1, r4
 8003908:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800390c:	4621      	mov	r1, r4
 800390e:	028a      	lsls	r2, r1, #10
 8003910:	4610      	mov	r0, r2
 8003912:	4619      	mov	r1, r3
 8003914:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003918:	2200      	movs	r2, #0
 800391a:	673b      	str	r3, [r7, #112]	; 0x70
 800391c:	677a      	str	r2, [r7, #116]	; 0x74
 800391e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8003922:	f7fc fcc5 	bl	80002b0 <__aeabi_uldivmod>
 8003926:	4602      	mov	r2, r0
 8003928:	460b      	mov	r3, r1
 800392a:	4613      	mov	r3, r2
 800392c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003930:	4b41      	ldr	r3, [pc, #260]	; (8003a38 <HAL_RCC_GetSysClockFreq+0x354>)
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	0c1b      	lsrs	r3, r3, #16
 8003936:	f003 0303 	and.w	r3, r3, #3
 800393a:	3301      	adds	r3, #1
 800393c:	005b      	lsls	r3, r3, #1
 800393e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8003942:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003946:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800394a:	fbb2 f3f3 	udiv	r3, r2, r3
 800394e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003952:	e0eb      	b.n	8003b2c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003954:	4b38      	ldr	r3, [pc, #224]	; (8003a38 <HAL_RCC_GetSysClockFreq+0x354>)
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800395c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003960:	4b35      	ldr	r3, [pc, #212]	; (8003a38 <HAL_RCC_GetSysClockFreq+0x354>)
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003968:	2b00      	cmp	r3, #0
 800396a:	d06b      	beq.n	8003a44 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800396c:	4b32      	ldr	r3, [pc, #200]	; (8003a38 <HAL_RCC_GetSysClockFreq+0x354>)
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	099b      	lsrs	r3, r3, #6
 8003972:	2200      	movs	r2, #0
 8003974:	66bb      	str	r3, [r7, #104]	; 0x68
 8003976:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003978:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800397a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800397e:	663b      	str	r3, [r7, #96]	; 0x60
 8003980:	2300      	movs	r3, #0
 8003982:	667b      	str	r3, [r7, #100]	; 0x64
 8003984:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8003988:	4622      	mov	r2, r4
 800398a:	462b      	mov	r3, r5
 800398c:	f04f 0000 	mov.w	r0, #0
 8003990:	f04f 0100 	mov.w	r1, #0
 8003994:	0159      	lsls	r1, r3, #5
 8003996:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800399a:	0150      	lsls	r0, r2, #5
 800399c:	4602      	mov	r2, r0
 800399e:	460b      	mov	r3, r1
 80039a0:	4621      	mov	r1, r4
 80039a2:	1a51      	subs	r1, r2, r1
 80039a4:	61b9      	str	r1, [r7, #24]
 80039a6:	4629      	mov	r1, r5
 80039a8:	eb63 0301 	sbc.w	r3, r3, r1
 80039ac:	61fb      	str	r3, [r7, #28]
 80039ae:	f04f 0200 	mov.w	r2, #0
 80039b2:	f04f 0300 	mov.w	r3, #0
 80039b6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80039ba:	4659      	mov	r1, fp
 80039bc:	018b      	lsls	r3, r1, #6
 80039be:	4651      	mov	r1, sl
 80039c0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80039c4:	4651      	mov	r1, sl
 80039c6:	018a      	lsls	r2, r1, #6
 80039c8:	4651      	mov	r1, sl
 80039ca:	ebb2 0801 	subs.w	r8, r2, r1
 80039ce:	4659      	mov	r1, fp
 80039d0:	eb63 0901 	sbc.w	r9, r3, r1
 80039d4:	f04f 0200 	mov.w	r2, #0
 80039d8:	f04f 0300 	mov.w	r3, #0
 80039dc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80039e0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80039e4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80039e8:	4690      	mov	r8, r2
 80039ea:	4699      	mov	r9, r3
 80039ec:	4623      	mov	r3, r4
 80039ee:	eb18 0303 	adds.w	r3, r8, r3
 80039f2:	613b      	str	r3, [r7, #16]
 80039f4:	462b      	mov	r3, r5
 80039f6:	eb49 0303 	adc.w	r3, r9, r3
 80039fa:	617b      	str	r3, [r7, #20]
 80039fc:	f04f 0200 	mov.w	r2, #0
 8003a00:	f04f 0300 	mov.w	r3, #0
 8003a04:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003a08:	4629      	mov	r1, r5
 8003a0a:	024b      	lsls	r3, r1, #9
 8003a0c:	4621      	mov	r1, r4
 8003a0e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003a12:	4621      	mov	r1, r4
 8003a14:	024a      	lsls	r2, r1, #9
 8003a16:	4610      	mov	r0, r2
 8003a18:	4619      	mov	r1, r3
 8003a1a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003a1e:	2200      	movs	r2, #0
 8003a20:	65bb      	str	r3, [r7, #88]	; 0x58
 8003a22:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003a24:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003a28:	f7fc fc42 	bl	80002b0 <__aeabi_uldivmod>
 8003a2c:	4602      	mov	r2, r0
 8003a2e:	460b      	mov	r3, r1
 8003a30:	4613      	mov	r3, r2
 8003a32:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003a36:	e065      	b.n	8003b04 <HAL_RCC_GetSysClockFreq+0x420>
 8003a38:	40023800 	.word	0x40023800
 8003a3c:	00f42400 	.word	0x00f42400
 8003a40:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a44:	4b3d      	ldr	r3, [pc, #244]	; (8003b3c <HAL_RCC_GetSysClockFreq+0x458>)
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	099b      	lsrs	r3, r3, #6
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	4611      	mov	r1, r2
 8003a50:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003a54:	653b      	str	r3, [r7, #80]	; 0x50
 8003a56:	2300      	movs	r3, #0
 8003a58:	657b      	str	r3, [r7, #84]	; 0x54
 8003a5a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8003a5e:	4642      	mov	r2, r8
 8003a60:	464b      	mov	r3, r9
 8003a62:	f04f 0000 	mov.w	r0, #0
 8003a66:	f04f 0100 	mov.w	r1, #0
 8003a6a:	0159      	lsls	r1, r3, #5
 8003a6c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a70:	0150      	lsls	r0, r2, #5
 8003a72:	4602      	mov	r2, r0
 8003a74:	460b      	mov	r3, r1
 8003a76:	4641      	mov	r1, r8
 8003a78:	1a51      	subs	r1, r2, r1
 8003a7a:	60b9      	str	r1, [r7, #8]
 8003a7c:	4649      	mov	r1, r9
 8003a7e:	eb63 0301 	sbc.w	r3, r3, r1
 8003a82:	60fb      	str	r3, [r7, #12]
 8003a84:	f04f 0200 	mov.w	r2, #0
 8003a88:	f04f 0300 	mov.w	r3, #0
 8003a8c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003a90:	4659      	mov	r1, fp
 8003a92:	018b      	lsls	r3, r1, #6
 8003a94:	4651      	mov	r1, sl
 8003a96:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003a9a:	4651      	mov	r1, sl
 8003a9c:	018a      	lsls	r2, r1, #6
 8003a9e:	4651      	mov	r1, sl
 8003aa0:	1a54      	subs	r4, r2, r1
 8003aa2:	4659      	mov	r1, fp
 8003aa4:	eb63 0501 	sbc.w	r5, r3, r1
 8003aa8:	f04f 0200 	mov.w	r2, #0
 8003aac:	f04f 0300 	mov.w	r3, #0
 8003ab0:	00eb      	lsls	r3, r5, #3
 8003ab2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003ab6:	00e2      	lsls	r2, r4, #3
 8003ab8:	4614      	mov	r4, r2
 8003aba:	461d      	mov	r5, r3
 8003abc:	4643      	mov	r3, r8
 8003abe:	18e3      	adds	r3, r4, r3
 8003ac0:	603b      	str	r3, [r7, #0]
 8003ac2:	464b      	mov	r3, r9
 8003ac4:	eb45 0303 	adc.w	r3, r5, r3
 8003ac8:	607b      	str	r3, [r7, #4]
 8003aca:	f04f 0200 	mov.w	r2, #0
 8003ace:	f04f 0300 	mov.w	r3, #0
 8003ad2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003ad6:	4629      	mov	r1, r5
 8003ad8:	028b      	lsls	r3, r1, #10
 8003ada:	4621      	mov	r1, r4
 8003adc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003ae0:	4621      	mov	r1, r4
 8003ae2:	028a      	lsls	r2, r1, #10
 8003ae4:	4610      	mov	r0, r2
 8003ae6:	4619      	mov	r1, r3
 8003ae8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003aec:	2200      	movs	r2, #0
 8003aee:	64bb      	str	r3, [r7, #72]	; 0x48
 8003af0:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003af2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003af6:	f7fc fbdb 	bl	80002b0 <__aeabi_uldivmod>
 8003afa:	4602      	mov	r2, r0
 8003afc:	460b      	mov	r3, r1
 8003afe:	4613      	mov	r3, r2
 8003b00:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003b04:	4b0d      	ldr	r3, [pc, #52]	; (8003b3c <HAL_RCC_GetSysClockFreq+0x458>)
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	0f1b      	lsrs	r3, r3, #28
 8003b0a:	f003 0307 	and.w	r3, r3, #7
 8003b0e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8003b12:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003b16:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003b1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b1e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003b22:	e003      	b.n	8003b2c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003b24:	4b06      	ldr	r3, [pc, #24]	; (8003b40 <HAL_RCC_GetSysClockFreq+0x45c>)
 8003b26:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003b2a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b2c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8003b30:	4618      	mov	r0, r3
 8003b32:	37b8      	adds	r7, #184	; 0xb8
 8003b34:	46bd      	mov	sp, r7
 8003b36:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b3a:	bf00      	nop
 8003b3c:	40023800 	.word	0x40023800
 8003b40:	00f42400 	.word	0x00f42400

08003b44 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b086      	sub	sp, #24
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d101      	bne.n	8003b56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b52:	2301      	movs	r3, #1
 8003b54:	e28d      	b.n	8004072 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f003 0301 	and.w	r3, r3, #1
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	f000 8083 	beq.w	8003c6a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003b64:	4b94      	ldr	r3, [pc, #592]	; (8003db8 <HAL_RCC_OscConfig+0x274>)
 8003b66:	689b      	ldr	r3, [r3, #8]
 8003b68:	f003 030c 	and.w	r3, r3, #12
 8003b6c:	2b04      	cmp	r3, #4
 8003b6e:	d019      	beq.n	8003ba4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003b70:	4b91      	ldr	r3, [pc, #580]	; (8003db8 <HAL_RCC_OscConfig+0x274>)
 8003b72:	689b      	ldr	r3, [r3, #8]
 8003b74:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003b78:	2b08      	cmp	r3, #8
 8003b7a:	d106      	bne.n	8003b8a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003b7c:	4b8e      	ldr	r3, [pc, #568]	; (8003db8 <HAL_RCC_OscConfig+0x274>)
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b84:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b88:	d00c      	beq.n	8003ba4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b8a:	4b8b      	ldr	r3, [pc, #556]	; (8003db8 <HAL_RCC_OscConfig+0x274>)
 8003b8c:	689b      	ldr	r3, [r3, #8]
 8003b8e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003b92:	2b0c      	cmp	r3, #12
 8003b94:	d112      	bne.n	8003bbc <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b96:	4b88      	ldr	r3, [pc, #544]	; (8003db8 <HAL_RCC_OscConfig+0x274>)
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b9e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ba2:	d10b      	bne.n	8003bbc <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ba4:	4b84      	ldr	r3, [pc, #528]	; (8003db8 <HAL_RCC_OscConfig+0x274>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d05b      	beq.n	8003c68 <HAL_RCC_OscConfig+0x124>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d157      	bne.n	8003c68 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003bb8:	2301      	movs	r3, #1
 8003bba:	e25a      	b.n	8004072 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bc4:	d106      	bne.n	8003bd4 <HAL_RCC_OscConfig+0x90>
 8003bc6:	4b7c      	ldr	r3, [pc, #496]	; (8003db8 <HAL_RCC_OscConfig+0x274>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4a7b      	ldr	r2, [pc, #492]	; (8003db8 <HAL_RCC_OscConfig+0x274>)
 8003bcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bd0:	6013      	str	r3, [r2, #0]
 8003bd2:	e01d      	b.n	8003c10 <HAL_RCC_OscConfig+0xcc>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003bdc:	d10c      	bne.n	8003bf8 <HAL_RCC_OscConfig+0xb4>
 8003bde:	4b76      	ldr	r3, [pc, #472]	; (8003db8 <HAL_RCC_OscConfig+0x274>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a75      	ldr	r2, [pc, #468]	; (8003db8 <HAL_RCC_OscConfig+0x274>)
 8003be4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003be8:	6013      	str	r3, [r2, #0]
 8003bea:	4b73      	ldr	r3, [pc, #460]	; (8003db8 <HAL_RCC_OscConfig+0x274>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a72      	ldr	r2, [pc, #456]	; (8003db8 <HAL_RCC_OscConfig+0x274>)
 8003bf0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bf4:	6013      	str	r3, [r2, #0]
 8003bf6:	e00b      	b.n	8003c10 <HAL_RCC_OscConfig+0xcc>
 8003bf8:	4b6f      	ldr	r3, [pc, #444]	; (8003db8 <HAL_RCC_OscConfig+0x274>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a6e      	ldr	r2, [pc, #440]	; (8003db8 <HAL_RCC_OscConfig+0x274>)
 8003bfe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c02:	6013      	str	r3, [r2, #0]
 8003c04:	4b6c      	ldr	r3, [pc, #432]	; (8003db8 <HAL_RCC_OscConfig+0x274>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a6b      	ldr	r2, [pc, #428]	; (8003db8 <HAL_RCC_OscConfig+0x274>)
 8003c0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c0e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d013      	beq.n	8003c40 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c18:	f7fd fbbc 	bl	8001394 <HAL_GetTick>
 8003c1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c1e:	e008      	b.n	8003c32 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c20:	f7fd fbb8 	bl	8001394 <HAL_GetTick>
 8003c24:	4602      	mov	r2, r0
 8003c26:	693b      	ldr	r3, [r7, #16]
 8003c28:	1ad3      	subs	r3, r2, r3
 8003c2a:	2b64      	cmp	r3, #100	; 0x64
 8003c2c:	d901      	bls.n	8003c32 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003c2e:	2303      	movs	r3, #3
 8003c30:	e21f      	b.n	8004072 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c32:	4b61      	ldr	r3, [pc, #388]	; (8003db8 <HAL_RCC_OscConfig+0x274>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d0f0      	beq.n	8003c20 <HAL_RCC_OscConfig+0xdc>
 8003c3e:	e014      	b.n	8003c6a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c40:	f7fd fba8 	bl	8001394 <HAL_GetTick>
 8003c44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c46:	e008      	b.n	8003c5a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c48:	f7fd fba4 	bl	8001394 <HAL_GetTick>
 8003c4c:	4602      	mov	r2, r0
 8003c4e:	693b      	ldr	r3, [r7, #16]
 8003c50:	1ad3      	subs	r3, r2, r3
 8003c52:	2b64      	cmp	r3, #100	; 0x64
 8003c54:	d901      	bls.n	8003c5a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003c56:	2303      	movs	r3, #3
 8003c58:	e20b      	b.n	8004072 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c5a:	4b57      	ldr	r3, [pc, #348]	; (8003db8 <HAL_RCC_OscConfig+0x274>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d1f0      	bne.n	8003c48 <HAL_RCC_OscConfig+0x104>
 8003c66:	e000      	b.n	8003c6a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f003 0302 	and.w	r3, r3, #2
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d06f      	beq.n	8003d56 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003c76:	4b50      	ldr	r3, [pc, #320]	; (8003db8 <HAL_RCC_OscConfig+0x274>)
 8003c78:	689b      	ldr	r3, [r3, #8]
 8003c7a:	f003 030c 	and.w	r3, r3, #12
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d017      	beq.n	8003cb2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003c82:	4b4d      	ldr	r3, [pc, #308]	; (8003db8 <HAL_RCC_OscConfig+0x274>)
 8003c84:	689b      	ldr	r3, [r3, #8]
 8003c86:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003c8a:	2b08      	cmp	r3, #8
 8003c8c:	d105      	bne.n	8003c9a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003c8e:	4b4a      	ldr	r3, [pc, #296]	; (8003db8 <HAL_RCC_OscConfig+0x274>)
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d00b      	beq.n	8003cb2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c9a:	4b47      	ldr	r3, [pc, #284]	; (8003db8 <HAL_RCC_OscConfig+0x274>)
 8003c9c:	689b      	ldr	r3, [r3, #8]
 8003c9e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003ca2:	2b0c      	cmp	r3, #12
 8003ca4:	d11c      	bne.n	8003ce0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ca6:	4b44      	ldr	r3, [pc, #272]	; (8003db8 <HAL_RCC_OscConfig+0x274>)
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d116      	bne.n	8003ce0 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cb2:	4b41      	ldr	r3, [pc, #260]	; (8003db8 <HAL_RCC_OscConfig+0x274>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f003 0302 	and.w	r3, r3, #2
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d005      	beq.n	8003cca <HAL_RCC_OscConfig+0x186>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	68db      	ldr	r3, [r3, #12]
 8003cc2:	2b01      	cmp	r3, #1
 8003cc4:	d001      	beq.n	8003cca <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	e1d3      	b.n	8004072 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cca:	4b3b      	ldr	r3, [pc, #236]	; (8003db8 <HAL_RCC_OscConfig+0x274>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	691b      	ldr	r3, [r3, #16]
 8003cd6:	00db      	lsls	r3, r3, #3
 8003cd8:	4937      	ldr	r1, [pc, #220]	; (8003db8 <HAL_RCC_OscConfig+0x274>)
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cde:	e03a      	b.n	8003d56 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	68db      	ldr	r3, [r3, #12]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d020      	beq.n	8003d2a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ce8:	4b34      	ldr	r3, [pc, #208]	; (8003dbc <HAL_RCC_OscConfig+0x278>)
 8003cea:	2201      	movs	r2, #1
 8003cec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cee:	f7fd fb51 	bl	8001394 <HAL_GetTick>
 8003cf2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cf4:	e008      	b.n	8003d08 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003cf6:	f7fd fb4d 	bl	8001394 <HAL_GetTick>
 8003cfa:	4602      	mov	r2, r0
 8003cfc:	693b      	ldr	r3, [r7, #16]
 8003cfe:	1ad3      	subs	r3, r2, r3
 8003d00:	2b02      	cmp	r3, #2
 8003d02:	d901      	bls.n	8003d08 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003d04:	2303      	movs	r3, #3
 8003d06:	e1b4      	b.n	8004072 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d08:	4b2b      	ldr	r3, [pc, #172]	; (8003db8 <HAL_RCC_OscConfig+0x274>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f003 0302 	and.w	r3, r3, #2
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d0f0      	beq.n	8003cf6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d14:	4b28      	ldr	r3, [pc, #160]	; (8003db8 <HAL_RCC_OscConfig+0x274>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	691b      	ldr	r3, [r3, #16]
 8003d20:	00db      	lsls	r3, r3, #3
 8003d22:	4925      	ldr	r1, [pc, #148]	; (8003db8 <HAL_RCC_OscConfig+0x274>)
 8003d24:	4313      	orrs	r3, r2
 8003d26:	600b      	str	r3, [r1, #0]
 8003d28:	e015      	b.n	8003d56 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d2a:	4b24      	ldr	r3, [pc, #144]	; (8003dbc <HAL_RCC_OscConfig+0x278>)
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d30:	f7fd fb30 	bl	8001394 <HAL_GetTick>
 8003d34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d36:	e008      	b.n	8003d4a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d38:	f7fd fb2c 	bl	8001394 <HAL_GetTick>
 8003d3c:	4602      	mov	r2, r0
 8003d3e:	693b      	ldr	r3, [r7, #16]
 8003d40:	1ad3      	subs	r3, r2, r3
 8003d42:	2b02      	cmp	r3, #2
 8003d44:	d901      	bls.n	8003d4a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003d46:	2303      	movs	r3, #3
 8003d48:	e193      	b.n	8004072 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d4a:	4b1b      	ldr	r3, [pc, #108]	; (8003db8 <HAL_RCC_OscConfig+0x274>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f003 0302 	and.w	r3, r3, #2
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d1f0      	bne.n	8003d38 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f003 0308 	and.w	r3, r3, #8
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d036      	beq.n	8003dd0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	695b      	ldr	r3, [r3, #20]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d016      	beq.n	8003d98 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d6a:	4b15      	ldr	r3, [pc, #84]	; (8003dc0 <HAL_RCC_OscConfig+0x27c>)
 8003d6c:	2201      	movs	r2, #1
 8003d6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d70:	f7fd fb10 	bl	8001394 <HAL_GetTick>
 8003d74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d76:	e008      	b.n	8003d8a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d78:	f7fd fb0c 	bl	8001394 <HAL_GetTick>
 8003d7c:	4602      	mov	r2, r0
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	1ad3      	subs	r3, r2, r3
 8003d82:	2b02      	cmp	r3, #2
 8003d84:	d901      	bls.n	8003d8a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003d86:	2303      	movs	r3, #3
 8003d88:	e173      	b.n	8004072 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d8a:	4b0b      	ldr	r3, [pc, #44]	; (8003db8 <HAL_RCC_OscConfig+0x274>)
 8003d8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d8e:	f003 0302 	and.w	r3, r3, #2
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d0f0      	beq.n	8003d78 <HAL_RCC_OscConfig+0x234>
 8003d96:	e01b      	b.n	8003dd0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d98:	4b09      	ldr	r3, [pc, #36]	; (8003dc0 <HAL_RCC_OscConfig+0x27c>)
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d9e:	f7fd faf9 	bl	8001394 <HAL_GetTick>
 8003da2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003da4:	e00e      	b.n	8003dc4 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003da6:	f7fd faf5 	bl	8001394 <HAL_GetTick>
 8003daa:	4602      	mov	r2, r0
 8003dac:	693b      	ldr	r3, [r7, #16]
 8003dae:	1ad3      	subs	r3, r2, r3
 8003db0:	2b02      	cmp	r3, #2
 8003db2:	d907      	bls.n	8003dc4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003db4:	2303      	movs	r3, #3
 8003db6:	e15c      	b.n	8004072 <HAL_RCC_OscConfig+0x52e>
 8003db8:	40023800 	.word	0x40023800
 8003dbc:	42470000 	.word	0x42470000
 8003dc0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003dc4:	4b8a      	ldr	r3, [pc, #552]	; (8003ff0 <HAL_RCC_OscConfig+0x4ac>)
 8003dc6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dc8:	f003 0302 	and.w	r3, r3, #2
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d1ea      	bne.n	8003da6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f003 0304 	and.w	r3, r3, #4
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	f000 8097 	beq.w	8003f0c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003dde:	2300      	movs	r3, #0
 8003de0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003de2:	4b83      	ldr	r3, [pc, #524]	; (8003ff0 <HAL_RCC_OscConfig+0x4ac>)
 8003de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d10f      	bne.n	8003e0e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003dee:	2300      	movs	r3, #0
 8003df0:	60bb      	str	r3, [r7, #8]
 8003df2:	4b7f      	ldr	r3, [pc, #508]	; (8003ff0 <HAL_RCC_OscConfig+0x4ac>)
 8003df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df6:	4a7e      	ldr	r2, [pc, #504]	; (8003ff0 <HAL_RCC_OscConfig+0x4ac>)
 8003df8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dfc:	6413      	str	r3, [r2, #64]	; 0x40
 8003dfe:	4b7c      	ldr	r3, [pc, #496]	; (8003ff0 <HAL_RCC_OscConfig+0x4ac>)
 8003e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e06:	60bb      	str	r3, [r7, #8]
 8003e08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e0e:	4b79      	ldr	r3, [pc, #484]	; (8003ff4 <HAL_RCC_OscConfig+0x4b0>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d118      	bne.n	8003e4c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e1a:	4b76      	ldr	r3, [pc, #472]	; (8003ff4 <HAL_RCC_OscConfig+0x4b0>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a75      	ldr	r2, [pc, #468]	; (8003ff4 <HAL_RCC_OscConfig+0x4b0>)
 8003e20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e24:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e26:	f7fd fab5 	bl	8001394 <HAL_GetTick>
 8003e2a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e2c:	e008      	b.n	8003e40 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e2e:	f7fd fab1 	bl	8001394 <HAL_GetTick>
 8003e32:	4602      	mov	r2, r0
 8003e34:	693b      	ldr	r3, [r7, #16]
 8003e36:	1ad3      	subs	r3, r2, r3
 8003e38:	2b02      	cmp	r3, #2
 8003e3a:	d901      	bls.n	8003e40 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003e3c:	2303      	movs	r3, #3
 8003e3e:	e118      	b.n	8004072 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e40:	4b6c      	ldr	r3, [pc, #432]	; (8003ff4 <HAL_RCC_OscConfig+0x4b0>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d0f0      	beq.n	8003e2e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	689b      	ldr	r3, [r3, #8]
 8003e50:	2b01      	cmp	r3, #1
 8003e52:	d106      	bne.n	8003e62 <HAL_RCC_OscConfig+0x31e>
 8003e54:	4b66      	ldr	r3, [pc, #408]	; (8003ff0 <HAL_RCC_OscConfig+0x4ac>)
 8003e56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e58:	4a65      	ldr	r2, [pc, #404]	; (8003ff0 <HAL_RCC_OscConfig+0x4ac>)
 8003e5a:	f043 0301 	orr.w	r3, r3, #1
 8003e5e:	6713      	str	r3, [r2, #112]	; 0x70
 8003e60:	e01c      	b.n	8003e9c <HAL_RCC_OscConfig+0x358>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	689b      	ldr	r3, [r3, #8]
 8003e66:	2b05      	cmp	r3, #5
 8003e68:	d10c      	bne.n	8003e84 <HAL_RCC_OscConfig+0x340>
 8003e6a:	4b61      	ldr	r3, [pc, #388]	; (8003ff0 <HAL_RCC_OscConfig+0x4ac>)
 8003e6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e6e:	4a60      	ldr	r2, [pc, #384]	; (8003ff0 <HAL_RCC_OscConfig+0x4ac>)
 8003e70:	f043 0304 	orr.w	r3, r3, #4
 8003e74:	6713      	str	r3, [r2, #112]	; 0x70
 8003e76:	4b5e      	ldr	r3, [pc, #376]	; (8003ff0 <HAL_RCC_OscConfig+0x4ac>)
 8003e78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e7a:	4a5d      	ldr	r2, [pc, #372]	; (8003ff0 <HAL_RCC_OscConfig+0x4ac>)
 8003e7c:	f043 0301 	orr.w	r3, r3, #1
 8003e80:	6713      	str	r3, [r2, #112]	; 0x70
 8003e82:	e00b      	b.n	8003e9c <HAL_RCC_OscConfig+0x358>
 8003e84:	4b5a      	ldr	r3, [pc, #360]	; (8003ff0 <HAL_RCC_OscConfig+0x4ac>)
 8003e86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e88:	4a59      	ldr	r2, [pc, #356]	; (8003ff0 <HAL_RCC_OscConfig+0x4ac>)
 8003e8a:	f023 0301 	bic.w	r3, r3, #1
 8003e8e:	6713      	str	r3, [r2, #112]	; 0x70
 8003e90:	4b57      	ldr	r3, [pc, #348]	; (8003ff0 <HAL_RCC_OscConfig+0x4ac>)
 8003e92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e94:	4a56      	ldr	r2, [pc, #344]	; (8003ff0 <HAL_RCC_OscConfig+0x4ac>)
 8003e96:	f023 0304 	bic.w	r3, r3, #4
 8003e9a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	689b      	ldr	r3, [r3, #8]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d015      	beq.n	8003ed0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ea4:	f7fd fa76 	bl	8001394 <HAL_GetTick>
 8003ea8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003eaa:	e00a      	b.n	8003ec2 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003eac:	f7fd fa72 	bl	8001394 <HAL_GetTick>
 8003eb0:	4602      	mov	r2, r0
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	1ad3      	subs	r3, r2, r3
 8003eb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d901      	bls.n	8003ec2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003ebe:	2303      	movs	r3, #3
 8003ec0:	e0d7      	b.n	8004072 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ec2:	4b4b      	ldr	r3, [pc, #300]	; (8003ff0 <HAL_RCC_OscConfig+0x4ac>)
 8003ec4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ec6:	f003 0302 	and.w	r3, r3, #2
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d0ee      	beq.n	8003eac <HAL_RCC_OscConfig+0x368>
 8003ece:	e014      	b.n	8003efa <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ed0:	f7fd fa60 	bl	8001394 <HAL_GetTick>
 8003ed4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ed6:	e00a      	b.n	8003eee <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ed8:	f7fd fa5c 	bl	8001394 <HAL_GetTick>
 8003edc:	4602      	mov	r2, r0
 8003ede:	693b      	ldr	r3, [r7, #16]
 8003ee0:	1ad3      	subs	r3, r2, r3
 8003ee2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d901      	bls.n	8003eee <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003eea:	2303      	movs	r3, #3
 8003eec:	e0c1      	b.n	8004072 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003eee:	4b40      	ldr	r3, [pc, #256]	; (8003ff0 <HAL_RCC_OscConfig+0x4ac>)
 8003ef0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ef2:	f003 0302 	and.w	r3, r3, #2
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d1ee      	bne.n	8003ed8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003efa:	7dfb      	ldrb	r3, [r7, #23]
 8003efc:	2b01      	cmp	r3, #1
 8003efe:	d105      	bne.n	8003f0c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f00:	4b3b      	ldr	r3, [pc, #236]	; (8003ff0 <HAL_RCC_OscConfig+0x4ac>)
 8003f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f04:	4a3a      	ldr	r2, [pc, #232]	; (8003ff0 <HAL_RCC_OscConfig+0x4ac>)
 8003f06:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f0a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	699b      	ldr	r3, [r3, #24]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	f000 80ad 	beq.w	8004070 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003f16:	4b36      	ldr	r3, [pc, #216]	; (8003ff0 <HAL_RCC_OscConfig+0x4ac>)
 8003f18:	689b      	ldr	r3, [r3, #8]
 8003f1a:	f003 030c 	and.w	r3, r3, #12
 8003f1e:	2b08      	cmp	r3, #8
 8003f20:	d060      	beq.n	8003fe4 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	699b      	ldr	r3, [r3, #24]
 8003f26:	2b02      	cmp	r3, #2
 8003f28:	d145      	bne.n	8003fb6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f2a:	4b33      	ldr	r3, [pc, #204]	; (8003ff8 <HAL_RCC_OscConfig+0x4b4>)
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f30:	f7fd fa30 	bl	8001394 <HAL_GetTick>
 8003f34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f36:	e008      	b.n	8003f4a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f38:	f7fd fa2c 	bl	8001394 <HAL_GetTick>
 8003f3c:	4602      	mov	r2, r0
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	1ad3      	subs	r3, r2, r3
 8003f42:	2b02      	cmp	r3, #2
 8003f44:	d901      	bls.n	8003f4a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003f46:	2303      	movs	r3, #3
 8003f48:	e093      	b.n	8004072 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f4a:	4b29      	ldr	r3, [pc, #164]	; (8003ff0 <HAL_RCC_OscConfig+0x4ac>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d1f0      	bne.n	8003f38 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	69da      	ldr	r2, [r3, #28]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6a1b      	ldr	r3, [r3, #32]
 8003f5e:	431a      	orrs	r2, r3
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f64:	019b      	lsls	r3, r3, #6
 8003f66:	431a      	orrs	r2, r3
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f6c:	085b      	lsrs	r3, r3, #1
 8003f6e:	3b01      	subs	r3, #1
 8003f70:	041b      	lsls	r3, r3, #16
 8003f72:	431a      	orrs	r2, r3
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f78:	061b      	lsls	r3, r3, #24
 8003f7a:	431a      	orrs	r2, r3
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f80:	071b      	lsls	r3, r3, #28
 8003f82:	491b      	ldr	r1, [pc, #108]	; (8003ff0 <HAL_RCC_OscConfig+0x4ac>)
 8003f84:	4313      	orrs	r3, r2
 8003f86:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f88:	4b1b      	ldr	r3, [pc, #108]	; (8003ff8 <HAL_RCC_OscConfig+0x4b4>)
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f8e:	f7fd fa01 	bl	8001394 <HAL_GetTick>
 8003f92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f94:	e008      	b.n	8003fa8 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f96:	f7fd f9fd 	bl	8001394 <HAL_GetTick>
 8003f9a:	4602      	mov	r2, r0
 8003f9c:	693b      	ldr	r3, [r7, #16]
 8003f9e:	1ad3      	subs	r3, r2, r3
 8003fa0:	2b02      	cmp	r3, #2
 8003fa2:	d901      	bls.n	8003fa8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003fa4:	2303      	movs	r3, #3
 8003fa6:	e064      	b.n	8004072 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fa8:	4b11      	ldr	r3, [pc, #68]	; (8003ff0 <HAL_RCC_OscConfig+0x4ac>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d0f0      	beq.n	8003f96 <HAL_RCC_OscConfig+0x452>
 8003fb4:	e05c      	b.n	8004070 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fb6:	4b10      	ldr	r3, [pc, #64]	; (8003ff8 <HAL_RCC_OscConfig+0x4b4>)
 8003fb8:	2200      	movs	r2, #0
 8003fba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fbc:	f7fd f9ea 	bl	8001394 <HAL_GetTick>
 8003fc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fc2:	e008      	b.n	8003fd6 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fc4:	f7fd f9e6 	bl	8001394 <HAL_GetTick>
 8003fc8:	4602      	mov	r2, r0
 8003fca:	693b      	ldr	r3, [r7, #16]
 8003fcc:	1ad3      	subs	r3, r2, r3
 8003fce:	2b02      	cmp	r3, #2
 8003fd0:	d901      	bls.n	8003fd6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003fd2:	2303      	movs	r3, #3
 8003fd4:	e04d      	b.n	8004072 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fd6:	4b06      	ldr	r3, [pc, #24]	; (8003ff0 <HAL_RCC_OscConfig+0x4ac>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d1f0      	bne.n	8003fc4 <HAL_RCC_OscConfig+0x480>
 8003fe2:	e045      	b.n	8004070 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	699b      	ldr	r3, [r3, #24]
 8003fe8:	2b01      	cmp	r3, #1
 8003fea:	d107      	bne.n	8003ffc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003fec:	2301      	movs	r3, #1
 8003fee:	e040      	b.n	8004072 <HAL_RCC_OscConfig+0x52e>
 8003ff0:	40023800 	.word	0x40023800
 8003ff4:	40007000 	.word	0x40007000
 8003ff8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003ffc:	4b1f      	ldr	r3, [pc, #124]	; (800407c <HAL_RCC_OscConfig+0x538>)
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	699b      	ldr	r3, [r3, #24]
 8004006:	2b01      	cmp	r3, #1
 8004008:	d030      	beq.n	800406c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004014:	429a      	cmp	r2, r3
 8004016:	d129      	bne.n	800406c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004022:	429a      	cmp	r2, r3
 8004024:	d122      	bne.n	800406c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004026:	68fa      	ldr	r2, [r7, #12]
 8004028:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800402c:	4013      	ands	r3, r2
 800402e:	687a      	ldr	r2, [r7, #4]
 8004030:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004032:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004034:	4293      	cmp	r3, r2
 8004036:	d119      	bne.n	800406c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004042:	085b      	lsrs	r3, r3, #1
 8004044:	3b01      	subs	r3, #1
 8004046:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004048:	429a      	cmp	r2, r3
 800404a:	d10f      	bne.n	800406c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004056:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004058:	429a      	cmp	r2, r3
 800405a:	d107      	bne.n	800406c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004066:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004068:	429a      	cmp	r2, r3
 800406a:	d001      	beq.n	8004070 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800406c:	2301      	movs	r3, #1
 800406e:	e000      	b.n	8004072 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004070:	2300      	movs	r3, #0
}
 8004072:	4618      	mov	r0, r3
 8004074:	3718      	adds	r7, #24
 8004076:	46bd      	mov	sp, r7
 8004078:	bd80      	pop	{r7, pc}
 800407a:	bf00      	nop
 800407c:	40023800 	.word	0x40023800

08004080 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b082      	sub	sp, #8
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d101      	bne.n	8004092 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800408e:	2301      	movs	r3, #1
 8004090:	e022      	b.n	80040d8 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004098:	b2db      	uxtb	r3, r3
 800409a:	2b00      	cmp	r3, #0
 800409c:	d105      	bne.n	80040aa <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2200      	movs	r2, #0
 80040a2:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80040a4:	6878      	ldr	r0, [r7, #4]
 80040a6:	f7fc ff13 	bl	8000ed0 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2203      	movs	r2, #3
 80040ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80040b2:	6878      	ldr	r0, [r7, #4]
 80040b4:	f000 f814 	bl	80040e0 <HAL_SD_InitCard>
 80040b8:	4603      	mov	r3, r0
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d001      	beq.n	80040c2 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80040be:	2301      	movs	r3, #1
 80040c0:	e00a      	b.n	80040d8 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2200      	movs	r2, #0
 80040c6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2200      	movs	r2, #0
 80040cc:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2201      	movs	r2, #1
 80040d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80040d6:	2300      	movs	r3, #0
}
 80040d8:	4618      	mov	r0, r3
 80040da:	3708      	adds	r7, #8
 80040dc:	46bd      	mov	sp, r7
 80040de:	bd80      	pop	{r7, pc}

080040e0 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80040e0:	b5b0      	push	{r4, r5, r7, lr}
 80040e2:	b08e      	sub	sp, #56	; 0x38
 80040e4:	af04      	add	r7, sp, #16
 80040e6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 80040e8:	2300      	movs	r3, #0
 80040ea:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 80040ec:	2300      	movs	r3, #0
 80040ee:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80040f0:	2300      	movs	r3, #0
 80040f2:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 80040f4:	2300      	movs	r3, #0
 80040f6:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80040f8:	2300      	movs	r3, #0
 80040fa:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 80040fc:	2376      	movs	r3, #118	; 0x76
 80040fe:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681d      	ldr	r5, [r3, #0]
 8004104:	466c      	mov	r4, sp
 8004106:	f107 0314 	add.w	r3, r7, #20
 800410a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800410e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004112:	f107 0308 	add.w	r3, r7, #8
 8004116:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004118:	4628      	mov	r0, r5
 800411a:	f002 f99b 	bl	8006454 <SDIO_Init>
 800411e:	4603      	mov	r3, r0
 8004120:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8004124:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004128:	2b00      	cmp	r3, #0
 800412a:	d001      	beq.n	8004130 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800412c:	2301      	movs	r3, #1
 800412e:	e04f      	b.n	80041d0 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8004130:	4b29      	ldr	r3, [pc, #164]	; (80041d8 <HAL_SD_InitCard+0xf8>)
 8004132:	2200      	movs	r2, #0
 8004134:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4618      	mov	r0, r3
 800413c:	f002 f9d3 	bl	80064e6 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8004140:	4b25      	ldr	r3, [pc, #148]	; (80041d8 <HAL_SD_InitCard+0xf8>)
 8004142:	2201      	movs	r2, #1
 8004144:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8004146:	2002      	movs	r0, #2
 8004148:	f7fd f930 	bl	80013ac <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800414c:	6878      	ldr	r0, [r7, #4]
 800414e:	f000 ff03 	bl	8004f58 <SD_PowerON>
 8004152:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004154:	6a3b      	ldr	r3, [r7, #32]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d00b      	beq.n	8004172 <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2201      	movs	r2, #1
 800415e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004166:	6a3b      	ldr	r3, [r7, #32]
 8004168:	431a      	orrs	r2, r3
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800416e:	2301      	movs	r3, #1
 8004170:	e02e      	b.n	80041d0 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8004172:	6878      	ldr	r0, [r7, #4]
 8004174:	f000 fe22 	bl	8004dbc <SD_InitCard>
 8004178:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800417a:	6a3b      	ldr	r3, [r7, #32]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d00b      	beq.n	8004198 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2201      	movs	r2, #1
 8004184:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800418c:	6a3b      	ldr	r3, [r7, #32]
 800418e:	431a      	orrs	r2, r3
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004194:	2301      	movs	r3, #1
 8004196:	e01b      	b.n	80041d0 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f44f 7100 	mov.w	r1, #512	; 0x200
 80041a0:	4618      	mov	r0, r3
 80041a2:	f002 fa32 	bl	800660a <SDMMC_CmdBlockLength>
 80041a6:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80041a8:	6a3b      	ldr	r3, [r7, #32]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d00f      	beq.n	80041ce <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4a0a      	ldr	r2, [pc, #40]	; (80041dc <HAL_SD_InitCard+0xfc>)
 80041b4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80041ba:	6a3b      	ldr	r3, [r7, #32]
 80041bc:	431a      	orrs	r2, r3
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2201      	movs	r2, #1
 80041c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80041ca:	2301      	movs	r3, #1
 80041cc:	e000      	b.n	80041d0 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 80041ce:	2300      	movs	r3, #0
}
 80041d0:	4618      	mov	r0, r3
 80041d2:	3728      	adds	r7, #40	; 0x28
 80041d4:	46bd      	mov	sp, r7
 80041d6:	bdb0      	pop	{r4, r5, r7, pc}
 80041d8:	422580a0 	.word	0x422580a0
 80041dc:	004005ff 	.word	0x004005ff

080041e0 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b092      	sub	sp, #72	; 0x48
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	60f8      	str	r0, [r7, #12]
 80041e8:	60b9      	str	r1, [r7, #8]
 80041ea:	607a      	str	r2, [r7, #4]
 80041ec:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80041ee:	f7fd f8d1 	bl	8001394 <HAL_GetTick>
 80041f2:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d107      	bne.n	8004212 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004206:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800420e:	2301      	movs	r3, #1
 8004210:	e1bd      	b.n	800458e <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004218:	b2db      	uxtb	r3, r3
 800421a:	2b01      	cmp	r3, #1
 800421c:	f040 81b0 	bne.w	8004580 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	2200      	movs	r2, #0
 8004224:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004226:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	441a      	add	r2, r3
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004230:	429a      	cmp	r2, r3
 8004232:	d907      	bls.n	8004244 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004238:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8004240:	2301      	movs	r3, #1
 8004242:	e1a4      	b.n	800458e <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	2203      	movs	r2, #3
 8004248:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	2200      	movs	r2, #0
 8004252:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004258:	2b01      	cmp	r3, #1
 800425a:	d002      	beq.n	8004262 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 800425c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800425e:	025b      	lsls	r3, r3, #9
 8004260:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004262:	f04f 33ff 	mov.w	r3, #4294967295
 8004266:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	025b      	lsls	r3, r3, #9
 800426c:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800426e:	2390      	movs	r3, #144	; 0x90
 8004270:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8004272:	2302      	movs	r3, #2
 8004274:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8004276:	2300      	movs	r3, #0
 8004278:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 800427a:	2301      	movs	r3, #1
 800427c:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f107 0214 	add.w	r2, r7, #20
 8004286:	4611      	mov	r1, r2
 8004288:	4618      	mov	r0, r3
 800428a:	f002 f992 	bl	80065b2 <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	2b01      	cmp	r3, #1
 8004292:	d90a      	bls.n	80042aa <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	2202      	movs	r2, #2
 8004298:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80042a0:	4618      	mov	r0, r3
 80042a2:	f002 f9f6 	bl	8006692 <SDMMC_CmdReadMultiBlock>
 80042a6:	6478      	str	r0, [r7, #68]	; 0x44
 80042a8:	e009      	b.n	80042be <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	2201      	movs	r2, #1
 80042ae:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80042b6:	4618      	mov	r0, r3
 80042b8:	f002 f9c9 	bl	800664e <SDMMC_CmdReadSingleBlock>
 80042bc:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80042be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d012      	beq.n	80042ea <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4a7a      	ldr	r2, [pc, #488]	; (80044b4 <HAL_SD_ReadBlocks+0x2d4>)
 80042ca:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80042d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042d2:	431a      	orrs	r2, r3
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	2201      	movs	r2, #1
 80042dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	2200      	movs	r2, #0
 80042e4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80042e6:	2301      	movs	r3, #1
 80042e8:	e151      	b.n	800458e <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 80042ea:	69bb      	ldr	r3, [r7, #24]
 80042ec:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 80042ee:	e061      	b.n	80043b4 <HAL_SD_ReadBlocks+0x1d4>
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d03c      	beq.n	8004378 <HAL_SD_ReadBlocks+0x198>
 80042fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004300:	2b00      	cmp	r3, #0
 8004302:	d039      	beq.n	8004378 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8004304:	2300      	movs	r3, #0
 8004306:	643b      	str	r3, [r7, #64]	; 0x40
 8004308:	e033      	b.n	8004372 <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4618      	mov	r0, r3
 8004310:	f002 f8cb 	bl	80064aa <SDIO_ReadFIFO>
 8004314:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8004316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004318:	b2da      	uxtb	r2, r3
 800431a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800431c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800431e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004320:	3301      	adds	r3, #1
 8004322:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8004324:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004326:	3b01      	subs	r3, #1
 8004328:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800432a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800432c:	0a1b      	lsrs	r3, r3, #8
 800432e:	b2da      	uxtb	r2, r3
 8004330:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004332:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8004334:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004336:	3301      	adds	r3, #1
 8004338:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800433a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800433c:	3b01      	subs	r3, #1
 800433e:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8004340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004342:	0c1b      	lsrs	r3, r3, #16
 8004344:	b2da      	uxtb	r2, r3
 8004346:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004348:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800434a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800434c:	3301      	adds	r3, #1
 800434e:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8004350:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004352:	3b01      	subs	r3, #1
 8004354:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8004356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004358:	0e1b      	lsrs	r3, r3, #24
 800435a:	b2da      	uxtb	r2, r3
 800435c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800435e:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8004360:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004362:	3301      	adds	r3, #1
 8004364:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8004366:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004368:	3b01      	subs	r3, #1
 800436a:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 800436c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800436e:	3301      	adds	r3, #1
 8004370:	643b      	str	r3, [r7, #64]	; 0x40
 8004372:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004374:	2b07      	cmp	r3, #7
 8004376:	d9c8      	bls.n	800430a <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8004378:	f7fd f80c 	bl	8001394 <HAL_GetTick>
 800437c:	4602      	mov	r2, r0
 800437e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004380:	1ad3      	subs	r3, r2, r3
 8004382:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004384:	429a      	cmp	r2, r3
 8004386:	d902      	bls.n	800438e <HAL_SD_ReadBlocks+0x1ae>
 8004388:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800438a:	2b00      	cmp	r3, #0
 800438c:	d112      	bne.n	80043b4 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4a48      	ldr	r2, [pc, #288]	; (80044b4 <HAL_SD_ReadBlocks+0x2d4>)
 8004394:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800439a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	2201      	movs	r2, #1
 80043a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	2200      	movs	r2, #0
 80043ae:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 80043b0:	2303      	movs	r3, #3
 80043b2:	e0ec      	b.n	800458e <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043ba:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d096      	beq.n	80042f0 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d022      	beq.n	8004416 <HAL_SD_ReadBlocks+0x236>
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	2b01      	cmp	r3, #1
 80043d4:	d91f      	bls.n	8004416 <HAL_SD_ReadBlocks+0x236>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043da:	2b03      	cmp	r3, #3
 80043dc:	d01b      	beq.n	8004416 <HAL_SD_ReadBlocks+0x236>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4618      	mov	r0, r3
 80043e4:	f002 f9bc 	bl	8006760 <SDMMC_CmdStopTransfer>
 80043e8:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80043ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d012      	beq.n	8004416 <HAL_SD_ReadBlocks+0x236>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a2f      	ldr	r2, [pc, #188]	; (80044b4 <HAL_SD_ReadBlocks+0x2d4>)
 80043f6:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80043fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80043fe:	431a      	orrs	r2, r3
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	2201      	movs	r2, #1
 8004408:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	2200      	movs	r2, #0
 8004410:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8004412:	2301      	movs	r3, #1
 8004414:	e0bb      	b.n	800458e <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800441c:	f003 0308 	and.w	r3, r3, #8
 8004420:	2b00      	cmp	r3, #0
 8004422:	d012      	beq.n	800444a <HAL_SD_ReadBlocks+0x26a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a22      	ldr	r2, [pc, #136]	; (80044b4 <HAL_SD_ReadBlocks+0x2d4>)
 800442a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004430:	f043 0208 	orr.w	r2, r3, #8
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	2201      	movs	r2, #1
 800443c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	2200      	movs	r2, #0
 8004444:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004446:	2301      	movs	r3, #1
 8004448:	e0a1      	b.n	800458e <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004450:	f003 0302 	and.w	r3, r3, #2
 8004454:	2b00      	cmp	r3, #0
 8004456:	d012      	beq.n	800447e <HAL_SD_ReadBlocks+0x29e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a15      	ldr	r2, [pc, #84]	; (80044b4 <HAL_SD_ReadBlocks+0x2d4>)
 800445e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004464:	f043 0202 	orr.w	r2, r3, #2
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	2201      	movs	r2, #1
 8004470:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	2200      	movs	r2, #0
 8004478:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800447a:	2301      	movs	r3, #1
 800447c:	e087      	b.n	800458e <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004484:	f003 0320 	and.w	r3, r3, #32
 8004488:	2b00      	cmp	r3, #0
 800448a:	d064      	beq.n	8004556 <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a08      	ldr	r2, [pc, #32]	; (80044b4 <HAL_SD_ReadBlocks+0x2d4>)
 8004492:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004498:	f043 0220 	orr.w	r2, r3, #32
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	2201      	movs	r2, #1
 80044a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	2200      	movs	r2, #0
 80044ac:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80044ae:	2301      	movs	r3, #1
 80044b0:	e06d      	b.n	800458e <HAL_SD_ReadBlocks+0x3ae>
 80044b2:	bf00      	nop
 80044b4:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4618      	mov	r0, r3
 80044be:	f001 fff4 	bl	80064aa <SDIO_ReadFIFO>
 80044c2:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 80044c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044c6:	b2da      	uxtb	r2, r3
 80044c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044ca:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80044cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044ce:	3301      	adds	r3, #1
 80044d0:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80044d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044d4:	3b01      	subs	r3, #1
 80044d6:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80044d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044da:	0a1b      	lsrs	r3, r3, #8
 80044dc:	b2da      	uxtb	r2, r3
 80044de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044e0:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80044e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044e4:	3301      	adds	r3, #1
 80044e6:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80044e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044ea:	3b01      	subs	r3, #1
 80044ec:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80044ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044f0:	0c1b      	lsrs	r3, r3, #16
 80044f2:	b2da      	uxtb	r2, r3
 80044f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044f6:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80044f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044fa:	3301      	adds	r3, #1
 80044fc:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80044fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004500:	3b01      	subs	r3, #1
 8004502:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8004504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004506:	0e1b      	lsrs	r3, r3, #24
 8004508:	b2da      	uxtb	r2, r3
 800450a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800450c:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800450e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004510:	3301      	adds	r3, #1
 8004512:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8004514:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004516:	3b01      	subs	r3, #1
 8004518:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800451a:	f7fc ff3b 	bl	8001394 <HAL_GetTick>
 800451e:	4602      	mov	r2, r0
 8004520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004522:	1ad3      	subs	r3, r2, r3
 8004524:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004526:	429a      	cmp	r2, r3
 8004528:	d902      	bls.n	8004530 <HAL_SD_ReadBlocks+0x350>
 800452a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800452c:	2b00      	cmp	r3, #0
 800452e:	d112      	bne.n	8004556 <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4a18      	ldr	r2, [pc, #96]	; (8004598 <HAL_SD_ReadBlocks+0x3b8>)
 8004536:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800453c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	2201      	movs	r2, #1
 8004548:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	2200      	movs	r2, #0
 8004550:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8004552:	2301      	movs	r3, #1
 8004554:	e01b      	b.n	800458e <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800455c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004560:	2b00      	cmp	r3, #0
 8004562:	d002      	beq.n	800456a <HAL_SD_ReadBlocks+0x38a>
 8004564:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004566:	2b00      	cmp	r3, #0
 8004568:	d1a6      	bne.n	80044b8 <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f240 523a 	movw	r2, #1338	; 0x53a
 8004572:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	2201      	movs	r2, #1
 8004578:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800457c:	2300      	movs	r3, #0
 800457e:	e006      	b.n	800458e <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004584:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800458c:	2301      	movs	r3, #1
  }
}
 800458e:	4618      	mov	r0, r3
 8004590:	3748      	adds	r7, #72	; 0x48
 8004592:	46bd      	mov	sp, r7
 8004594:	bd80      	pop	{r7, pc}
 8004596:	bf00      	nop
 8004598:	004005ff 	.word	0x004005ff

0800459c <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b092      	sub	sp, #72	; 0x48
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	60f8      	str	r0, [r7, #12]
 80045a4:	60b9      	str	r1, [r7, #8]
 80045a6:	607a      	str	r2, [r7, #4]
 80045a8:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80045aa:	f7fc fef3 	bl	8001394 <HAL_GetTick>
 80045ae:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d107      	bne.n	80045ce <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045c2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80045ca:	2301      	movs	r3, #1
 80045cc:	e165      	b.n	800489a <HAL_SD_WriteBlocks+0x2fe>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80045d4:	b2db      	uxtb	r3, r3
 80045d6:	2b01      	cmp	r3, #1
 80045d8:	f040 8158 	bne.w	800488c <HAL_SD_WriteBlocks+0x2f0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	2200      	movs	r2, #0
 80045e0:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80045e2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	441a      	add	r2, r3
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045ec:	429a      	cmp	r2, r3
 80045ee:	d907      	bls.n	8004600 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045f4:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80045fc:	2301      	movs	r3, #1
 80045fe:	e14c      	b.n	800489a <HAL_SD_WriteBlocks+0x2fe>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	2203      	movs	r2, #3
 8004604:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	2200      	movs	r2, #0
 800460e:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004614:	2b01      	cmp	r3, #1
 8004616:	d002      	beq.n	800461e <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8004618:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800461a:	025b      	lsls	r3, r3, #9
 800461c:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800461e:	f04f 33ff 	mov.w	r3, #4294967295
 8004622:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	025b      	lsls	r3, r3, #9
 8004628:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800462a:	2390      	movs	r3, #144	; 0x90
 800462c:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800462e:	2300      	movs	r3, #0
 8004630:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8004632:	2300      	movs	r3, #0
 8004634:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 8004636:	2301      	movs	r3, #1
 8004638:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f107 0218 	add.w	r2, r7, #24
 8004642:	4611      	mov	r1, r2
 8004644:	4618      	mov	r0, r3
 8004646:	f001 ffb4 	bl	80065b2 <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	2b01      	cmp	r3, #1
 800464e:	d90a      	bls.n	8004666 <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	2220      	movs	r2, #32
 8004654:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800465c:	4618      	mov	r0, r3
 800465e:	f002 f85c 	bl	800671a <SDMMC_CmdWriteMultiBlock>
 8004662:	6478      	str	r0, [r7, #68]	; 0x44
 8004664:	e009      	b.n	800467a <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	2210      	movs	r2, #16
 800466a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004672:	4618      	mov	r0, r3
 8004674:	f002 f82f 	bl	80066d6 <SDMMC_CmdWriteSingleBlock>
 8004678:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800467a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800467c:	2b00      	cmp	r3, #0
 800467e:	d012      	beq.n	80046a6 <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4a87      	ldr	r2, [pc, #540]	; (80048a4 <HAL_SD_WriteBlocks+0x308>)
 8004686:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800468c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800468e:	431a      	orrs	r2, r3
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	2201      	movs	r2, #1
 8004698:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	2200      	movs	r2, #0
 80046a0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80046a2:	2301      	movs	r3, #1
 80046a4:	e0f9      	b.n	800489a <HAL_SD_WriteBlocks+0x2fe>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 80046a6:	69fb      	ldr	r3, [r7, #28]
 80046a8:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 80046aa:	e065      	b.n	8004778 <HAL_SD_WriteBlocks+0x1dc>
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d040      	beq.n	800473c <HAL_SD_WriteBlocks+0x1a0>
 80046ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d03d      	beq.n	800473c <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 80046c0:	2300      	movs	r3, #0
 80046c2:	643b      	str	r3, [r7, #64]	; 0x40
 80046c4:	e037      	b.n	8004736 <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 80046c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046c8:	781b      	ldrb	r3, [r3, #0]
 80046ca:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80046cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046ce:	3301      	adds	r3, #1
 80046d0:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80046d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046d4:	3b01      	subs	r3, #1
 80046d6:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 80046d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046da:	781b      	ldrb	r3, [r3, #0]
 80046dc:	021a      	lsls	r2, r3, #8
 80046de:	697b      	ldr	r3, [r7, #20]
 80046e0:	4313      	orrs	r3, r2
 80046e2:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80046e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046e6:	3301      	adds	r3, #1
 80046e8:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80046ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046ec:	3b01      	subs	r3, #1
 80046ee:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 80046f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046f2:	781b      	ldrb	r3, [r3, #0]
 80046f4:	041a      	lsls	r2, r3, #16
 80046f6:	697b      	ldr	r3, [r7, #20]
 80046f8:	4313      	orrs	r3, r2
 80046fa:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80046fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046fe:	3301      	adds	r3, #1
 8004700:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8004702:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004704:	3b01      	subs	r3, #1
 8004706:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8004708:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800470a:	781b      	ldrb	r3, [r3, #0]
 800470c:	061a      	lsls	r2, r3, #24
 800470e:	697b      	ldr	r3, [r7, #20]
 8004710:	4313      	orrs	r3, r2
 8004712:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8004714:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004716:	3301      	adds	r3, #1
 8004718:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800471a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800471c:	3b01      	subs	r3, #1
 800471e:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f107 0214 	add.w	r2, r7, #20
 8004728:	4611      	mov	r1, r2
 800472a:	4618      	mov	r0, r3
 800472c:	f001 feca 	bl	80064c4 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8004730:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004732:	3301      	adds	r3, #1
 8004734:	643b      	str	r3, [r7, #64]	; 0x40
 8004736:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004738:	2b07      	cmp	r3, #7
 800473a:	d9c4      	bls.n	80046c6 <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800473c:	f7fc fe2a 	bl	8001394 <HAL_GetTick>
 8004740:	4602      	mov	r2, r0
 8004742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004744:	1ad3      	subs	r3, r2, r3
 8004746:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004748:	429a      	cmp	r2, r3
 800474a:	d902      	bls.n	8004752 <HAL_SD_WriteBlocks+0x1b6>
 800474c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800474e:	2b00      	cmp	r3, #0
 8004750:	d112      	bne.n	8004778 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4a53      	ldr	r2, [pc, #332]	; (80048a4 <HAL_SD_WriteBlocks+0x308>)
 8004758:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800475e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004760:	431a      	orrs	r2, r3
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	2201      	movs	r2, #1
 800476a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	2200      	movs	r2, #0
 8004772:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8004774:	2303      	movs	r3, #3
 8004776:	e090      	b.n	800489a <HAL_SD_WriteBlocks+0x2fe>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800477e:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 8004782:	2b00      	cmp	r3, #0
 8004784:	d092      	beq.n	80046ac <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800478c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004790:	2b00      	cmp	r3, #0
 8004792:	d022      	beq.n	80047da <HAL_SD_WriteBlocks+0x23e>
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	2b01      	cmp	r3, #1
 8004798:	d91f      	bls.n	80047da <HAL_SD_WriteBlocks+0x23e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800479e:	2b03      	cmp	r3, #3
 80047a0:	d01b      	beq.n	80047da <HAL_SD_WriteBlocks+0x23e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4618      	mov	r0, r3
 80047a8:	f001 ffda 	bl	8006760 <SDMMC_CmdStopTransfer>
 80047ac:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80047ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d012      	beq.n	80047da <HAL_SD_WriteBlocks+0x23e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a3a      	ldr	r2, [pc, #232]	; (80048a4 <HAL_SD_WriteBlocks+0x308>)
 80047ba:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80047c2:	431a      	orrs	r2, r3
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	2201      	movs	r2, #1
 80047cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	2200      	movs	r2, #0
 80047d4:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 80047d6:	2301      	movs	r3, #1
 80047d8:	e05f      	b.n	800489a <HAL_SD_WriteBlocks+0x2fe>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047e0:	f003 0308 	and.w	r3, r3, #8
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d012      	beq.n	800480e <HAL_SD_WriteBlocks+0x272>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4a2d      	ldr	r2, [pc, #180]	; (80048a4 <HAL_SD_WriteBlocks+0x308>)
 80047ee:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047f4:	f043 0208 	orr.w	r2, r3, #8
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	2201      	movs	r2, #1
 8004800:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	2200      	movs	r2, #0
 8004808:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800480a:	2301      	movs	r3, #1
 800480c:	e045      	b.n	800489a <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004814:	f003 0302 	and.w	r3, r3, #2
 8004818:	2b00      	cmp	r3, #0
 800481a:	d012      	beq.n	8004842 <HAL_SD_WriteBlocks+0x2a6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4a20      	ldr	r2, [pc, #128]	; (80048a4 <HAL_SD_WriteBlocks+0x308>)
 8004822:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004828:	f043 0202 	orr.w	r2, r3, #2
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	2201      	movs	r2, #1
 8004834:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	2200      	movs	r2, #0
 800483c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800483e:	2301      	movs	r3, #1
 8004840:	e02b      	b.n	800489a <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004848:	f003 0310 	and.w	r3, r3, #16
 800484c:	2b00      	cmp	r3, #0
 800484e:	d012      	beq.n	8004876 <HAL_SD_WriteBlocks+0x2da>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a13      	ldr	r2, [pc, #76]	; (80048a4 <HAL_SD_WriteBlocks+0x308>)
 8004856:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800485c:	f043 0210 	orr.w	r2, r3, #16
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	2201      	movs	r2, #1
 8004868:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	2200      	movs	r2, #0
 8004870:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004872:	2301      	movs	r3, #1
 8004874:	e011      	b.n	800489a <HAL_SD_WriteBlocks+0x2fe>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f240 523a 	movw	r2, #1338	; 0x53a
 800487e:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	2201      	movs	r2, #1
 8004884:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8004888:	2300      	movs	r3, #0
 800488a:	e006      	b.n	800489a <HAL_SD_WriteBlocks+0x2fe>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004890:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004898:	2301      	movs	r3, #1
  }
}
 800489a:	4618      	mov	r0, r3
 800489c:	3748      	adds	r7, #72	; 0x48
 800489e:	46bd      	mov	sp, r7
 80048a0:	bd80      	pop	{r7, pc}
 80048a2:	bf00      	nop
 80048a4:	004005ff 	.word	0x004005ff

080048a8 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80048a8:	b480      	push	{r7}
 80048aa:	b083      	sub	sp, #12
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
 80048b0:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80048b6:	0f9b      	lsrs	r3, r3, #30
 80048b8:	b2da      	uxtb	r2, r3
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80048c2:	0e9b      	lsrs	r3, r3, #26
 80048c4:	b2db      	uxtb	r3, r3
 80048c6:	f003 030f 	and.w	r3, r3, #15
 80048ca:	b2da      	uxtb	r2, r3
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80048d4:	0e1b      	lsrs	r3, r3, #24
 80048d6:	b2db      	uxtb	r3, r3
 80048d8:	f003 0303 	and.w	r3, r3, #3
 80048dc:	b2da      	uxtb	r2, r3
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80048e6:	0c1b      	lsrs	r3, r3, #16
 80048e8:	b2da      	uxtb	r2, r3
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80048f2:	0a1b      	lsrs	r3, r3, #8
 80048f4:	b2da      	uxtb	r2, r3
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80048fe:	b2da      	uxtb	r2, r3
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004908:	0d1b      	lsrs	r3, r3, #20
 800490a:	b29a      	uxth	r2, r3
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004914:	0c1b      	lsrs	r3, r3, #16
 8004916:	b2db      	uxtb	r3, r3
 8004918:	f003 030f 	and.w	r3, r3, #15
 800491c:	b2da      	uxtb	r2, r3
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004926:	0bdb      	lsrs	r3, r3, #15
 8004928:	b2db      	uxtb	r3, r3
 800492a:	f003 0301 	and.w	r3, r3, #1
 800492e:	b2da      	uxtb	r2, r3
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004938:	0b9b      	lsrs	r3, r3, #14
 800493a:	b2db      	uxtb	r3, r3
 800493c:	f003 0301 	and.w	r3, r3, #1
 8004940:	b2da      	uxtb	r2, r3
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800494a:	0b5b      	lsrs	r3, r3, #13
 800494c:	b2db      	uxtb	r3, r3
 800494e:	f003 0301 	and.w	r3, r3, #1
 8004952:	b2da      	uxtb	r2, r3
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800495c:	0b1b      	lsrs	r3, r3, #12
 800495e:	b2db      	uxtb	r3, r3
 8004960:	f003 0301 	and.w	r3, r3, #1
 8004964:	b2da      	uxtb	r2, r3
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	2200      	movs	r2, #0
 800496e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004974:	2b00      	cmp	r3, #0
 8004976:	d163      	bne.n	8004a40 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800497c:	009a      	lsls	r2, r3, #2
 800497e:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004982:	4013      	ands	r3, r2
 8004984:	687a      	ldr	r2, [r7, #4]
 8004986:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8004988:	0f92      	lsrs	r2, r2, #30
 800498a:	431a      	orrs	r2, r3
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004994:	0edb      	lsrs	r3, r3, #27
 8004996:	b2db      	uxtb	r3, r3
 8004998:	f003 0307 	and.w	r3, r3, #7
 800499c:	b2da      	uxtb	r2, r3
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80049a6:	0e1b      	lsrs	r3, r3, #24
 80049a8:	b2db      	uxtb	r3, r3
 80049aa:	f003 0307 	and.w	r3, r3, #7
 80049ae:	b2da      	uxtb	r2, r3
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80049b8:	0d5b      	lsrs	r3, r3, #21
 80049ba:	b2db      	uxtb	r3, r3
 80049bc:	f003 0307 	and.w	r3, r3, #7
 80049c0:	b2da      	uxtb	r2, r3
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80049ca:	0c9b      	lsrs	r3, r3, #18
 80049cc:	b2db      	uxtb	r3, r3
 80049ce:	f003 0307 	and.w	r3, r3, #7
 80049d2:	b2da      	uxtb	r2, r3
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80049dc:	0bdb      	lsrs	r3, r3, #15
 80049de:	b2db      	uxtb	r3, r3
 80049e0:	f003 0307 	and.w	r3, r3, #7
 80049e4:	b2da      	uxtb	r2, r3
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	691b      	ldr	r3, [r3, #16]
 80049ee:	1c5a      	adds	r2, r3, #1
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	7e1b      	ldrb	r3, [r3, #24]
 80049f8:	b2db      	uxtb	r3, r3
 80049fa:	f003 0307 	and.w	r3, r3, #7
 80049fe:	3302      	adds	r3, #2
 8004a00:	2201      	movs	r2, #1
 8004a02:	fa02 f303 	lsl.w	r3, r2, r3
 8004a06:	687a      	ldr	r2, [r7, #4]
 8004a08:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8004a0a:	fb03 f202 	mul.w	r2, r3, r2
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	7a1b      	ldrb	r3, [r3, #8]
 8004a16:	b2db      	uxtb	r3, r3
 8004a18:	f003 030f 	and.w	r3, r3, #15
 8004a1c:	2201      	movs	r2, #1
 8004a1e:	409a      	lsls	r2, r3
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a28:	687a      	ldr	r2, [r7, #4]
 8004a2a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8004a2c:	0a52      	lsrs	r2, r2, #9
 8004a2e:	fb03 f202 	mul.w	r2, r3, r2
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a3c:	661a      	str	r2, [r3, #96]	; 0x60
 8004a3e:	e031      	b.n	8004aa4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a44:	2b01      	cmp	r3, #1
 8004a46:	d11d      	bne.n	8004a84 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004a4c:	041b      	lsls	r3, r3, #16
 8004a4e:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a56:	0c1b      	lsrs	r3, r3, #16
 8004a58:	431a      	orrs	r2, r3
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	691b      	ldr	r3, [r3, #16]
 8004a62:	3301      	adds	r3, #1
 8004a64:	029a      	lsls	r2, r3, #10
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a78:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	661a      	str	r2, [r3, #96]	; 0x60
 8004a82:	e00f      	b.n	8004aa4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a58      	ldr	r2, [pc, #352]	; (8004bec <HAL_SD_GetCardCSD+0x344>)
 8004a8a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a90:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2201      	movs	r2, #1
 8004a9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	e09d      	b.n	8004be0 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004aa8:	0b9b      	lsrs	r3, r3, #14
 8004aaa:	b2db      	uxtb	r3, r3
 8004aac:	f003 0301 	and.w	r3, r3, #1
 8004ab0:	b2da      	uxtb	r2, r3
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004aba:	09db      	lsrs	r3, r3, #7
 8004abc:	b2db      	uxtb	r3, r3
 8004abe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ac2:	b2da      	uxtb	r2, r3
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004acc:	b2db      	uxtb	r3, r3
 8004ace:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ad2:	b2da      	uxtb	r2, r3
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004adc:	0fdb      	lsrs	r3, r3, #31
 8004ade:	b2da      	uxtb	r2, r3
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ae8:	0f5b      	lsrs	r3, r3, #29
 8004aea:	b2db      	uxtb	r3, r3
 8004aec:	f003 0303 	and.w	r3, r3, #3
 8004af0:	b2da      	uxtb	r2, r3
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004afa:	0e9b      	lsrs	r3, r3, #26
 8004afc:	b2db      	uxtb	r3, r3
 8004afe:	f003 0307 	and.w	r3, r3, #7
 8004b02:	b2da      	uxtb	r2, r3
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b0c:	0d9b      	lsrs	r3, r3, #22
 8004b0e:	b2db      	uxtb	r3, r3
 8004b10:	f003 030f 	and.w	r3, r3, #15
 8004b14:	b2da      	uxtb	r2, r3
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b1e:	0d5b      	lsrs	r3, r3, #21
 8004b20:	b2db      	uxtb	r3, r3
 8004b22:	f003 0301 	and.w	r3, r3, #1
 8004b26:	b2da      	uxtb	r2, r3
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	2200      	movs	r2, #0
 8004b32:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b3a:	0c1b      	lsrs	r3, r3, #16
 8004b3c:	b2db      	uxtb	r3, r3
 8004b3e:	f003 0301 	and.w	r3, r3, #1
 8004b42:	b2da      	uxtb	r2, r3
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b4e:	0bdb      	lsrs	r3, r3, #15
 8004b50:	b2db      	uxtb	r3, r3
 8004b52:	f003 0301 	and.w	r3, r3, #1
 8004b56:	b2da      	uxtb	r2, r3
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b62:	0b9b      	lsrs	r3, r3, #14
 8004b64:	b2db      	uxtb	r3, r3
 8004b66:	f003 0301 	and.w	r3, r3, #1
 8004b6a:	b2da      	uxtb	r2, r3
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b76:	0b5b      	lsrs	r3, r3, #13
 8004b78:	b2db      	uxtb	r3, r3
 8004b7a:	f003 0301 	and.w	r3, r3, #1
 8004b7e:	b2da      	uxtb	r2, r3
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b8a:	0b1b      	lsrs	r3, r3, #12
 8004b8c:	b2db      	uxtb	r3, r3
 8004b8e:	f003 0301 	and.w	r3, r3, #1
 8004b92:	b2da      	uxtb	r2, r3
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b9e:	0a9b      	lsrs	r3, r3, #10
 8004ba0:	b2db      	uxtb	r3, r3
 8004ba2:	f003 0303 	and.w	r3, r3, #3
 8004ba6:	b2da      	uxtb	r2, r3
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bb2:	0a1b      	lsrs	r3, r3, #8
 8004bb4:	b2db      	uxtb	r3, r3
 8004bb6:	f003 0303 	and.w	r3, r3, #3
 8004bba:	b2da      	uxtb	r2, r3
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bc6:	085b      	lsrs	r3, r3, #1
 8004bc8:	b2db      	uxtb	r3, r3
 8004bca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004bce:	b2da      	uxtb	r2, r3
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	2201      	movs	r2, #1
 8004bda:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8004bde:	2300      	movs	r3, #0
}
 8004be0:	4618      	mov	r0, r3
 8004be2:	370c      	adds	r7, #12
 8004be4:	46bd      	mov	sp, r7
 8004be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bea:	4770      	bx	lr
 8004bec:	004005ff 	.word	0x004005ff

08004bf0 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8004bf0:	b480      	push	{r7}
 8004bf2:	b083      	sub	sp, #12
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
 8004bf8:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8004c3a:	2300      	movs	r3, #0
}
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	370c      	adds	r7, #12
 8004c40:	46bd      	mov	sp, r7
 8004c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c46:	4770      	bx	lr

08004c48 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8004c48:	b5b0      	push	{r4, r5, r7, lr}
 8004c4a:	b08e      	sub	sp, #56	; 0x38
 8004c4c:	af04      	add	r7, sp, #16
 8004c4e:	6078      	str	r0, [r7, #4]
 8004c50:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8004c52:	2300      	movs	r3, #0
 8004c54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2203      	movs	r2, #3
 8004c5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c64:	2b03      	cmp	r3, #3
 8004c66:	d02e      	beq.n	8004cc6 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c6e:	d106      	bne.n	8004c7e <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c74:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	639a      	str	r2, [r3, #56]	; 0x38
 8004c7c:	e029      	b.n	8004cd2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c84:	d10a      	bne.n	8004c9c <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8004c86:	6878      	ldr	r0, [r7, #4]
 8004c88:	f000 fa1c 	bl	80050c4 <SD_WideBus_Enable>
 8004c8c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c92:	6a3b      	ldr	r3, [r7, #32]
 8004c94:	431a      	orrs	r2, r3
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	639a      	str	r2, [r3, #56]	; 0x38
 8004c9a:	e01a      	b.n	8004cd2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d10a      	bne.n	8004cb8 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8004ca2:	6878      	ldr	r0, [r7, #4]
 8004ca4:	f000 fa59 	bl	800515a <SD_WideBus_Disable>
 8004ca8:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004cae:	6a3b      	ldr	r3, [r7, #32]
 8004cb0:	431a      	orrs	r2, r3
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	639a      	str	r2, [r3, #56]	; 0x38
 8004cb6:	e00c      	b.n	8004cd2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cbc:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	639a      	str	r2, [r3, #56]	; 0x38
 8004cc4:	e005      	b.n	8004cd2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cca:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d00b      	beq.n	8004cf2 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4a26      	ldr	r2, [pc, #152]	; (8004d78 <HAL_SD_ConfigWideBusOperation+0x130>)
 8004ce0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2201      	movs	r2, #1
 8004ce6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8004cea:	2301      	movs	r3, #1
 8004cec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004cf0:	e01f      	b.n	8004d32 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	685b      	ldr	r3, [r3, #4]
 8004cf6:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	689b      	ldr	r3, [r3, #8]
 8004cfc:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	68db      	ldr	r3, [r3, #12]
 8004d02:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	695b      	ldr	r3, [r3, #20]
 8004d0c:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	699b      	ldr	r3, [r3, #24]
 8004d12:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681d      	ldr	r5, [r3, #0]
 8004d18:	466c      	mov	r4, sp
 8004d1a:	f107 0314 	add.w	r3, r7, #20
 8004d1e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004d22:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004d26:	f107 0308 	add.w	r3, r7, #8
 8004d2a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004d2c:	4628      	mov	r0, r5
 8004d2e:	f001 fb91 	bl	8006454 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	f001 fc65 	bl	800660a <SDMMC_CmdBlockLength>
 8004d40:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004d42:	6a3b      	ldr	r3, [r7, #32]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d00c      	beq.n	8004d62 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4a0a      	ldr	r2, [pc, #40]	; (8004d78 <HAL_SD_ConfigWideBusOperation+0x130>)
 8004d4e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d54:	6a3b      	ldr	r3, [r7, #32]
 8004d56:	431a      	orrs	r2, r3
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2201      	movs	r2, #1
 8004d66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8004d6a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004d6e:	4618      	mov	r0, r3
 8004d70:	3728      	adds	r7, #40	; 0x28
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bdb0      	pop	{r4, r5, r7, pc}
 8004d76:	bf00      	nop
 8004d78:	004005ff 	.word	0x004005ff

08004d7c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b086      	sub	sp, #24
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8004d84:	2300      	movs	r3, #0
 8004d86:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8004d88:	f107 030c 	add.w	r3, r7, #12
 8004d8c:	4619      	mov	r1, r3
 8004d8e:	6878      	ldr	r0, [r7, #4]
 8004d90:	f000 f970 	bl	8005074 <SD_SendStatus>
 8004d94:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004d96:	697b      	ldr	r3, [r7, #20]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d005      	beq.n	8004da8 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004da0:	697b      	ldr	r3, [r7, #20]
 8004da2:	431a      	orrs	r2, r3
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	0a5b      	lsrs	r3, r3, #9
 8004dac:	f003 030f 	and.w	r3, r3, #15
 8004db0:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8004db2:	693b      	ldr	r3, [r7, #16]
}
 8004db4:	4618      	mov	r0, r3
 8004db6:	3718      	adds	r7, #24
 8004db8:	46bd      	mov	sp, r7
 8004dba:	bd80      	pop	{r7, pc}

08004dbc <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8004dbc:	b5b0      	push	{r4, r5, r7, lr}
 8004dbe:	b094      	sub	sp, #80	; 0x50
 8004dc0:	af04      	add	r7, sp, #16
 8004dc2:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4618      	mov	r0, r3
 8004dce:	f001 fb98 	bl	8006502 <SDIO_GetPowerState>
 8004dd2:	4603      	mov	r3, r0
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d102      	bne.n	8004dde <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004dd8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004ddc:	e0b8      	b.n	8004f50 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004de2:	2b03      	cmp	r3, #3
 8004de4:	d02f      	beq.n	8004e46 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4618      	mov	r0, r3
 8004dec:	f001 fdc2 	bl	8006974 <SDMMC_CmdSendCID>
 8004df0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004df2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d001      	beq.n	8004dfc <SD_InitCard+0x40>
    {
      return errorstate;
 8004df8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004dfa:	e0a9      	b.n	8004f50 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	2100      	movs	r1, #0
 8004e02:	4618      	mov	r0, r3
 8004e04:	f001 fbc2 	bl	800658c <SDIO_GetResponse>
 8004e08:	4602      	mov	r2, r0
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	2104      	movs	r1, #4
 8004e14:	4618      	mov	r0, r3
 8004e16:	f001 fbb9 	bl	800658c <SDIO_GetResponse>
 8004e1a:	4602      	mov	r2, r0
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	2108      	movs	r1, #8
 8004e26:	4618      	mov	r0, r3
 8004e28:	f001 fbb0 	bl	800658c <SDIO_GetResponse>
 8004e2c:	4602      	mov	r2, r0
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	210c      	movs	r1, #12
 8004e38:	4618      	mov	r0, r3
 8004e3a:	f001 fba7 	bl	800658c <SDIO_GetResponse>
 8004e3e:	4602      	mov	r2, r0
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e4a:	2b03      	cmp	r3, #3
 8004e4c:	d00d      	beq.n	8004e6a <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f107 020e 	add.w	r2, r7, #14
 8004e56:	4611      	mov	r1, r2
 8004e58:	4618      	mov	r0, r3
 8004e5a:	f001 fdc8 	bl	80069ee <SDMMC_CmdSetRelAdd>
 8004e5e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004e60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d001      	beq.n	8004e6a <SD_InitCard+0xae>
    {
      return errorstate;
 8004e66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e68:	e072      	b.n	8004f50 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e6e:	2b03      	cmp	r3, #3
 8004e70:	d036      	beq.n	8004ee0 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8004e72:	89fb      	ldrh	r3, [r7, #14]
 8004e74:	461a      	mov	r2, r3
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681a      	ldr	r2, [r3, #0]
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e82:	041b      	lsls	r3, r3, #16
 8004e84:	4619      	mov	r1, r3
 8004e86:	4610      	mov	r0, r2
 8004e88:	f001 fd92 	bl	80069b0 <SDMMC_CmdSendCSD>
 8004e8c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004e8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d001      	beq.n	8004e98 <SD_InitCard+0xdc>
    {
      return errorstate;
 8004e94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e96:	e05b      	b.n	8004f50 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	2100      	movs	r1, #0
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	f001 fb74 	bl	800658c <SDIO_GetResponse>
 8004ea4:	4602      	mov	r2, r0
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	2104      	movs	r1, #4
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	f001 fb6b 	bl	800658c <SDIO_GetResponse>
 8004eb6:	4602      	mov	r2, r0
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	2108      	movs	r1, #8
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	f001 fb62 	bl	800658c <SDIO_GetResponse>
 8004ec8:	4602      	mov	r2, r0
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	210c      	movs	r1, #12
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	f001 fb59 	bl	800658c <SDIO_GetResponse>
 8004eda:	4602      	mov	r2, r0
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	2104      	movs	r1, #4
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	f001 fb50 	bl	800658c <SDIO_GetResponse>
 8004eec:	4603      	mov	r3, r0
 8004eee:	0d1a      	lsrs	r2, r3, #20
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8004ef4:	f107 0310 	add.w	r3, r7, #16
 8004ef8:	4619      	mov	r1, r3
 8004efa:	6878      	ldr	r0, [r7, #4]
 8004efc:	f7ff fcd4 	bl	80048a8 <HAL_SD_GetCardCSD>
 8004f00:	4603      	mov	r3, r0
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d002      	beq.n	8004f0c <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004f06:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004f0a:	e021      	b.n	8004f50 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6819      	ldr	r1, [r3, #0]
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f14:	041b      	lsls	r3, r3, #16
 8004f16:	2200      	movs	r2, #0
 8004f18:	461c      	mov	r4, r3
 8004f1a:	4615      	mov	r5, r2
 8004f1c:	4622      	mov	r2, r4
 8004f1e:	462b      	mov	r3, r5
 8004f20:	4608      	mov	r0, r1
 8004f22:	f001 fc3f 	bl	80067a4 <SDMMC_CmdSelDesel>
 8004f26:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8004f28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d001      	beq.n	8004f32 <SD_InitCard+0x176>
  {
    return errorstate;
 8004f2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f30:	e00e      	b.n	8004f50 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681d      	ldr	r5, [r3, #0]
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	466c      	mov	r4, sp
 8004f3a:	f103 0210 	add.w	r2, r3, #16
 8004f3e:	ca07      	ldmia	r2, {r0, r1, r2}
 8004f40:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004f44:	3304      	adds	r3, #4
 8004f46:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004f48:	4628      	mov	r0, r5
 8004f4a:	f001 fa83 	bl	8006454 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8004f4e:	2300      	movs	r3, #0
}
 8004f50:	4618      	mov	r0, r3
 8004f52:	3740      	adds	r7, #64	; 0x40
 8004f54:	46bd      	mov	sp, r7
 8004f56:	bdb0      	pop	{r4, r5, r7, pc}

08004f58 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b086      	sub	sp, #24
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004f60:	2300      	movs	r3, #0
 8004f62:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8004f64:	2300      	movs	r3, #0
 8004f66:	617b      	str	r3, [r7, #20]
 8004f68:	2300      	movs	r3, #0
 8004f6a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4618      	mov	r0, r3
 8004f72:	f001 fc3a 	bl	80067ea <SDMMC_CmdGoIdleState>
 8004f76:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d001      	beq.n	8004f82 <SD_PowerON+0x2a>
  {
    return errorstate;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	e072      	b.n	8005068 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4618      	mov	r0, r3
 8004f88:	f001 fc4d 	bl	8006826 <SDMMC_CmdOperCond>
 8004f8c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d00d      	beq.n	8004fb0 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2200      	movs	r2, #0
 8004f98:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	f001 fc23 	bl	80067ea <SDMMC_CmdGoIdleState>
 8004fa4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d004      	beq.n	8004fb6 <SD_PowerON+0x5e>
    {
      return errorstate;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	e05b      	b.n	8005068 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2201      	movs	r2, #1
 8004fb4:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fba:	2b01      	cmp	r3, #1
 8004fbc:	d137      	bne.n	800502e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	2100      	movs	r1, #0
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	f001 fc4d 	bl	8006864 <SDMMC_CmdAppCommand>
 8004fca:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d02d      	beq.n	800502e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004fd2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004fd6:	e047      	b.n	8005068 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	2100      	movs	r1, #0
 8004fde:	4618      	mov	r0, r3
 8004fe0:	f001 fc40 	bl	8006864 <SDMMC_CmdAppCommand>
 8004fe4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d001      	beq.n	8004ff0 <SD_PowerON+0x98>
    {
      return errorstate;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	e03b      	b.n	8005068 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	491e      	ldr	r1, [pc, #120]	; (8005070 <SD_PowerON+0x118>)
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	f001 fc56 	bl	80068a8 <SDMMC_CmdAppOperCommand>
 8004ffc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d002      	beq.n	800500a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005004:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005008:	e02e      	b.n	8005068 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	2100      	movs	r1, #0
 8005010:	4618      	mov	r0, r3
 8005012:	f001 fabb 	bl	800658c <SDIO_GetResponse>
 8005016:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8005018:	697b      	ldr	r3, [r7, #20]
 800501a:	0fdb      	lsrs	r3, r3, #31
 800501c:	2b01      	cmp	r3, #1
 800501e:	d101      	bne.n	8005024 <SD_PowerON+0xcc>
 8005020:	2301      	movs	r3, #1
 8005022:	e000      	b.n	8005026 <SD_PowerON+0xce>
 8005024:	2300      	movs	r3, #0
 8005026:	613b      	str	r3, [r7, #16]

    count++;
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	3301      	adds	r3, #1
 800502c:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800502e:	68bb      	ldr	r3, [r7, #8]
 8005030:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8005034:	4293      	cmp	r3, r2
 8005036:	d802      	bhi.n	800503e <SD_PowerON+0xe6>
 8005038:	693b      	ldr	r3, [r7, #16]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d0cc      	beq.n	8004fd8 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800503e:	68bb      	ldr	r3, [r7, #8]
 8005040:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8005044:	4293      	cmp	r3, r2
 8005046:	d902      	bls.n	800504e <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8005048:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800504c:	e00c      	b.n	8005068 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800504e:	697b      	ldr	r3, [r7, #20]
 8005050:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005054:	2b00      	cmp	r3, #0
 8005056:	d003      	beq.n	8005060 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2201      	movs	r2, #1
 800505c:	645a      	str	r2, [r3, #68]	; 0x44
 800505e:	e002      	b.n	8005066 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2200      	movs	r2, #0
 8005064:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8005066:	2300      	movs	r3, #0
}
 8005068:	4618      	mov	r0, r3
 800506a:	3718      	adds	r7, #24
 800506c:	46bd      	mov	sp, r7
 800506e:	bd80      	pop	{r7, pc}
 8005070:	c1100000 	.word	0xc1100000

08005074 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b084      	sub	sp, #16
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
 800507c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d102      	bne.n	800508a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8005084:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005088:	e018      	b.n	80050bc <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681a      	ldr	r2, [r3, #0]
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005092:	041b      	lsls	r3, r3, #16
 8005094:	4619      	mov	r1, r3
 8005096:	4610      	mov	r0, r2
 8005098:	f001 fcca 	bl	8006a30 <SDMMC_CmdSendStatus>
 800509c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d001      	beq.n	80050a8 <SD_SendStatus+0x34>
  {
    return errorstate;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	e009      	b.n	80050bc <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	2100      	movs	r1, #0
 80050ae:	4618      	mov	r0, r3
 80050b0:	f001 fa6c 	bl	800658c <SDIO_GetResponse>
 80050b4:	4602      	mov	r2, r0
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80050ba:	2300      	movs	r3, #0
}
 80050bc:	4618      	mov	r0, r3
 80050be:	3710      	adds	r7, #16
 80050c0:	46bd      	mov	sp, r7
 80050c2:	bd80      	pop	{r7, pc}

080050c4 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b086      	sub	sp, #24
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80050cc:	2300      	movs	r3, #0
 80050ce:	60fb      	str	r3, [r7, #12]
 80050d0:	2300      	movs	r3, #0
 80050d2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	2100      	movs	r1, #0
 80050da:	4618      	mov	r0, r3
 80050dc:	f001 fa56 	bl	800658c <SDIO_GetResponse>
 80050e0:	4603      	mov	r3, r0
 80050e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050e6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80050ea:	d102      	bne.n	80050f2 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80050ec:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80050f0:	e02f      	b.n	8005152 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80050f2:	f107 030c 	add.w	r3, r7, #12
 80050f6:	4619      	mov	r1, r3
 80050f8:	6878      	ldr	r0, [r7, #4]
 80050fa:	f000 f879 	bl	80051f0 <SD_FindSCR>
 80050fe:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005100:	697b      	ldr	r3, [r7, #20]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d001      	beq.n	800510a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8005106:	697b      	ldr	r3, [r7, #20]
 8005108:	e023      	b.n	8005152 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800510a:	693b      	ldr	r3, [r7, #16]
 800510c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005110:	2b00      	cmp	r3, #0
 8005112:	d01c      	beq.n	800514e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681a      	ldr	r2, [r3, #0]
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800511c:	041b      	lsls	r3, r3, #16
 800511e:	4619      	mov	r1, r3
 8005120:	4610      	mov	r0, r2
 8005122:	f001 fb9f 	bl	8006864 <SDMMC_CmdAppCommand>
 8005126:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005128:	697b      	ldr	r3, [r7, #20]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d001      	beq.n	8005132 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800512e:	697b      	ldr	r3, [r7, #20]
 8005130:	e00f      	b.n	8005152 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	2102      	movs	r1, #2
 8005138:	4618      	mov	r0, r3
 800513a:	f001 fbd8 	bl	80068ee <SDMMC_CmdBusWidth>
 800513e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005140:	697b      	ldr	r3, [r7, #20]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d001      	beq.n	800514a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8005146:	697b      	ldr	r3, [r7, #20]
 8005148:	e003      	b.n	8005152 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800514a:	2300      	movs	r3, #0
 800514c:	e001      	b.n	8005152 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800514e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8005152:	4618      	mov	r0, r3
 8005154:	3718      	adds	r7, #24
 8005156:	46bd      	mov	sp, r7
 8005158:	bd80      	pop	{r7, pc}

0800515a <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800515a:	b580      	push	{r7, lr}
 800515c:	b086      	sub	sp, #24
 800515e:	af00      	add	r7, sp, #0
 8005160:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8005162:	2300      	movs	r3, #0
 8005164:	60fb      	str	r3, [r7, #12]
 8005166:	2300      	movs	r3, #0
 8005168:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	2100      	movs	r1, #0
 8005170:	4618      	mov	r0, r3
 8005172:	f001 fa0b 	bl	800658c <SDIO_GetResponse>
 8005176:	4603      	mov	r3, r0
 8005178:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800517c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005180:	d102      	bne.n	8005188 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8005182:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005186:	e02f      	b.n	80051e8 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8005188:	f107 030c 	add.w	r3, r7, #12
 800518c:	4619      	mov	r1, r3
 800518e:	6878      	ldr	r0, [r7, #4]
 8005190:	f000 f82e 	bl	80051f0 <SD_FindSCR>
 8005194:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005196:	697b      	ldr	r3, [r7, #20]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d001      	beq.n	80051a0 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800519c:	697b      	ldr	r3, [r7, #20]
 800519e:	e023      	b.n	80051e8 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80051a0:	693b      	ldr	r3, [r7, #16]
 80051a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d01c      	beq.n	80051e4 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681a      	ldr	r2, [r3, #0]
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051b2:	041b      	lsls	r3, r3, #16
 80051b4:	4619      	mov	r1, r3
 80051b6:	4610      	mov	r0, r2
 80051b8:	f001 fb54 	bl	8006864 <SDMMC_CmdAppCommand>
 80051bc:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80051be:	697b      	ldr	r3, [r7, #20]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d001      	beq.n	80051c8 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80051c4:	697b      	ldr	r3, [r7, #20]
 80051c6:	e00f      	b.n	80051e8 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	2100      	movs	r1, #0
 80051ce:	4618      	mov	r0, r3
 80051d0:	f001 fb8d 	bl	80068ee <SDMMC_CmdBusWidth>
 80051d4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80051d6:	697b      	ldr	r3, [r7, #20]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d001      	beq.n	80051e0 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80051dc:	697b      	ldr	r3, [r7, #20]
 80051de:	e003      	b.n	80051e8 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80051e0:	2300      	movs	r3, #0
 80051e2:	e001      	b.n	80051e8 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80051e4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80051e8:	4618      	mov	r0, r3
 80051ea:	3718      	adds	r7, #24
 80051ec:	46bd      	mov	sp, r7
 80051ee:	bd80      	pop	{r7, pc}

080051f0 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80051f0:	b590      	push	{r4, r7, lr}
 80051f2:	b08f      	sub	sp, #60	; 0x3c
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
 80051f8:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80051fa:	f7fc f8cb 	bl	8001394 <HAL_GetTick>
 80051fe:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8005200:	2300      	movs	r3, #0
 8005202:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8005204:	2300      	movs	r3, #0
 8005206:	60bb      	str	r3, [r7, #8]
 8005208:	2300      	movs	r3, #0
 800520a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	2108      	movs	r1, #8
 8005216:	4618      	mov	r0, r3
 8005218:	f001 f9f7 	bl	800660a <SDMMC_CmdBlockLength>
 800521c:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800521e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005220:	2b00      	cmp	r3, #0
 8005222:	d001      	beq.n	8005228 <SD_FindSCR+0x38>
  {
    return errorstate;
 8005224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005226:	e0b2      	b.n	800538e <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681a      	ldr	r2, [r3, #0]
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005230:	041b      	lsls	r3, r3, #16
 8005232:	4619      	mov	r1, r3
 8005234:	4610      	mov	r0, r2
 8005236:	f001 fb15 	bl	8006864 <SDMMC_CmdAppCommand>
 800523a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800523c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800523e:	2b00      	cmp	r3, #0
 8005240:	d001      	beq.n	8005246 <SD_FindSCR+0x56>
  {
    return errorstate;
 8005242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005244:	e0a3      	b.n	800538e <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005246:	f04f 33ff 	mov.w	r3, #4294967295
 800524a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800524c:	2308      	movs	r3, #8
 800524e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8005250:	2330      	movs	r3, #48	; 0x30
 8005252:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8005254:	2302      	movs	r3, #2
 8005256:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8005258:	2300      	movs	r3, #0
 800525a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 800525c:	2301      	movs	r3, #1
 800525e:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f107 0210 	add.w	r2, r7, #16
 8005268:	4611      	mov	r1, r2
 800526a:	4618      	mov	r0, r3
 800526c:	f001 f9a1 	bl	80065b2 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4618      	mov	r0, r3
 8005276:	f001 fb5c 	bl	8006932 <SDMMC_CmdSendSCR>
 800527a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800527c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800527e:	2b00      	cmp	r3, #0
 8005280:	d02a      	beq.n	80052d8 <SD_FindSCR+0xe8>
  {
    return errorstate;
 8005282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005284:	e083      	b.n	800538e <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800528c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005290:	2b00      	cmp	r3, #0
 8005292:	d00f      	beq.n	80052b4 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6819      	ldr	r1, [r3, #0]
 8005298:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800529a:	009b      	lsls	r3, r3, #2
 800529c:	f107 0208 	add.w	r2, r7, #8
 80052a0:	18d4      	adds	r4, r2, r3
 80052a2:	4608      	mov	r0, r1
 80052a4:	f001 f901 	bl	80064aa <SDIO_ReadFIFO>
 80052a8:	4603      	mov	r3, r0
 80052aa:	6023      	str	r3, [r4, #0]
      index++;
 80052ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052ae:	3301      	adds	r3, #1
 80052b0:	637b      	str	r3, [r7, #52]	; 0x34
 80052b2:	e006      	b.n	80052c2 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d012      	beq.n	80052e8 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80052c2:	f7fc f867 	bl	8001394 <HAL_GetTick>
 80052c6:	4602      	mov	r2, r0
 80052c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052ca:	1ad3      	subs	r3, r2, r3
 80052cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052d0:	d102      	bne.n	80052d8 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80052d2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80052d6:	e05a      	b.n	800538e <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052de:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d0cf      	beq.n	8005286 <SD_FindSCR+0x96>
 80052e6:	e000      	b.n	80052ea <SD_FindSCR+0xfa>
      break;
 80052e8:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052f0:	f003 0308 	and.w	r3, r3, #8
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d005      	beq.n	8005304 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	2208      	movs	r2, #8
 80052fe:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8005300:	2308      	movs	r3, #8
 8005302:	e044      	b.n	800538e <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800530a:	f003 0302 	and.w	r3, r3, #2
 800530e:	2b00      	cmp	r3, #0
 8005310:	d005      	beq.n	800531e <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	2202      	movs	r2, #2
 8005318:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800531a:	2302      	movs	r3, #2
 800531c:	e037      	b.n	800538e <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005324:	f003 0320 	and.w	r3, r3, #32
 8005328:	2b00      	cmp	r3, #0
 800532a:	d005      	beq.n	8005338 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	2220      	movs	r2, #32
 8005332:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8005334:	2320      	movs	r3, #32
 8005336:	e02a      	b.n	800538e <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f240 523a 	movw	r2, #1338	; 0x53a
 8005340:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	061a      	lsls	r2, r3, #24
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	021b      	lsls	r3, r3, #8
 800534a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800534e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	0a1b      	lsrs	r3, r3, #8
 8005354:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8005358:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	0e1b      	lsrs	r3, r3, #24
 800535e:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8005360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005362:	601a      	str	r2, [r3, #0]
    scr++;
 8005364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005366:	3304      	adds	r3, #4
 8005368:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800536a:	68bb      	ldr	r3, [r7, #8]
 800536c:	061a      	lsls	r2, r3, #24
 800536e:	68bb      	ldr	r3, [r7, #8]
 8005370:	021b      	lsls	r3, r3, #8
 8005372:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005376:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8005378:	68bb      	ldr	r3, [r7, #8]
 800537a:	0a1b      	lsrs	r3, r3, #8
 800537c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8005380:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8005382:	68bb      	ldr	r3, [r7, #8]
 8005384:	0e1b      	lsrs	r3, r3, #24
 8005386:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8005388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800538a:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800538c:	2300      	movs	r3, #0
}
 800538e:	4618      	mov	r0, r3
 8005390:	373c      	adds	r7, #60	; 0x3c
 8005392:	46bd      	mov	sp, r7
 8005394:	bd90      	pop	{r4, r7, pc}

08005396 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005396:	b580      	push	{r7, lr}
 8005398:	b082      	sub	sp, #8
 800539a:	af00      	add	r7, sp, #0
 800539c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d101      	bne.n	80053a8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80053a4:	2301      	movs	r3, #1
 80053a6:	e03f      	b.n	8005428 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053ae:	b2db      	uxtb	r3, r3
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d106      	bne.n	80053c2 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2200      	movs	r2, #0
 80053b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80053bc:	6878      	ldr	r0, [r7, #4]
 80053be:	f7fb fdef 	bl	8000fa0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2224      	movs	r2, #36	; 0x24
 80053c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	68da      	ldr	r2, [r3, #12]
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80053d8:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80053da:	6878      	ldr	r0, [r7, #4]
 80053dc:	f000 fdc6 	bl	8005f6c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	691a      	ldr	r2, [r3, #16]
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80053ee:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	695a      	ldr	r2, [r3, #20]
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80053fe:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	68da      	ldr	r2, [r3, #12]
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800540e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2200      	movs	r2, #0
 8005414:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2220      	movs	r2, #32
 800541a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2220      	movs	r2, #32
 8005422:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005426:	2300      	movs	r3, #0
}
 8005428:	4618      	mov	r0, r3
 800542a:	3708      	adds	r7, #8
 800542c:	46bd      	mov	sp, r7
 800542e:	bd80      	pop	{r7, pc}

08005430 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b08c      	sub	sp, #48	; 0x30
 8005434:	af00      	add	r7, sp, #0
 8005436:	60f8      	str	r0, [r7, #12]
 8005438:	60b9      	str	r1, [r7, #8]
 800543a:	4613      	mov	r3, r2
 800543c:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005444:	b2db      	uxtb	r3, r3
 8005446:	2b20      	cmp	r3, #32
 8005448:	d165      	bne.n	8005516 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 800544a:	68bb      	ldr	r3, [r7, #8]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d002      	beq.n	8005456 <HAL_UART_Transmit_DMA+0x26>
 8005450:	88fb      	ldrh	r3, [r7, #6]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d101      	bne.n	800545a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8005456:	2301      	movs	r3, #1
 8005458:	e05e      	b.n	8005518 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005460:	2b01      	cmp	r3, #1
 8005462:	d101      	bne.n	8005468 <HAL_UART_Transmit_DMA+0x38>
 8005464:	2302      	movs	r3, #2
 8005466:	e057      	b.n	8005518 <HAL_UART_Transmit_DMA+0xe8>
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	2201      	movs	r2, #1
 800546c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8005470:	68ba      	ldr	r2, [r7, #8]
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	88fa      	ldrh	r2, [r7, #6]
 800547a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	88fa      	ldrh	r2, [r7, #6]
 8005480:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	2200      	movs	r2, #0
 8005486:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	2221      	movs	r2, #33	; 0x21
 800548c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005494:	4a22      	ldr	r2, [pc, #136]	; (8005520 <HAL_UART_Transmit_DMA+0xf0>)
 8005496:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800549c:	4a21      	ldr	r2, [pc, #132]	; (8005524 <HAL_UART_Transmit_DMA+0xf4>)
 800549e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054a4:	4a20      	ldr	r2, [pc, #128]	; (8005528 <HAL_UART_Transmit_DMA+0xf8>)
 80054a6:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054ac:	2200      	movs	r2, #0
 80054ae:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 80054b0:	f107 0308 	add.w	r3, r7, #8
 80054b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80054ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054bc:	6819      	ldr	r1, [r3, #0]
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	3304      	adds	r3, #4
 80054c4:	461a      	mov	r2, r3
 80054c6:	88fb      	ldrh	r3, [r7, #6]
 80054c8:	f7fc f954 	bl	8001774 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80054d4:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	2200      	movs	r2, #0
 80054da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	3314      	adds	r3, #20
 80054e4:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054e6:	69bb      	ldr	r3, [r7, #24]
 80054e8:	e853 3f00 	ldrex	r3, [r3]
 80054ec:	617b      	str	r3, [r7, #20]
   return(result);
 80054ee:	697b      	ldr	r3, [r7, #20]
 80054f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	3314      	adds	r3, #20
 80054fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80054fe:	627a      	str	r2, [r7, #36]	; 0x24
 8005500:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005502:	6a39      	ldr	r1, [r7, #32]
 8005504:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005506:	e841 2300 	strex	r3, r2, [r1]
 800550a:	61fb      	str	r3, [r7, #28]
   return(result);
 800550c:	69fb      	ldr	r3, [r7, #28]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d1e5      	bne.n	80054de <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8005512:	2300      	movs	r3, #0
 8005514:	e000      	b.n	8005518 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8005516:	2302      	movs	r3, #2
  }
}
 8005518:	4618      	mov	r0, r3
 800551a:	3730      	adds	r7, #48	; 0x30
 800551c:	46bd      	mov	sp, r7
 800551e:	bd80      	pop	{r7, pc}
 8005520:	08005a9d 	.word	0x08005a9d
 8005524:	08005b37 	.word	0x08005b37
 8005528:	08005b53 	.word	0x08005b53

0800552c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800552c:	b580      	push	{r7, lr}
 800552e:	b0ba      	sub	sp, #232	; 0xe8
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	68db      	ldr	r3, [r3, #12]
 8005544:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	695b      	ldr	r3, [r3, #20]
 800554e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005552:	2300      	movs	r3, #0
 8005554:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005558:	2300      	movs	r3, #0
 800555a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800555e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005562:	f003 030f 	and.w	r3, r3, #15
 8005566:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800556a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800556e:	2b00      	cmp	r3, #0
 8005570:	d10f      	bne.n	8005592 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005572:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005576:	f003 0320 	and.w	r3, r3, #32
 800557a:	2b00      	cmp	r3, #0
 800557c:	d009      	beq.n	8005592 <HAL_UART_IRQHandler+0x66>
 800557e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005582:	f003 0320 	and.w	r3, r3, #32
 8005586:	2b00      	cmp	r3, #0
 8005588:	d003      	beq.n	8005592 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800558a:	6878      	ldr	r0, [r7, #4]
 800558c:	f000 fc32 	bl	8005df4 <UART_Receive_IT>
      return;
 8005590:	e256      	b.n	8005a40 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005592:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005596:	2b00      	cmp	r3, #0
 8005598:	f000 80de 	beq.w	8005758 <HAL_UART_IRQHandler+0x22c>
 800559c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80055a0:	f003 0301 	and.w	r3, r3, #1
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d106      	bne.n	80055b6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80055a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80055ac:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	f000 80d1 	beq.w	8005758 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80055b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055ba:	f003 0301 	and.w	r3, r3, #1
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d00b      	beq.n	80055da <HAL_UART_IRQHandler+0xae>
 80055c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80055c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d005      	beq.n	80055da <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055d2:	f043 0201 	orr.w	r2, r3, #1
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80055da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055de:	f003 0304 	and.w	r3, r3, #4
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d00b      	beq.n	80055fe <HAL_UART_IRQHandler+0xd2>
 80055e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80055ea:	f003 0301 	and.w	r3, r3, #1
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d005      	beq.n	80055fe <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055f6:	f043 0202 	orr.w	r2, r3, #2
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80055fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005602:	f003 0302 	and.w	r3, r3, #2
 8005606:	2b00      	cmp	r3, #0
 8005608:	d00b      	beq.n	8005622 <HAL_UART_IRQHandler+0xf6>
 800560a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800560e:	f003 0301 	and.w	r3, r3, #1
 8005612:	2b00      	cmp	r3, #0
 8005614:	d005      	beq.n	8005622 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800561a:	f043 0204 	orr.w	r2, r3, #4
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005622:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005626:	f003 0308 	and.w	r3, r3, #8
 800562a:	2b00      	cmp	r3, #0
 800562c:	d011      	beq.n	8005652 <HAL_UART_IRQHandler+0x126>
 800562e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005632:	f003 0320 	and.w	r3, r3, #32
 8005636:	2b00      	cmp	r3, #0
 8005638:	d105      	bne.n	8005646 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800563a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800563e:	f003 0301 	and.w	r3, r3, #1
 8005642:	2b00      	cmp	r3, #0
 8005644:	d005      	beq.n	8005652 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800564a:	f043 0208 	orr.w	r2, r3, #8
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005656:	2b00      	cmp	r3, #0
 8005658:	f000 81ed 	beq.w	8005a36 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800565c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005660:	f003 0320 	and.w	r3, r3, #32
 8005664:	2b00      	cmp	r3, #0
 8005666:	d008      	beq.n	800567a <HAL_UART_IRQHandler+0x14e>
 8005668:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800566c:	f003 0320 	and.w	r3, r3, #32
 8005670:	2b00      	cmp	r3, #0
 8005672:	d002      	beq.n	800567a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005674:	6878      	ldr	r0, [r7, #4]
 8005676:	f000 fbbd 	bl	8005df4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	695b      	ldr	r3, [r3, #20]
 8005680:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005684:	2b40      	cmp	r3, #64	; 0x40
 8005686:	bf0c      	ite	eq
 8005688:	2301      	moveq	r3, #1
 800568a:	2300      	movne	r3, #0
 800568c:	b2db      	uxtb	r3, r3
 800568e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005696:	f003 0308 	and.w	r3, r3, #8
 800569a:	2b00      	cmp	r3, #0
 800569c:	d103      	bne.n	80056a6 <HAL_UART_IRQHandler+0x17a>
 800569e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d04f      	beq.n	8005746 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80056a6:	6878      	ldr	r0, [r7, #4]
 80056a8:	f000 fac5 	bl	8005c36 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	695b      	ldr	r3, [r3, #20]
 80056b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056b6:	2b40      	cmp	r3, #64	; 0x40
 80056b8:	d141      	bne.n	800573e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	3314      	adds	r3, #20
 80056c0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80056c8:	e853 3f00 	ldrex	r3, [r3]
 80056cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80056d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80056d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056d8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	3314      	adds	r3, #20
 80056e2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80056e6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80056ea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056ee:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80056f2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80056f6:	e841 2300 	strex	r3, r2, [r1]
 80056fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80056fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005702:	2b00      	cmp	r3, #0
 8005704:	d1d9      	bne.n	80056ba <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800570a:	2b00      	cmp	r3, #0
 800570c:	d013      	beq.n	8005736 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005712:	4a7d      	ldr	r2, [pc, #500]	; (8005908 <HAL_UART_IRQHandler+0x3dc>)
 8005714:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800571a:	4618      	mov	r0, r3
 800571c:	f7fc f8f2 	bl	8001904 <HAL_DMA_Abort_IT>
 8005720:	4603      	mov	r3, r0
 8005722:	2b00      	cmp	r3, #0
 8005724:	d016      	beq.n	8005754 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800572a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800572c:	687a      	ldr	r2, [r7, #4]
 800572e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005730:	4610      	mov	r0, r2
 8005732:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005734:	e00e      	b.n	8005754 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005736:	6878      	ldr	r0, [r7, #4]
 8005738:	f000 f99a 	bl	8005a70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800573c:	e00a      	b.n	8005754 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800573e:	6878      	ldr	r0, [r7, #4]
 8005740:	f000 f996 	bl	8005a70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005744:	e006      	b.n	8005754 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005746:	6878      	ldr	r0, [r7, #4]
 8005748:	f000 f992 	bl	8005a70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2200      	movs	r2, #0
 8005750:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005752:	e170      	b.n	8005a36 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005754:	bf00      	nop
    return;
 8005756:	e16e      	b.n	8005a36 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800575c:	2b01      	cmp	r3, #1
 800575e:	f040 814a 	bne.w	80059f6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005762:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005766:	f003 0310 	and.w	r3, r3, #16
 800576a:	2b00      	cmp	r3, #0
 800576c:	f000 8143 	beq.w	80059f6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005770:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005774:	f003 0310 	and.w	r3, r3, #16
 8005778:	2b00      	cmp	r3, #0
 800577a:	f000 813c 	beq.w	80059f6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800577e:	2300      	movs	r3, #0
 8005780:	60bb      	str	r3, [r7, #8]
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	60bb      	str	r3, [r7, #8]
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	685b      	ldr	r3, [r3, #4]
 8005790:	60bb      	str	r3, [r7, #8]
 8005792:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	695b      	ldr	r3, [r3, #20]
 800579a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800579e:	2b40      	cmp	r3, #64	; 0x40
 80057a0:	f040 80b4 	bne.w	800590c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	685b      	ldr	r3, [r3, #4]
 80057ac:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80057b0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	f000 8140 	beq.w	8005a3a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80057be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80057c2:	429a      	cmp	r2, r3
 80057c4:	f080 8139 	bcs.w	8005a3a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80057ce:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057d4:	69db      	ldr	r3, [r3, #28]
 80057d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057da:	f000 8088 	beq.w	80058ee <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	330c      	adds	r3, #12
 80057e4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80057ec:	e853 3f00 	ldrex	r3, [r3]
 80057f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80057f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80057f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80057fc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	330c      	adds	r3, #12
 8005806:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800580a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800580e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005812:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005816:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800581a:	e841 2300 	strex	r3, r2, [r1]
 800581e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005822:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005826:	2b00      	cmp	r3, #0
 8005828:	d1d9      	bne.n	80057de <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	3314      	adds	r3, #20
 8005830:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005832:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005834:	e853 3f00 	ldrex	r3, [r3]
 8005838:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800583a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800583c:	f023 0301 	bic.w	r3, r3, #1
 8005840:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	3314      	adds	r3, #20
 800584a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800584e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005852:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005854:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005856:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800585a:	e841 2300 	strex	r3, r2, [r1]
 800585e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005860:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005862:	2b00      	cmp	r3, #0
 8005864:	d1e1      	bne.n	800582a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	3314      	adds	r3, #20
 800586c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800586e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005870:	e853 3f00 	ldrex	r3, [r3]
 8005874:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005876:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005878:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800587c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	3314      	adds	r3, #20
 8005886:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800588a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800588c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800588e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005890:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005892:	e841 2300 	strex	r3, r2, [r1]
 8005896:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005898:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800589a:	2b00      	cmp	r3, #0
 800589c:	d1e3      	bne.n	8005866 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2220      	movs	r2, #32
 80058a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2200      	movs	r2, #0
 80058aa:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	330c      	adds	r3, #12
 80058b2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058b6:	e853 3f00 	ldrex	r3, [r3]
 80058ba:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80058bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80058be:	f023 0310 	bic.w	r3, r3, #16
 80058c2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	330c      	adds	r3, #12
 80058cc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80058d0:	65ba      	str	r2, [r7, #88]	; 0x58
 80058d2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058d4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80058d6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80058d8:	e841 2300 	strex	r3, r2, [r1]
 80058dc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80058de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d1e3      	bne.n	80058ac <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058e8:	4618      	mov	r0, r3
 80058ea:	f7fb ff9b 	bl	8001824 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80058f6:	b29b      	uxth	r3, r3
 80058f8:	1ad3      	subs	r3, r2, r3
 80058fa:	b29b      	uxth	r3, r3
 80058fc:	4619      	mov	r1, r3
 80058fe:	6878      	ldr	r0, [r7, #4]
 8005900:	f000 f8c0 	bl	8005a84 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005904:	e099      	b.n	8005a3a <HAL_UART_IRQHandler+0x50e>
 8005906:	bf00      	nop
 8005908:	08005cfd 	.word	0x08005cfd
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005914:	b29b      	uxth	r3, r3
 8005916:	1ad3      	subs	r3, r2, r3
 8005918:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005920:	b29b      	uxth	r3, r3
 8005922:	2b00      	cmp	r3, #0
 8005924:	f000 808b 	beq.w	8005a3e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005928:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800592c:	2b00      	cmp	r3, #0
 800592e:	f000 8086 	beq.w	8005a3e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	330c      	adds	r3, #12
 8005938:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800593a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800593c:	e853 3f00 	ldrex	r3, [r3]
 8005940:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005942:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005944:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005948:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	330c      	adds	r3, #12
 8005952:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005956:	647a      	str	r2, [r7, #68]	; 0x44
 8005958:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800595a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800595c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800595e:	e841 2300 	strex	r3, r2, [r1]
 8005962:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005964:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005966:	2b00      	cmp	r3, #0
 8005968:	d1e3      	bne.n	8005932 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	3314      	adds	r3, #20
 8005970:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005974:	e853 3f00 	ldrex	r3, [r3]
 8005978:	623b      	str	r3, [r7, #32]
   return(result);
 800597a:	6a3b      	ldr	r3, [r7, #32]
 800597c:	f023 0301 	bic.w	r3, r3, #1
 8005980:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	3314      	adds	r3, #20
 800598a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800598e:	633a      	str	r2, [r7, #48]	; 0x30
 8005990:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005992:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005994:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005996:	e841 2300 	strex	r3, r2, [r1]
 800599a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800599c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d1e3      	bne.n	800596a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2220      	movs	r2, #32
 80059a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2200      	movs	r2, #0
 80059ae:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	330c      	adds	r3, #12
 80059b6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059b8:	693b      	ldr	r3, [r7, #16]
 80059ba:	e853 3f00 	ldrex	r3, [r3]
 80059be:	60fb      	str	r3, [r7, #12]
   return(result);
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	f023 0310 	bic.w	r3, r3, #16
 80059c6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	330c      	adds	r3, #12
 80059d0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80059d4:	61fa      	str	r2, [r7, #28]
 80059d6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059d8:	69b9      	ldr	r1, [r7, #24]
 80059da:	69fa      	ldr	r2, [r7, #28]
 80059dc:	e841 2300 	strex	r3, r2, [r1]
 80059e0:	617b      	str	r3, [r7, #20]
   return(result);
 80059e2:	697b      	ldr	r3, [r7, #20]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d1e3      	bne.n	80059b0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80059e8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80059ec:	4619      	mov	r1, r3
 80059ee:	6878      	ldr	r0, [r7, #4]
 80059f0:	f000 f848 	bl	8005a84 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80059f4:	e023      	b.n	8005a3e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80059f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d009      	beq.n	8005a16 <HAL_UART_IRQHandler+0x4ea>
 8005a02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d003      	beq.n	8005a16 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005a0e:	6878      	ldr	r0, [r7, #4]
 8005a10:	f000 f988 	bl	8005d24 <UART_Transmit_IT>
    return;
 8005a14:	e014      	b.n	8005a40 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005a16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d00e      	beq.n	8005a40 <HAL_UART_IRQHandler+0x514>
 8005a22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d008      	beq.n	8005a40 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005a2e:	6878      	ldr	r0, [r7, #4]
 8005a30:	f000 f9c8 	bl	8005dc4 <UART_EndTransmit_IT>
    return;
 8005a34:	e004      	b.n	8005a40 <HAL_UART_IRQHandler+0x514>
    return;
 8005a36:	bf00      	nop
 8005a38:	e002      	b.n	8005a40 <HAL_UART_IRQHandler+0x514>
      return;
 8005a3a:	bf00      	nop
 8005a3c:	e000      	b.n	8005a40 <HAL_UART_IRQHandler+0x514>
      return;
 8005a3e:	bf00      	nop
  }
}
 8005a40:	37e8      	adds	r7, #232	; 0xe8
 8005a42:	46bd      	mov	sp, r7
 8005a44:	bd80      	pop	{r7, pc}
 8005a46:	bf00      	nop

08005a48 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005a48:	b480      	push	{r7}
 8005a4a:	b083      	sub	sp, #12
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8005a50:	bf00      	nop
 8005a52:	370c      	adds	r7, #12
 8005a54:	46bd      	mov	sp, r7
 8005a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5a:	4770      	bx	lr

08005a5c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005a5c:	b480      	push	{r7}
 8005a5e:	b083      	sub	sp, #12
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005a64:	bf00      	nop
 8005a66:	370c      	adds	r7, #12
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6e:	4770      	bx	lr

08005a70 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005a70:	b480      	push	{r7}
 8005a72:	b083      	sub	sp, #12
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005a78:	bf00      	nop
 8005a7a:	370c      	adds	r7, #12
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a82:	4770      	bx	lr

08005a84 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005a84:	b480      	push	{r7}
 8005a86:	b083      	sub	sp, #12
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
 8005a8c:	460b      	mov	r3, r1
 8005a8e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005a90:	bf00      	nop
 8005a92:	370c      	adds	r7, #12
 8005a94:	46bd      	mov	sp, r7
 8005a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9a:	4770      	bx	lr

08005a9c <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b090      	sub	sp, #64	; 0x40
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aa8:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d137      	bne.n	8005b28 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8005ab8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005aba:	2200      	movs	r2, #0
 8005abc:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005abe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	3314      	adds	r3, #20
 8005ac4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ac8:	e853 3f00 	ldrex	r3, [r3]
 8005acc:	623b      	str	r3, [r7, #32]
   return(result);
 8005ace:	6a3b      	ldr	r3, [r7, #32]
 8005ad0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ad4:	63bb      	str	r3, [r7, #56]	; 0x38
 8005ad6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	3314      	adds	r3, #20
 8005adc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005ade:	633a      	str	r2, [r7, #48]	; 0x30
 8005ae0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ae2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005ae4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ae6:	e841 2300 	strex	r3, r2, [r1]
 8005aea:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005aec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d1e5      	bne.n	8005abe <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005af2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	330c      	adds	r3, #12
 8005af8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005afa:	693b      	ldr	r3, [r7, #16]
 8005afc:	e853 3f00 	ldrex	r3, [r3]
 8005b00:	60fb      	str	r3, [r7, #12]
   return(result);
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005b08:	637b      	str	r3, [r7, #52]	; 0x34
 8005b0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	330c      	adds	r3, #12
 8005b10:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005b12:	61fa      	str	r2, [r7, #28]
 8005b14:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b16:	69b9      	ldr	r1, [r7, #24]
 8005b18:	69fa      	ldr	r2, [r7, #28]
 8005b1a:	e841 2300 	strex	r3, r2, [r1]
 8005b1e:	617b      	str	r3, [r7, #20]
   return(result);
 8005b20:	697b      	ldr	r3, [r7, #20]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d1e5      	bne.n	8005af2 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005b26:	e002      	b.n	8005b2e <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8005b28:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8005b2a:	f7fb f901 	bl	8000d30 <HAL_UART_TxCpltCallback>
}
 8005b2e:	bf00      	nop
 8005b30:	3740      	adds	r7, #64	; 0x40
 8005b32:	46bd      	mov	sp, r7
 8005b34:	bd80      	pop	{r7, pc}

08005b36 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005b36:	b580      	push	{r7, lr}
 8005b38:	b084      	sub	sp, #16
 8005b3a:	af00      	add	r7, sp, #0
 8005b3c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b42:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8005b44:	68f8      	ldr	r0, [r7, #12]
 8005b46:	f7ff ff7f 	bl	8005a48 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005b4a:	bf00      	nop
 8005b4c:	3710      	adds	r7, #16
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	bd80      	pop	{r7, pc}

08005b52 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005b52:	b580      	push	{r7, lr}
 8005b54:	b084      	sub	sp, #16
 8005b56:	af00      	add	r7, sp, #0
 8005b58:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b62:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005b64:	68bb      	ldr	r3, [r7, #8]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	695b      	ldr	r3, [r3, #20]
 8005b6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b6e:	2b80      	cmp	r3, #128	; 0x80
 8005b70:	bf0c      	ite	eq
 8005b72:	2301      	moveq	r3, #1
 8005b74:	2300      	movne	r3, #0
 8005b76:	b2db      	uxtb	r3, r3
 8005b78:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005b7a:	68bb      	ldr	r3, [r7, #8]
 8005b7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b80:	b2db      	uxtb	r3, r3
 8005b82:	2b21      	cmp	r3, #33	; 0x21
 8005b84:	d108      	bne.n	8005b98 <UART_DMAError+0x46>
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d005      	beq.n	8005b98 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	2200      	movs	r2, #0
 8005b90:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8005b92:	68b8      	ldr	r0, [r7, #8]
 8005b94:	f000 f827 	bl	8005be6 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005b98:	68bb      	ldr	r3, [r7, #8]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	695b      	ldr	r3, [r3, #20]
 8005b9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ba2:	2b40      	cmp	r3, #64	; 0x40
 8005ba4:	bf0c      	ite	eq
 8005ba6:	2301      	moveq	r3, #1
 8005ba8:	2300      	movne	r3, #0
 8005baa:	b2db      	uxtb	r3, r3
 8005bac:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005bae:	68bb      	ldr	r3, [r7, #8]
 8005bb0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005bb4:	b2db      	uxtb	r3, r3
 8005bb6:	2b22      	cmp	r3, #34	; 0x22
 8005bb8:	d108      	bne.n	8005bcc <UART_DMAError+0x7a>
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d005      	beq.n	8005bcc <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005bc0:	68bb      	ldr	r3, [r7, #8]
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8005bc6:	68b8      	ldr	r0, [r7, #8]
 8005bc8:	f000 f835 	bl	8005c36 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005bcc:	68bb      	ldr	r3, [r7, #8]
 8005bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bd0:	f043 0210 	orr.w	r2, r3, #16
 8005bd4:	68bb      	ldr	r3, [r7, #8]
 8005bd6:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005bd8:	68b8      	ldr	r0, [r7, #8]
 8005bda:	f7ff ff49 	bl	8005a70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005bde:	bf00      	nop
 8005be0:	3710      	adds	r7, #16
 8005be2:	46bd      	mov	sp, r7
 8005be4:	bd80      	pop	{r7, pc}

08005be6 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005be6:	b480      	push	{r7}
 8005be8:	b089      	sub	sp, #36	; 0x24
 8005bea:	af00      	add	r7, sp, #0
 8005bec:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	330c      	adds	r3, #12
 8005bf4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	e853 3f00 	ldrex	r3, [r3]
 8005bfc:	60bb      	str	r3, [r7, #8]
   return(result);
 8005bfe:	68bb      	ldr	r3, [r7, #8]
 8005c00:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005c04:	61fb      	str	r3, [r7, #28]
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	330c      	adds	r3, #12
 8005c0c:	69fa      	ldr	r2, [r7, #28]
 8005c0e:	61ba      	str	r2, [r7, #24]
 8005c10:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c12:	6979      	ldr	r1, [r7, #20]
 8005c14:	69ba      	ldr	r2, [r7, #24]
 8005c16:	e841 2300 	strex	r3, r2, [r1]
 8005c1a:	613b      	str	r3, [r7, #16]
   return(result);
 8005c1c:	693b      	ldr	r3, [r7, #16]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d1e5      	bne.n	8005bee <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2220      	movs	r2, #32
 8005c26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8005c2a:	bf00      	nop
 8005c2c:	3724      	adds	r7, #36	; 0x24
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c34:	4770      	bx	lr

08005c36 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005c36:	b480      	push	{r7}
 8005c38:	b095      	sub	sp, #84	; 0x54
 8005c3a:	af00      	add	r7, sp, #0
 8005c3c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	330c      	adds	r3, #12
 8005c44:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c48:	e853 3f00 	ldrex	r3, [r3]
 8005c4c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c50:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005c54:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	330c      	adds	r3, #12
 8005c5c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005c5e:	643a      	str	r2, [r7, #64]	; 0x40
 8005c60:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c62:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005c64:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005c66:	e841 2300 	strex	r3, r2, [r1]
 8005c6a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005c6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d1e5      	bne.n	8005c3e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	3314      	adds	r3, #20
 8005c78:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c7a:	6a3b      	ldr	r3, [r7, #32]
 8005c7c:	e853 3f00 	ldrex	r3, [r3]
 8005c80:	61fb      	str	r3, [r7, #28]
   return(result);
 8005c82:	69fb      	ldr	r3, [r7, #28]
 8005c84:	f023 0301 	bic.w	r3, r3, #1
 8005c88:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	3314      	adds	r3, #20
 8005c90:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005c92:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005c94:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c96:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005c98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c9a:	e841 2300 	strex	r3, r2, [r1]
 8005c9e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d1e5      	bne.n	8005c72 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005caa:	2b01      	cmp	r3, #1
 8005cac:	d119      	bne.n	8005ce2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	330c      	adds	r3, #12
 8005cb4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	e853 3f00 	ldrex	r3, [r3]
 8005cbc:	60bb      	str	r3, [r7, #8]
   return(result);
 8005cbe:	68bb      	ldr	r3, [r7, #8]
 8005cc0:	f023 0310 	bic.w	r3, r3, #16
 8005cc4:	647b      	str	r3, [r7, #68]	; 0x44
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	330c      	adds	r3, #12
 8005ccc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005cce:	61ba      	str	r2, [r7, #24]
 8005cd0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cd2:	6979      	ldr	r1, [r7, #20]
 8005cd4:	69ba      	ldr	r2, [r7, #24]
 8005cd6:	e841 2300 	strex	r3, r2, [r1]
 8005cda:	613b      	str	r3, [r7, #16]
   return(result);
 8005cdc:	693b      	ldr	r3, [r7, #16]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d1e5      	bne.n	8005cae <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2220      	movs	r2, #32
 8005ce6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2200      	movs	r2, #0
 8005cee:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005cf0:	bf00      	nop
 8005cf2:	3754      	adds	r7, #84	; 0x54
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfa:	4770      	bx	lr

08005cfc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b084      	sub	sp, #16
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d08:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	2200      	movs	r2, #0
 8005d14:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005d16:	68f8      	ldr	r0, [r7, #12]
 8005d18:	f7ff feaa 	bl	8005a70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005d1c:	bf00      	nop
 8005d1e:	3710      	adds	r7, #16
 8005d20:	46bd      	mov	sp, r7
 8005d22:	bd80      	pop	{r7, pc}

08005d24 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005d24:	b480      	push	{r7}
 8005d26:	b085      	sub	sp, #20
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d32:	b2db      	uxtb	r3, r3
 8005d34:	2b21      	cmp	r3, #33	; 0x21
 8005d36:	d13e      	bne.n	8005db6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	689b      	ldr	r3, [r3, #8]
 8005d3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d40:	d114      	bne.n	8005d6c <UART_Transmit_IT+0x48>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	691b      	ldr	r3, [r3, #16]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d110      	bne.n	8005d6c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6a1b      	ldr	r3, [r3, #32]
 8005d4e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	881b      	ldrh	r3, [r3, #0]
 8005d54:	461a      	mov	r2, r3
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005d5e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6a1b      	ldr	r3, [r3, #32]
 8005d64:	1c9a      	adds	r2, r3, #2
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	621a      	str	r2, [r3, #32]
 8005d6a:	e008      	b.n	8005d7e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6a1b      	ldr	r3, [r3, #32]
 8005d70:	1c59      	adds	r1, r3, #1
 8005d72:	687a      	ldr	r2, [r7, #4]
 8005d74:	6211      	str	r1, [r2, #32]
 8005d76:	781a      	ldrb	r2, [r3, #0]
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005d82:	b29b      	uxth	r3, r3
 8005d84:	3b01      	subs	r3, #1
 8005d86:	b29b      	uxth	r3, r3
 8005d88:	687a      	ldr	r2, [r7, #4]
 8005d8a:	4619      	mov	r1, r3
 8005d8c:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d10f      	bne.n	8005db2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	68da      	ldr	r2, [r3, #12]
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005da0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	68da      	ldr	r2, [r3, #12]
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005db0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005db2:	2300      	movs	r3, #0
 8005db4:	e000      	b.n	8005db8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005db6:	2302      	movs	r3, #2
  }
}
 8005db8:	4618      	mov	r0, r3
 8005dba:	3714      	adds	r7, #20
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc2:	4770      	bx	lr

08005dc4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b082      	sub	sp, #8
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	68da      	ldr	r2, [r3, #12]
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005dda:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2220      	movs	r2, #32
 8005de0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005de4:	6878      	ldr	r0, [r7, #4]
 8005de6:	f7fa ffa3 	bl	8000d30 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005dea:	2300      	movs	r3, #0
}
 8005dec:	4618      	mov	r0, r3
 8005dee:	3708      	adds	r7, #8
 8005df0:	46bd      	mov	sp, r7
 8005df2:	bd80      	pop	{r7, pc}

08005df4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b08c      	sub	sp, #48	; 0x30
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005e02:	b2db      	uxtb	r3, r3
 8005e04:	2b22      	cmp	r3, #34	; 0x22
 8005e06:	f040 80ab 	bne.w	8005f60 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	689b      	ldr	r3, [r3, #8]
 8005e0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e12:	d117      	bne.n	8005e44 <UART_Receive_IT+0x50>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	691b      	ldr	r3, [r3, #16]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d113      	bne.n	8005e44 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e24:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	685b      	ldr	r3, [r3, #4]
 8005e2c:	b29b      	uxth	r3, r3
 8005e2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e32:	b29a      	uxth	r2, r3
 8005e34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e36:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e3c:	1c9a      	adds	r2, r3, #2
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	629a      	str	r2, [r3, #40]	; 0x28
 8005e42:	e026      	b.n	8005e92 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e48:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	689b      	ldr	r3, [r3, #8]
 8005e52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e56:	d007      	beq.n	8005e68 <UART_Receive_IT+0x74>
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	689b      	ldr	r3, [r3, #8]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d10a      	bne.n	8005e76 <UART_Receive_IT+0x82>
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	691b      	ldr	r3, [r3, #16]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d106      	bne.n	8005e76 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	685b      	ldr	r3, [r3, #4]
 8005e6e:	b2da      	uxtb	r2, r3
 8005e70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e72:	701a      	strb	r2, [r3, #0]
 8005e74:	e008      	b.n	8005e88 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	685b      	ldr	r3, [r3, #4]
 8005e7c:	b2db      	uxtb	r3, r3
 8005e7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e82:	b2da      	uxtb	r2, r3
 8005e84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e86:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e8c:	1c5a      	adds	r2, r3, #1
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005e96:	b29b      	uxth	r3, r3
 8005e98:	3b01      	subs	r3, #1
 8005e9a:	b29b      	uxth	r3, r3
 8005e9c:	687a      	ldr	r2, [r7, #4]
 8005e9e:	4619      	mov	r1, r3
 8005ea0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d15a      	bne.n	8005f5c <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	68da      	ldr	r2, [r3, #12]
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f022 0220 	bic.w	r2, r2, #32
 8005eb4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	68da      	ldr	r2, [r3, #12]
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005ec4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	695a      	ldr	r2, [r3, #20]
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f022 0201 	bic.w	r2, r2, #1
 8005ed4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2220      	movs	r2, #32
 8005eda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ee2:	2b01      	cmp	r3, #1
 8005ee4:	d135      	bne.n	8005f52 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	2200      	movs	r2, #0
 8005eea:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	330c      	adds	r3, #12
 8005ef2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ef4:	697b      	ldr	r3, [r7, #20]
 8005ef6:	e853 3f00 	ldrex	r3, [r3]
 8005efa:	613b      	str	r3, [r7, #16]
   return(result);
 8005efc:	693b      	ldr	r3, [r7, #16]
 8005efe:	f023 0310 	bic.w	r3, r3, #16
 8005f02:	627b      	str	r3, [r7, #36]	; 0x24
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	330c      	adds	r3, #12
 8005f0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f0c:	623a      	str	r2, [r7, #32]
 8005f0e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f10:	69f9      	ldr	r1, [r7, #28]
 8005f12:	6a3a      	ldr	r2, [r7, #32]
 8005f14:	e841 2300 	strex	r3, r2, [r1]
 8005f18:	61bb      	str	r3, [r7, #24]
   return(result);
 8005f1a:	69bb      	ldr	r3, [r7, #24]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d1e5      	bne.n	8005eec <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f003 0310 	and.w	r3, r3, #16
 8005f2a:	2b10      	cmp	r3, #16
 8005f2c:	d10a      	bne.n	8005f44 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005f2e:	2300      	movs	r3, #0
 8005f30:	60fb      	str	r3, [r7, #12]
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	60fb      	str	r3, [r7, #12]
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	685b      	ldr	r3, [r3, #4]
 8005f40:	60fb      	str	r3, [r7, #12]
 8005f42:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005f48:	4619      	mov	r1, r3
 8005f4a:	6878      	ldr	r0, [r7, #4]
 8005f4c:	f7ff fd9a 	bl	8005a84 <HAL_UARTEx_RxEventCallback>
 8005f50:	e002      	b.n	8005f58 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005f52:	6878      	ldr	r0, [r7, #4]
 8005f54:	f7ff fd82 	bl	8005a5c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005f58:	2300      	movs	r3, #0
 8005f5a:	e002      	b.n	8005f62 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	e000      	b.n	8005f62 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005f60:	2302      	movs	r3, #2
  }
}
 8005f62:	4618      	mov	r0, r3
 8005f64:	3730      	adds	r7, #48	; 0x30
 8005f66:	46bd      	mov	sp, r7
 8005f68:	bd80      	pop	{r7, pc}
	...

08005f6c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005f6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005f70:	b0c0      	sub	sp, #256	; 0x100
 8005f72:	af00      	add	r7, sp, #0
 8005f74:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005f78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	691b      	ldr	r3, [r3, #16]
 8005f80:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005f84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f88:	68d9      	ldr	r1, [r3, #12]
 8005f8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f8e:	681a      	ldr	r2, [r3, #0]
 8005f90:	ea40 0301 	orr.w	r3, r0, r1
 8005f94:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005f96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f9a:	689a      	ldr	r2, [r3, #8]
 8005f9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fa0:	691b      	ldr	r3, [r3, #16]
 8005fa2:	431a      	orrs	r2, r3
 8005fa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fa8:	695b      	ldr	r3, [r3, #20]
 8005faa:	431a      	orrs	r2, r3
 8005fac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fb0:	69db      	ldr	r3, [r3, #28]
 8005fb2:	4313      	orrs	r3, r2
 8005fb4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005fb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	68db      	ldr	r3, [r3, #12]
 8005fc0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005fc4:	f021 010c 	bic.w	r1, r1, #12
 8005fc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fcc:	681a      	ldr	r2, [r3, #0]
 8005fce:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005fd2:	430b      	orrs	r3, r1
 8005fd4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005fd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	695b      	ldr	r3, [r3, #20]
 8005fde:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005fe2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fe6:	6999      	ldr	r1, [r3, #24]
 8005fe8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fec:	681a      	ldr	r2, [r3, #0]
 8005fee:	ea40 0301 	orr.w	r3, r0, r1
 8005ff2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005ff4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ff8:	681a      	ldr	r2, [r3, #0]
 8005ffa:	4b8f      	ldr	r3, [pc, #572]	; (8006238 <UART_SetConfig+0x2cc>)
 8005ffc:	429a      	cmp	r2, r3
 8005ffe:	d005      	beq.n	800600c <UART_SetConfig+0xa0>
 8006000:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006004:	681a      	ldr	r2, [r3, #0]
 8006006:	4b8d      	ldr	r3, [pc, #564]	; (800623c <UART_SetConfig+0x2d0>)
 8006008:	429a      	cmp	r2, r3
 800600a:	d104      	bne.n	8006016 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800600c:	f7fc fde4 	bl	8002bd8 <HAL_RCC_GetPCLK2Freq>
 8006010:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006014:	e003      	b.n	800601e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006016:	f7fc fdcb 	bl	8002bb0 <HAL_RCC_GetPCLK1Freq>
 800601a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800601e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006022:	69db      	ldr	r3, [r3, #28]
 8006024:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006028:	f040 810c 	bne.w	8006244 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800602c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006030:	2200      	movs	r2, #0
 8006032:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006036:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800603a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800603e:	4622      	mov	r2, r4
 8006040:	462b      	mov	r3, r5
 8006042:	1891      	adds	r1, r2, r2
 8006044:	65b9      	str	r1, [r7, #88]	; 0x58
 8006046:	415b      	adcs	r3, r3
 8006048:	65fb      	str	r3, [r7, #92]	; 0x5c
 800604a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800604e:	4621      	mov	r1, r4
 8006050:	eb12 0801 	adds.w	r8, r2, r1
 8006054:	4629      	mov	r1, r5
 8006056:	eb43 0901 	adc.w	r9, r3, r1
 800605a:	f04f 0200 	mov.w	r2, #0
 800605e:	f04f 0300 	mov.w	r3, #0
 8006062:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006066:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800606a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800606e:	4690      	mov	r8, r2
 8006070:	4699      	mov	r9, r3
 8006072:	4623      	mov	r3, r4
 8006074:	eb18 0303 	adds.w	r3, r8, r3
 8006078:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800607c:	462b      	mov	r3, r5
 800607e:	eb49 0303 	adc.w	r3, r9, r3
 8006082:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006086:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800608a:	685b      	ldr	r3, [r3, #4]
 800608c:	2200      	movs	r2, #0
 800608e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006092:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006096:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800609a:	460b      	mov	r3, r1
 800609c:	18db      	adds	r3, r3, r3
 800609e:	653b      	str	r3, [r7, #80]	; 0x50
 80060a0:	4613      	mov	r3, r2
 80060a2:	eb42 0303 	adc.w	r3, r2, r3
 80060a6:	657b      	str	r3, [r7, #84]	; 0x54
 80060a8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80060ac:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80060b0:	f7fa f8fe 	bl	80002b0 <__aeabi_uldivmod>
 80060b4:	4602      	mov	r2, r0
 80060b6:	460b      	mov	r3, r1
 80060b8:	4b61      	ldr	r3, [pc, #388]	; (8006240 <UART_SetConfig+0x2d4>)
 80060ba:	fba3 2302 	umull	r2, r3, r3, r2
 80060be:	095b      	lsrs	r3, r3, #5
 80060c0:	011c      	lsls	r4, r3, #4
 80060c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80060c6:	2200      	movs	r2, #0
 80060c8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80060cc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80060d0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80060d4:	4642      	mov	r2, r8
 80060d6:	464b      	mov	r3, r9
 80060d8:	1891      	adds	r1, r2, r2
 80060da:	64b9      	str	r1, [r7, #72]	; 0x48
 80060dc:	415b      	adcs	r3, r3
 80060de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80060e0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80060e4:	4641      	mov	r1, r8
 80060e6:	eb12 0a01 	adds.w	sl, r2, r1
 80060ea:	4649      	mov	r1, r9
 80060ec:	eb43 0b01 	adc.w	fp, r3, r1
 80060f0:	f04f 0200 	mov.w	r2, #0
 80060f4:	f04f 0300 	mov.w	r3, #0
 80060f8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80060fc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006100:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006104:	4692      	mov	sl, r2
 8006106:	469b      	mov	fp, r3
 8006108:	4643      	mov	r3, r8
 800610a:	eb1a 0303 	adds.w	r3, sl, r3
 800610e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006112:	464b      	mov	r3, r9
 8006114:	eb4b 0303 	adc.w	r3, fp, r3
 8006118:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800611c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006120:	685b      	ldr	r3, [r3, #4]
 8006122:	2200      	movs	r2, #0
 8006124:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006128:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800612c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006130:	460b      	mov	r3, r1
 8006132:	18db      	adds	r3, r3, r3
 8006134:	643b      	str	r3, [r7, #64]	; 0x40
 8006136:	4613      	mov	r3, r2
 8006138:	eb42 0303 	adc.w	r3, r2, r3
 800613c:	647b      	str	r3, [r7, #68]	; 0x44
 800613e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006142:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006146:	f7fa f8b3 	bl	80002b0 <__aeabi_uldivmod>
 800614a:	4602      	mov	r2, r0
 800614c:	460b      	mov	r3, r1
 800614e:	4611      	mov	r1, r2
 8006150:	4b3b      	ldr	r3, [pc, #236]	; (8006240 <UART_SetConfig+0x2d4>)
 8006152:	fba3 2301 	umull	r2, r3, r3, r1
 8006156:	095b      	lsrs	r3, r3, #5
 8006158:	2264      	movs	r2, #100	; 0x64
 800615a:	fb02 f303 	mul.w	r3, r2, r3
 800615e:	1acb      	subs	r3, r1, r3
 8006160:	00db      	lsls	r3, r3, #3
 8006162:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006166:	4b36      	ldr	r3, [pc, #216]	; (8006240 <UART_SetConfig+0x2d4>)
 8006168:	fba3 2302 	umull	r2, r3, r3, r2
 800616c:	095b      	lsrs	r3, r3, #5
 800616e:	005b      	lsls	r3, r3, #1
 8006170:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006174:	441c      	add	r4, r3
 8006176:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800617a:	2200      	movs	r2, #0
 800617c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006180:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006184:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006188:	4642      	mov	r2, r8
 800618a:	464b      	mov	r3, r9
 800618c:	1891      	adds	r1, r2, r2
 800618e:	63b9      	str	r1, [r7, #56]	; 0x38
 8006190:	415b      	adcs	r3, r3
 8006192:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006194:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006198:	4641      	mov	r1, r8
 800619a:	1851      	adds	r1, r2, r1
 800619c:	6339      	str	r1, [r7, #48]	; 0x30
 800619e:	4649      	mov	r1, r9
 80061a0:	414b      	adcs	r3, r1
 80061a2:	637b      	str	r3, [r7, #52]	; 0x34
 80061a4:	f04f 0200 	mov.w	r2, #0
 80061a8:	f04f 0300 	mov.w	r3, #0
 80061ac:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80061b0:	4659      	mov	r1, fp
 80061b2:	00cb      	lsls	r3, r1, #3
 80061b4:	4651      	mov	r1, sl
 80061b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80061ba:	4651      	mov	r1, sl
 80061bc:	00ca      	lsls	r2, r1, #3
 80061be:	4610      	mov	r0, r2
 80061c0:	4619      	mov	r1, r3
 80061c2:	4603      	mov	r3, r0
 80061c4:	4642      	mov	r2, r8
 80061c6:	189b      	adds	r3, r3, r2
 80061c8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80061cc:	464b      	mov	r3, r9
 80061ce:	460a      	mov	r2, r1
 80061d0:	eb42 0303 	adc.w	r3, r2, r3
 80061d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80061d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061dc:	685b      	ldr	r3, [r3, #4]
 80061de:	2200      	movs	r2, #0
 80061e0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80061e4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80061e8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80061ec:	460b      	mov	r3, r1
 80061ee:	18db      	adds	r3, r3, r3
 80061f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80061f2:	4613      	mov	r3, r2
 80061f4:	eb42 0303 	adc.w	r3, r2, r3
 80061f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80061fa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80061fe:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006202:	f7fa f855 	bl	80002b0 <__aeabi_uldivmod>
 8006206:	4602      	mov	r2, r0
 8006208:	460b      	mov	r3, r1
 800620a:	4b0d      	ldr	r3, [pc, #52]	; (8006240 <UART_SetConfig+0x2d4>)
 800620c:	fba3 1302 	umull	r1, r3, r3, r2
 8006210:	095b      	lsrs	r3, r3, #5
 8006212:	2164      	movs	r1, #100	; 0x64
 8006214:	fb01 f303 	mul.w	r3, r1, r3
 8006218:	1ad3      	subs	r3, r2, r3
 800621a:	00db      	lsls	r3, r3, #3
 800621c:	3332      	adds	r3, #50	; 0x32
 800621e:	4a08      	ldr	r2, [pc, #32]	; (8006240 <UART_SetConfig+0x2d4>)
 8006220:	fba2 2303 	umull	r2, r3, r2, r3
 8006224:	095b      	lsrs	r3, r3, #5
 8006226:	f003 0207 	and.w	r2, r3, #7
 800622a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	4422      	add	r2, r4
 8006232:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006234:	e105      	b.n	8006442 <UART_SetConfig+0x4d6>
 8006236:	bf00      	nop
 8006238:	40011000 	.word	0x40011000
 800623c:	40011400 	.word	0x40011400
 8006240:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006244:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006248:	2200      	movs	r2, #0
 800624a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800624e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006252:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006256:	4642      	mov	r2, r8
 8006258:	464b      	mov	r3, r9
 800625a:	1891      	adds	r1, r2, r2
 800625c:	6239      	str	r1, [r7, #32]
 800625e:	415b      	adcs	r3, r3
 8006260:	627b      	str	r3, [r7, #36]	; 0x24
 8006262:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006266:	4641      	mov	r1, r8
 8006268:	1854      	adds	r4, r2, r1
 800626a:	4649      	mov	r1, r9
 800626c:	eb43 0501 	adc.w	r5, r3, r1
 8006270:	f04f 0200 	mov.w	r2, #0
 8006274:	f04f 0300 	mov.w	r3, #0
 8006278:	00eb      	lsls	r3, r5, #3
 800627a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800627e:	00e2      	lsls	r2, r4, #3
 8006280:	4614      	mov	r4, r2
 8006282:	461d      	mov	r5, r3
 8006284:	4643      	mov	r3, r8
 8006286:	18e3      	adds	r3, r4, r3
 8006288:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800628c:	464b      	mov	r3, r9
 800628e:	eb45 0303 	adc.w	r3, r5, r3
 8006292:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006296:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800629a:	685b      	ldr	r3, [r3, #4]
 800629c:	2200      	movs	r2, #0
 800629e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80062a2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80062a6:	f04f 0200 	mov.w	r2, #0
 80062aa:	f04f 0300 	mov.w	r3, #0
 80062ae:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80062b2:	4629      	mov	r1, r5
 80062b4:	008b      	lsls	r3, r1, #2
 80062b6:	4621      	mov	r1, r4
 80062b8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80062bc:	4621      	mov	r1, r4
 80062be:	008a      	lsls	r2, r1, #2
 80062c0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80062c4:	f7f9 fff4 	bl	80002b0 <__aeabi_uldivmod>
 80062c8:	4602      	mov	r2, r0
 80062ca:	460b      	mov	r3, r1
 80062cc:	4b60      	ldr	r3, [pc, #384]	; (8006450 <UART_SetConfig+0x4e4>)
 80062ce:	fba3 2302 	umull	r2, r3, r3, r2
 80062d2:	095b      	lsrs	r3, r3, #5
 80062d4:	011c      	lsls	r4, r3, #4
 80062d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80062da:	2200      	movs	r2, #0
 80062dc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80062e0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80062e4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80062e8:	4642      	mov	r2, r8
 80062ea:	464b      	mov	r3, r9
 80062ec:	1891      	adds	r1, r2, r2
 80062ee:	61b9      	str	r1, [r7, #24]
 80062f0:	415b      	adcs	r3, r3
 80062f2:	61fb      	str	r3, [r7, #28]
 80062f4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80062f8:	4641      	mov	r1, r8
 80062fa:	1851      	adds	r1, r2, r1
 80062fc:	6139      	str	r1, [r7, #16]
 80062fe:	4649      	mov	r1, r9
 8006300:	414b      	adcs	r3, r1
 8006302:	617b      	str	r3, [r7, #20]
 8006304:	f04f 0200 	mov.w	r2, #0
 8006308:	f04f 0300 	mov.w	r3, #0
 800630c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006310:	4659      	mov	r1, fp
 8006312:	00cb      	lsls	r3, r1, #3
 8006314:	4651      	mov	r1, sl
 8006316:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800631a:	4651      	mov	r1, sl
 800631c:	00ca      	lsls	r2, r1, #3
 800631e:	4610      	mov	r0, r2
 8006320:	4619      	mov	r1, r3
 8006322:	4603      	mov	r3, r0
 8006324:	4642      	mov	r2, r8
 8006326:	189b      	adds	r3, r3, r2
 8006328:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800632c:	464b      	mov	r3, r9
 800632e:	460a      	mov	r2, r1
 8006330:	eb42 0303 	adc.w	r3, r2, r3
 8006334:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006338:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800633c:	685b      	ldr	r3, [r3, #4]
 800633e:	2200      	movs	r2, #0
 8006340:	67bb      	str	r3, [r7, #120]	; 0x78
 8006342:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006344:	f04f 0200 	mov.w	r2, #0
 8006348:	f04f 0300 	mov.w	r3, #0
 800634c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006350:	4649      	mov	r1, r9
 8006352:	008b      	lsls	r3, r1, #2
 8006354:	4641      	mov	r1, r8
 8006356:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800635a:	4641      	mov	r1, r8
 800635c:	008a      	lsls	r2, r1, #2
 800635e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006362:	f7f9 ffa5 	bl	80002b0 <__aeabi_uldivmod>
 8006366:	4602      	mov	r2, r0
 8006368:	460b      	mov	r3, r1
 800636a:	4b39      	ldr	r3, [pc, #228]	; (8006450 <UART_SetConfig+0x4e4>)
 800636c:	fba3 1302 	umull	r1, r3, r3, r2
 8006370:	095b      	lsrs	r3, r3, #5
 8006372:	2164      	movs	r1, #100	; 0x64
 8006374:	fb01 f303 	mul.w	r3, r1, r3
 8006378:	1ad3      	subs	r3, r2, r3
 800637a:	011b      	lsls	r3, r3, #4
 800637c:	3332      	adds	r3, #50	; 0x32
 800637e:	4a34      	ldr	r2, [pc, #208]	; (8006450 <UART_SetConfig+0x4e4>)
 8006380:	fba2 2303 	umull	r2, r3, r2, r3
 8006384:	095b      	lsrs	r3, r3, #5
 8006386:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800638a:	441c      	add	r4, r3
 800638c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006390:	2200      	movs	r2, #0
 8006392:	673b      	str	r3, [r7, #112]	; 0x70
 8006394:	677a      	str	r2, [r7, #116]	; 0x74
 8006396:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800639a:	4642      	mov	r2, r8
 800639c:	464b      	mov	r3, r9
 800639e:	1891      	adds	r1, r2, r2
 80063a0:	60b9      	str	r1, [r7, #8]
 80063a2:	415b      	adcs	r3, r3
 80063a4:	60fb      	str	r3, [r7, #12]
 80063a6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80063aa:	4641      	mov	r1, r8
 80063ac:	1851      	adds	r1, r2, r1
 80063ae:	6039      	str	r1, [r7, #0]
 80063b0:	4649      	mov	r1, r9
 80063b2:	414b      	adcs	r3, r1
 80063b4:	607b      	str	r3, [r7, #4]
 80063b6:	f04f 0200 	mov.w	r2, #0
 80063ba:	f04f 0300 	mov.w	r3, #0
 80063be:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80063c2:	4659      	mov	r1, fp
 80063c4:	00cb      	lsls	r3, r1, #3
 80063c6:	4651      	mov	r1, sl
 80063c8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80063cc:	4651      	mov	r1, sl
 80063ce:	00ca      	lsls	r2, r1, #3
 80063d0:	4610      	mov	r0, r2
 80063d2:	4619      	mov	r1, r3
 80063d4:	4603      	mov	r3, r0
 80063d6:	4642      	mov	r2, r8
 80063d8:	189b      	adds	r3, r3, r2
 80063da:	66bb      	str	r3, [r7, #104]	; 0x68
 80063dc:	464b      	mov	r3, r9
 80063de:	460a      	mov	r2, r1
 80063e0:	eb42 0303 	adc.w	r3, r2, r3
 80063e4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80063e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063ea:	685b      	ldr	r3, [r3, #4]
 80063ec:	2200      	movs	r2, #0
 80063ee:	663b      	str	r3, [r7, #96]	; 0x60
 80063f0:	667a      	str	r2, [r7, #100]	; 0x64
 80063f2:	f04f 0200 	mov.w	r2, #0
 80063f6:	f04f 0300 	mov.w	r3, #0
 80063fa:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80063fe:	4649      	mov	r1, r9
 8006400:	008b      	lsls	r3, r1, #2
 8006402:	4641      	mov	r1, r8
 8006404:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006408:	4641      	mov	r1, r8
 800640a:	008a      	lsls	r2, r1, #2
 800640c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006410:	f7f9 ff4e 	bl	80002b0 <__aeabi_uldivmod>
 8006414:	4602      	mov	r2, r0
 8006416:	460b      	mov	r3, r1
 8006418:	4b0d      	ldr	r3, [pc, #52]	; (8006450 <UART_SetConfig+0x4e4>)
 800641a:	fba3 1302 	umull	r1, r3, r3, r2
 800641e:	095b      	lsrs	r3, r3, #5
 8006420:	2164      	movs	r1, #100	; 0x64
 8006422:	fb01 f303 	mul.w	r3, r1, r3
 8006426:	1ad3      	subs	r3, r2, r3
 8006428:	011b      	lsls	r3, r3, #4
 800642a:	3332      	adds	r3, #50	; 0x32
 800642c:	4a08      	ldr	r2, [pc, #32]	; (8006450 <UART_SetConfig+0x4e4>)
 800642e:	fba2 2303 	umull	r2, r3, r2, r3
 8006432:	095b      	lsrs	r3, r3, #5
 8006434:	f003 020f 	and.w	r2, r3, #15
 8006438:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	4422      	add	r2, r4
 8006440:	609a      	str	r2, [r3, #8]
}
 8006442:	bf00      	nop
 8006444:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006448:	46bd      	mov	sp, r7
 800644a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800644e:	bf00      	nop
 8006450:	51eb851f 	.word	0x51eb851f

08006454 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8006454:	b084      	sub	sp, #16
 8006456:	b480      	push	{r7}
 8006458:	b085      	sub	sp, #20
 800645a:	af00      	add	r7, sp, #0
 800645c:	6078      	str	r0, [r7, #4]
 800645e:	f107 001c 	add.w	r0, r7, #28
 8006462:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8006466:	2300      	movs	r3, #0
 8006468:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800646a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800646c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800646e:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8006470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8006472:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8006474:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8006476:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8006478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800647a:	431a      	orrs	r2, r3
             Init.ClockDiv
 800647c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800647e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8006480:	68fa      	ldr	r2, [r7, #12]
 8006482:	4313      	orrs	r3, r2
 8006484:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	685b      	ldr	r3, [r3, #4]
 800648a:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800648e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006492:	68fa      	ldr	r2, [r7, #12]
 8006494:	431a      	orrs	r2, r3
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800649a:	2300      	movs	r3, #0
}
 800649c:	4618      	mov	r0, r3
 800649e:	3714      	adds	r7, #20
 80064a0:	46bd      	mov	sp, r7
 80064a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a6:	b004      	add	sp, #16
 80064a8:	4770      	bx	lr

080064aa <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 80064aa:	b480      	push	{r7}
 80064ac:	b083      	sub	sp, #12
 80064ae:	af00      	add	r7, sp, #0
 80064b0:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 80064b8:	4618      	mov	r0, r3
 80064ba:	370c      	adds	r7, #12
 80064bc:	46bd      	mov	sp, r7
 80064be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c2:	4770      	bx	lr

080064c4 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 80064c4:	b480      	push	{r7}
 80064c6:	b083      	sub	sp, #12
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
 80064cc:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	681a      	ldr	r2, [r3, #0]
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80064d8:	2300      	movs	r3, #0
}
 80064da:	4618      	mov	r0, r3
 80064dc:	370c      	adds	r7, #12
 80064de:	46bd      	mov	sp, r7
 80064e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e4:	4770      	bx	lr

080064e6 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 80064e6:	b480      	push	{r7}
 80064e8:	b083      	sub	sp, #12
 80064ea:	af00      	add	r7, sp, #0
 80064ec:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	2203      	movs	r2, #3
 80064f2:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80064f4:	2300      	movs	r3, #0
}
 80064f6:	4618      	mov	r0, r3
 80064f8:	370c      	adds	r7, #12
 80064fa:	46bd      	mov	sp, r7
 80064fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006500:	4770      	bx	lr

08006502 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8006502:	b480      	push	{r7}
 8006504:	b083      	sub	sp, #12
 8006506:	af00      	add	r7, sp, #0
 8006508:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f003 0303 	and.w	r3, r3, #3
}
 8006512:	4618      	mov	r0, r3
 8006514:	370c      	adds	r7, #12
 8006516:	46bd      	mov	sp, r7
 8006518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651c:	4770      	bx	lr

0800651e <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800651e:	b480      	push	{r7}
 8006520:	b085      	sub	sp, #20
 8006522:	af00      	add	r7, sp, #0
 8006524:	6078      	str	r0, [r7, #4]
 8006526:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8006528:	2300      	movs	r3, #0
 800652a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	681a      	ldr	r2, [r3, #0]
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800653c:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8006542:	431a      	orrs	r2, r3
                       Command->CPSM);
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8006548:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800654a:	68fa      	ldr	r2, [r7, #12]
 800654c:	4313      	orrs	r3, r2
 800654e:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	68db      	ldr	r3, [r3, #12]
 8006554:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8006558:	f023 030f 	bic.w	r3, r3, #15
 800655c:	68fa      	ldr	r2, [r7, #12]
 800655e:	431a      	orrs	r2, r3
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8006564:	2300      	movs	r3, #0
}
 8006566:	4618      	mov	r0, r3
 8006568:	3714      	adds	r7, #20
 800656a:	46bd      	mov	sp, r7
 800656c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006570:	4770      	bx	lr

08006572 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8006572:	b480      	push	{r7}
 8006574:	b083      	sub	sp, #12
 8006576:	af00      	add	r7, sp, #0
 8006578:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	691b      	ldr	r3, [r3, #16]
 800657e:	b2db      	uxtb	r3, r3
}
 8006580:	4618      	mov	r0, r3
 8006582:	370c      	adds	r7, #12
 8006584:	46bd      	mov	sp, r7
 8006586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658a:	4770      	bx	lr

0800658c <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800658c:	b480      	push	{r7}
 800658e:	b085      	sub	sp, #20
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
 8006594:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	3314      	adds	r3, #20
 800659a:	461a      	mov	r2, r3
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	4413      	add	r3, r2
 80065a0:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	681b      	ldr	r3, [r3, #0]
}  
 80065a6:	4618      	mov	r0, r3
 80065a8:	3714      	adds	r7, #20
 80065aa:	46bd      	mov	sp, r7
 80065ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b0:	4770      	bx	lr

080065b2 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 80065b2:	b480      	push	{r7}
 80065b4:	b085      	sub	sp, #20
 80065b6:	af00      	add	r7, sp, #0
 80065b8:	6078      	str	r0, [r7, #4]
 80065ba:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80065bc:	2300      	movs	r3, #0
 80065be:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	681a      	ldr	r2, [r3, #0]
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	685a      	ldr	r2, [r3, #4]
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80065d8:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80065de:	431a      	orrs	r2, r3
                       Data->DPSM);
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80065e4:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80065e6:	68fa      	ldr	r2, [r7, #12]
 80065e8:	4313      	orrs	r3, r2
 80065ea:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065f0:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	431a      	orrs	r2, r3
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80065fc:	2300      	movs	r3, #0

}
 80065fe:	4618      	mov	r0, r3
 8006600:	3714      	adds	r7, #20
 8006602:	46bd      	mov	sp, r7
 8006604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006608:	4770      	bx	lr

0800660a <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800660a:	b580      	push	{r7, lr}
 800660c:	b088      	sub	sp, #32
 800660e:	af00      	add	r7, sp, #0
 8006610:	6078      	str	r0, [r7, #4]
 8006612:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8006618:	2310      	movs	r3, #16
 800661a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800661c:	2340      	movs	r3, #64	; 0x40
 800661e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006620:	2300      	movs	r3, #0
 8006622:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006624:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006628:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800662a:	f107 0308 	add.w	r3, r7, #8
 800662e:	4619      	mov	r1, r3
 8006630:	6878      	ldr	r0, [r7, #4]
 8006632:	f7ff ff74 	bl	800651e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8006636:	f241 3288 	movw	r2, #5000	; 0x1388
 800663a:	2110      	movs	r1, #16
 800663c:	6878      	ldr	r0, [r7, #4]
 800663e:	f000 fa19 	bl	8006a74 <SDMMC_GetCmdResp1>
 8006642:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006644:	69fb      	ldr	r3, [r7, #28]
}
 8006646:	4618      	mov	r0, r3
 8006648:	3720      	adds	r7, #32
 800664a:	46bd      	mov	sp, r7
 800664c:	bd80      	pop	{r7, pc}

0800664e <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800664e:	b580      	push	{r7, lr}
 8006650:	b088      	sub	sp, #32
 8006652:	af00      	add	r7, sp, #0
 8006654:	6078      	str	r0, [r7, #4]
 8006656:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800665c:	2311      	movs	r3, #17
 800665e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006660:	2340      	movs	r3, #64	; 0x40
 8006662:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006664:	2300      	movs	r3, #0
 8006666:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006668:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800666c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800666e:	f107 0308 	add.w	r3, r7, #8
 8006672:	4619      	mov	r1, r3
 8006674:	6878      	ldr	r0, [r7, #4]
 8006676:	f7ff ff52 	bl	800651e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800667a:	f241 3288 	movw	r2, #5000	; 0x1388
 800667e:	2111      	movs	r1, #17
 8006680:	6878      	ldr	r0, [r7, #4]
 8006682:	f000 f9f7 	bl	8006a74 <SDMMC_GetCmdResp1>
 8006686:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006688:	69fb      	ldr	r3, [r7, #28]
}
 800668a:	4618      	mov	r0, r3
 800668c:	3720      	adds	r7, #32
 800668e:	46bd      	mov	sp, r7
 8006690:	bd80      	pop	{r7, pc}

08006692 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8006692:	b580      	push	{r7, lr}
 8006694:	b088      	sub	sp, #32
 8006696:	af00      	add	r7, sp, #0
 8006698:	6078      	str	r0, [r7, #4]
 800669a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80066a0:	2312      	movs	r3, #18
 80066a2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80066a4:	2340      	movs	r3, #64	; 0x40
 80066a6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80066a8:	2300      	movs	r3, #0
 80066aa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80066ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80066b0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80066b2:	f107 0308 	add.w	r3, r7, #8
 80066b6:	4619      	mov	r1, r3
 80066b8:	6878      	ldr	r0, [r7, #4]
 80066ba:	f7ff ff30 	bl	800651e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80066be:	f241 3288 	movw	r2, #5000	; 0x1388
 80066c2:	2112      	movs	r1, #18
 80066c4:	6878      	ldr	r0, [r7, #4]
 80066c6:	f000 f9d5 	bl	8006a74 <SDMMC_GetCmdResp1>
 80066ca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80066cc:	69fb      	ldr	r3, [r7, #28]
}
 80066ce:	4618      	mov	r0, r3
 80066d0:	3720      	adds	r7, #32
 80066d2:	46bd      	mov	sp, r7
 80066d4:	bd80      	pop	{r7, pc}

080066d6 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80066d6:	b580      	push	{r7, lr}
 80066d8:	b088      	sub	sp, #32
 80066da:	af00      	add	r7, sp, #0
 80066dc:	6078      	str	r0, [r7, #4]
 80066de:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80066e4:	2318      	movs	r3, #24
 80066e6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80066e8:	2340      	movs	r3, #64	; 0x40
 80066ea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80066ec:	2300      	movs	r3, #0
 80066ee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80066f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80066f4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80066f6:	f107 0308 	add.w	r3, r7, #8
 80066fa:	4619      	mov	r1, r3
 80066fc:	6878      	ldr	r0, [r7, #4]
 80066fe:	f7ff ff0e 	bl	800651e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8006702:	f241 3288 	movw	r2, #5000	; 0x1388
 8006706:	2118      	movs	r1, #24
 8006708:	6878      	ldr	r0, [r7, #4]
 800670a:	f000 f9b3 	bl	8006a74 <SDMMC_GetCmdResp1>
 800670e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006710:	69fb      	ldr	r3, [r7, #28]
}
 8006712:	4618      	mov	r0, r3
 8006714:	3720      	adds	r7, #32
 8006716:	46bd      	mov	sp, r7
 8006718:	bd80      	pop	{r7, pc}

0800671a <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800671a:	b580      	push	{r7, lr}
 800671c:	b088      	sub	sp, #32
 800671e:	af00      	add	r7, sp, #0
 8006720:	6078      	str	r0, [r7, #4]
 8006722:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8006728:	2319      	movs	r3, #25
 800672a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800672c:	2340      	movs	r3, #64	; 0x40
 800672e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006730:	2300      	movs	r3, #0
 8006732:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006734:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006738:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800673a:	f107 0308 	add.w	r3, r7, #8
 800673e:	4619      	mov	r1, r3
 8006740:	6878      	ldr	r0, [r7, #4]
 8006742:	f7ff feec 	bl	800651e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8006746:	f241 3288 	movw	r2, #5000	; 0x1388
 800674a:	2119      	movs	r1, #25
 800674c:	6878      	ldr	r0, [r7, #4]
 800674e:	f000 f991 	bl	8006a74 <SDMMC_GetCmdResp1>
 8006752:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006754:	69fb      	ldr	r3, [r7, #28]
}
 8006756:	4618      	mov	r0, r3
 8006758:	3720      	adds	r7, #32
 800675a:	46bd      	mov	sp, r7
 800675c:	bd80      	pop	{r7, pc}
	...

08006760 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8006760:	b580      	push	{r7, lr}
 8006762:	b088      	sub	sp, #32
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8006768:	2300      	movs	r3, #0
 800676a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800676c:	230c      	movs	r3, #12
 800676e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006770:	2340      	movs	r3, #64	; 0x40
 8006772:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006774:	2300      	movs	r3, #0
 8006776:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006778:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800677c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800677e:	f107 0308 	add.w	r3, r7, #8
 8006782:	4619      	mov	r1, r3
 8006784:	6878      	ldr	r0, [r7, #4]
 8006786:	f7ff feca 	bl	800651e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800678a:	4a05      	ldr	r2, [pc, #20]	; (80067a0 <SDMMC_CmdStopTransfer+0x40>)
 800678c:	210c      	movs	r1, #12
 800678e:	6878      	ldr	r0, [r7, #4]
 8006790:	f000 f970 	bl	8006a74 <SDMMC_GetCmdResp1>
 8006794:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006796:	69fb      	ldr	r3, [r7, #28]
}
 8006798:	4618      	mov	r0, r3
 800679a:	3720      	adds	r7, #32
 800679c:	46bd      	mov	sp, r7
 800679e:	bd80      	pop	{r7, pc}
 80067a0:	05f5e100 	.word	0x05f5e100

080067a4 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b08a      	sub	sp, #40	; 0x28
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	60f8      	str	r0, [r7, #12]
 80067ac:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80067b4:	2307      	movs	r3, #7
 80067b6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80067b8:	2340      	movs	r3, #64	; 0x40
 80067ba:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80067bc:	2300      	movs	r3, #0
 80067be:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80067c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80067c4:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80067c6:	f107 0310 	add.w	r3, r7, #16
 80067ca:	4619      	mov	r1, r3
 80067cc:	68f8      	ldr	r0, [r7, #12]
 80067ce:	f7ff fea6 	bl	800651e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 80067d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80067d6:	2107      	movs	r1, #7
 80067d8:	68f8      	ldr	r0, [r7, #12]
 80067da:	f000 f94b 	bl	8006a74 <SDMMC_GetCmdResp1>
 80067de:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 80067e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80067e2:	4618      	mov	r0, r3
 80067e4:	3728      	adds	r7, #40	; 0x28
 80067e6:	46bd      	mov	sp, r7
 80067e8:	bd80      	pop	{r7, pc}

080067ea <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 80067ea:	b580      	push	{r7, lr}
 80067ec:	b088      	sub	sp, #32
 80067ee:	af00      	add	r7, sp, #0
 80067f0:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 80067f2:	2300      	movs	r3, #0
 80067f4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80067f6:	2300      	movs	r3, #0
 80067f8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 80067fa:	2300      	movs	r3, #0
 80067fc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80067fe:	2300      	movs	r3, #0
 8006800:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006802:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006806:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006808:	f107 0308 	add.w	r3, r7, #8
 800680c:	4619      	mov	r1, r3
 800680e:	6878      	ldr	r0, [r7, #4]
 8006810:	f7ff fe85 	bl	800651e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8006814:	6878      	ldr	r0, [r7, #4]
 8006816:	f000 fb65 	bl	8006ee4 <SDMMC_GetCmdError>
 800681a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800681c:	69fb      	ldr	r3, [r7, #28]
}
 800681e:	4618      	mov	r0, r3
 8006820:	3720      	adds	r7, #32
 8006822:	46bd      	mov	sp, r7
 8006824:	bd80      	pop	{r7, pc}

08006826 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8006826:	b580      	push	{r7, lr}
 8006828:	b088      	sub	sp, #32
 800682a:	af00      	add	r7, sp, #0
 800682c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800682e:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8006832:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8006834:	2308      	movs	r3, #8
 8006836:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006838:	2340      	movs	r3, #64	; 0x40
 800683a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800683c:	2300      	movs	r3, #0
 800683e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006840:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006844:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006846:	f107 0308 	add.w	r3, r7, #8
 800684a:	4619      	mov	r1, r3
 800684c:	6878      	ldr	r0, [r7, #4]
 800684e:	f7ff fe66 	bl	800651e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8006852:	6878      	ldr	r0, [r7, #4]
 8006854:	f000 faf8 	bl	8006e48 <SDMMC_GetCmdResp7>
 8006858:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800685a:	69fb      	ldr	r3, [r7, #28]
}
 800685c:	4618      	mov	r0, r3
 800685e:	3720      	adds	r7, #32
 8006860:	46bd      	mov	sp, r7
 8006862:	bd80      	pop	{r7, pc}

08006864 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006864:	b580      	push	{r7, lr}
 8006866:	b088      	sub	sp, #32
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
 800686c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8006872:	2337      	movs	r3, #55	; 0x37
 8006874:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006876:	2340      	movs	r3, #64	; 0x40
 8006878:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800687a:	2300      	movs	r3, #0
 800687c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800687e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006882:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006884:	f107 0308 	add.w	r3, r7, #8
 8006888:	4619      	mov	r1, r3
 800688a:	6878      	ldr	r0, [r7, #4]
 800688c:	f7ff fe47 	bl	800651e <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8006890:	f241 3288 	movw	r2, #5000	; 0x1388
 8006894:	2137      	movs	r1, #55	; 0x37
 8006896:	6878      	ldr	r0, [r7, #4]
 8006898:	f000 f8ec 	bl	8006a74 <SDMMC_GetCmdResp1>
 800689c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800689e:	69fb      	ldr	r3, [r7, #28]
}
 80068a0:	4618      	mov	r0, r3
 80068a2:	3720      	adds	r7, #32
 80068a4:	46bd      	mov	sp, r7
 80068a6:	bd80      	pop	{r7, pc}

080068a8 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b088      	sub	sp, #32
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
 80068b0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80068b8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80068bc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80068be:	2329      	movs	r3, #41	; 0x29
 80068c0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80068c2:	2340      	movs	r3, #64	; 0x40
 80068c4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80068c6:	2300      	movs	r3, #0
 80068c8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80068ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80068ce:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80068d0:	f107 0308 	add.w	r3, r7, #8
 80068d4:	4619      	mov	r1, r3
 80068d6:	6878      	ldr	r0, [r7, #4]
 80068d8:	f7ff fe21 	bl	800651e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 80068dc:	6878      	ldr	r0, [r7, #4]
 80068de:	f000 f9ff 	bl	8006ce0 <SDMMC_GetCmdResp3>
 80068e2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80068e4:	69fb      	ldr	r3, [r7, #28]
}
 80068e6:	4618      	mov	r0, r3
 80068e8:	3720      	adds	r7, #32
 80068ea:	46bd      	mov	sp, r7
 80068ec:	bd80      	pop	{r7, pc}

080068ee <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 80068ee:	b580      	push	{r7, lr}
 80068f0:	b088      	sub	sp, #32
 80068f2:	af00      	add	r7, sp, #0
 80068f4:	6078      	str	r0, [r7, #4]
 80068f6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80068fc:	2306      	movs	r3, #6
 80068fe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006900:	2340      	movs	r3, #64	; 0x40
 8006902:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006904:	2300      	movs	r3, #0
 8006906:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006908:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800690c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800690e:	f107 0308 	add.w	r3, r7, #8
 8006912:	4619      	mov	r1, r3
 8006914:	6878      	ldr	r0, [r7, #4]
 8006916:	f7ff fe02 	bl	800651e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800691a:	f241 3288 	movw	r2, #5000	; 0x1388
 800691e:	2106      	movs	r1, #6
 8006920:	6878      	ldr	r0, [r7, #4]
 8006922:	f000 f8a7 	bl	8006a74 <SDMMC_GetCmdResp1>
 8006926:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006928:	69fb      	ldr	r3, [r7, #28]
}
 800692a:	4618      	mov	r0, r3
 800692c:	3720      	adds	r7, #32
 800692e:	46bd      	mov	sp, r7
 8006930:	bd80      	pop	{r7, pc}

08006932 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8006932:	b580      	push	{r7, lr}
 8006934:	b088      	sub	sp, #32
 8006936:	af00      	add	r7, sp, #0
 8006938:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800693a:	2300      	movs	r3, #0
 800693c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800693e:	2333      	movs	r3, #51	; 0x33
 8006940:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006942:	2340      	movs	r3, #64	; 0x40
 8006944:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006946:	2300      	movs	r3, #0
 8006948:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800694a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800694e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006950:	f107 0308 	add.w	r3, r7, #8
 8006954:	4619      	mov	r1, r3
 8006956:	6878      	ldr	r0, [r7, #4]
 8006958:	f7ff fde1 	bl	800651e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800695c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006960:	2133      	movs	r1, #51	; 0x33
 8006962:	6878      	ldr	r0, [r7, #4]
 8006964:	f000 f886 	bl	8006a74 <SDMMC_GetCmdResp1>
 8006968:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800696a:	69fb      	ldr	r3, [r7, #28]
}
 800696c:	4618      	mov	r0, r3
 800696e:	3720      	adds	r7, #32
 8006970:	46bd      	mov	sp, r7
 8006972:	bd80      	pop	{r7, pc}

08006974 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8006974:	b580      	push	{r7, lr}
 8006976:	b088      	sub	sp, #32
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800697c:	2300      	movs	r3, #0
 800697e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8006980:	2302      	movs	r3, #2
 8006982:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8006984:	23c0      	movs	r3, #192	; 0xc0
 8006986:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006988:	2300      	movs	r3, #0
 800698a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800698c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006990:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006992:	f107 0308 	add.w	r3, r7, #8
 8006996:	4619      	mov	r1, r3
 8006998:	6878      	ldr	r0, [r7, #4]
 800699a:	f7ff fdc0 	bl	800651e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800699e:	6878      	ldr	r0, [r7, #4]
 80069a0:	f000 f956 	bl	8006c50 <SDMMC_GetCmdResp2>
 80069a4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80069a6:	69fb      	ldr	r3, [r7, #28]
}
 80069a8:	4618      	mov	r0, r3
 80069aa:	3720      	adds	r7, #32
 80069ac:	46bd      	mov	sp, r7
 80069ae:	bd80      	pop	{r7, pc}

080069b0 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b088      	sub	sp, #32
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
 80069b8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80069be:	2309      	movs	r3, #9
 80069c0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80069c2:	23c0      	movs	r3, #192	; 0xc0
 80069c4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80069c6:	2300      	movs	r3, #0
 80069c8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80069ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80069ce:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80069d0:	f107 0308 	add.w	r3, r7, #8
 80069d4:	4619      	mov	r1, r3
 80069d6:	6878      	ldr	r0, [r7, #4]
 80069d8:	f7ff fda1 	bl	800651e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80069dc:	6878      	ldr	r0, [r7, #4]
 80069de:	f000 f937 	bl	8006c50 <SDMMC_GetCmdResp2>
 80069e2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80069e4:	69fb      	ldr	r3, [r7, #28]
}
 80069e6:	4618      	mov	r0, r3
 80069e8:	3720      	adds	r7, #32
 80069ea:	46bd      	mov	sp, r7
 80069ec:	bd80      	pop	{r7, pc}

080069ee <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 80069ee:	b580      	push	{r7, lr}
 80069f0:	b088      	sub	sp, #32
 80069f2:	af00      	add	r7, sp, #0
 80069f4:	6078      	str	r0, [r7, #4]
 80069f6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80069f8:	2300      	movs	r3, #0
 80069fa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80069fc:	2303      	movs	r3, #3
 80069fe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006a00:	2340      	movs	r3, #64	; 0x40
 8006a02:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006a04:	2300      	movs	r3, #0
 8006a06:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006a08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006a0c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006a0e:	f107 0308 	add.w	r3, r7, #8
 8006a12:	4619      	mov	r1, r3
 8006a14:	6878      	ldr	r0, [r7, #4]
 8006a16:	f7ff fd82 	bl	800651e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8006a1a:	683a      	ldr	r2, [r7, #0]
 8006a1c:	2103      	movs	r1, #3
 8006a1e:	6878      	ldr	r0, [r7, #4]
 8006a20:	f000 f99c 	bl	8006d5c <SDMMC_GetCmdResp6>
 8006a24:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006a26:	69fb      	ldr	r3, [r7, #28]
}
 8006a28:	4618      	mov	r0, r3
 8006a2a:	3720      	adds	r7, #32
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	bd80      	pop	{r7, pc}

08006a30 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b088      	sub	sp, #32
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
 8006a38:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8006a3e:	230d      	movs	r3, #13
 8006a40:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006a42:	2340      	movs	r3, #64	; 0x40
 8006a44:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006a46:	2300      	movs	r3, #0
 8006a48:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006a4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006a4e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006a50:	f107 0308 	add.w	r3, r7, #8
 8006a54:	4619      	mov	r1, r3
 8006a56:	6878      	ldr	r0, [r7, #4]
 8006a58:	f7ff fd61 	bl	800651e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8006a5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a60:	210d      	movs	r1, #13
 8006a62:	6878      	ldr	r0, [r7, #4]
 8006a64:	f000 f806 	bl	8006a74 <SDMMC_GetCmdResp1>
 8006a68:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006a6a:	69fb      	ldr	r3, [r7, #28]
}
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	3720      	adds	r7, #32
 8006a70:	46bd      	mov	sp, r7
 8006a72:	bd80      	pop	{r7, pc}

08006a74 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b088      	sub	sp, #32
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	60f8      	str	r0, [r7, #12]
 8006a7c:	460b      	mov	r3, r1
 8006a7e:	607a      	str	r2, [r7, #4]
 8006a80:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8006a82:	4b70      	ldr	r3, [pc, #448]	; (8006c44 <SDMMC_GetCmdResp1+0x1d0>)
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	4a70      	ldr	r2, [pc, #448]	; (8006c48 <SDMMC_GetCmdResp1+0x1d4>)
 8006a88:	fba2 2303 	umull	r2, r3, r2, r3
 8006a8c:	0a5a      	lsrs	r2, r3, #9
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	fb02 f303 	mul.w	r3, r2, r3
 8006a94:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8006a96:	69fb      	ldr	r3, [r7, #28]
 8006a98:	1e5a      	subs	r2, r3, #1
 8006a9a:	61fa      	str	r2, [r7, #28]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d102      	bne.n	8006aa6 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006aa0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006aa4:	e0c9      	b.n	8006c3a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006aaa:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006aac:	69bb      	ldr	r3, [r7, #24]
 8006aae:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d0ef      	beq.n	8006a96 <SDMMC_GetCmdResp1+0x22>
 8006ab6:	69bb      	ldr	r3, [r7, #24]
 8006ab8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d1ea      	bne.n	8006a96 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ac4:	f003 0304 	and.w	r3, r3, #4
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d004      	beq.n	8006ad6 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	2204      	movs	r2, #4
 8006ad0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006ad2:	2304      	movs	r3, #4
 8006ad4:	e0b1      	b.n	8006c3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ada:	f003 0301 	and.w	r3, r3, #1
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d004      	beq.n	8006aec <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	2201      	movs	r2, #1
 8006ae6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006ae8:	2301      	movs	r3, #1
 8006aea:	e0a6      	b.n	8006c3a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	22c5      	movs	r2, #197	; 0xc5
 8006af0:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8006af2:	68f8      	ldr	r0, [r7, #12]
 8006af4:	f7ff fd3d 	bl	8006572 <SDIO_GetCommandResponse>
 8006af8:	4603      	mov	r3, r0
 8006afa:	461a      	mov	r2, r3
 8006afc:	7afb      	ldrb	r3, [r7, #11]
 8006afe:	4293      	cmp	r3, r2
 8006b00:	d001      	beq.n	8006b06 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006b02:	2301      	movs	r3, #1
 8006b04:	e099      	b.n	8006c3a <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8006b06:	2100      	movs	r1, #0
 8006b08:	68f8      	ldr	r0, [r7, #12]
 8006b0a:	f7ff fd3f 	bl	800658c <SDIO_GetResponse>
 8006b0e:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8006b10:	697a      	ldr	r2, [r7, #20]
 8006b12:	4b4e      	ldr	r3, [pc, #312]	; (8006c4c <SDMMC_GetCmdResp1+0x1d8>)
 8006b14:	4013      	ands	r3, r2
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d101      	bne.n	8006b1e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	e08d      	b.n	8006c3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8006b1e:	697b      	ldr	r3, [r7, #20]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	da02      	bge.n	8006b2a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8006b24:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006b28:	e087      	b.n	8006c3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8006b2a:	697b      	ldr	r3, [r7, #20]
 8006b2c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d001      	beq.n	8006b38 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8006b34:	2340      	movs	r3, #64	; 0x40
 8006b36:	e080      	b.n	8006c3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8006b38:	697b      	ldr	r3, [r7, #20]
 8006b3a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d001      	beq.n	8006b46 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8006b42:	2380      	movs	r3, #128	; 0x80
 8006b44:	e079      	b.n	8006c3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8006b46:	697b      	ldr	r3, [r7, #20]
 8006b48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d002      	beq.n	8006b56 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8006b50:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006b54:	e071      	b.n	8006c3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8006b56:	697b      	ldr	r3, [r7, #20]
 8006b58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d002      	beq.n	8006b66 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8006b60:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006b64:	e069      	b.n	8006c3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8006b66:	697b      	ldr	r3, [r7, #20]
 8006b68:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d002      	beq.n	8006b76 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8006b70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006b74:	e061      	b.n	8006c3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8006b76:	697b      	ldr	r3, [r7, #20]
 8006b78:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d002      	beq.n	8006b86 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8006b80:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006b84:	e059      	b.n	8006c3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8006b86:	697b      	ldr	r3, [r7, #20]
 8006b88:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d002      	beq.n	8006b96 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8006b90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006b94:	e051      	b.n	8006c3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8006b96:	697b      	ldr	r3, [r7, #20]
 8006b98:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d002      	beq.n	8006ba6 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8006ba0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006ba4:	e049      	b.n	8006c3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8006ba6:	697b      	ldr	r3, [r7, #20]
 8006ba8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d002      	beq.n	8006bb6 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8006bb0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006bb4:	e041      	b.n	8006c3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8006bb6:	697b      	ldr	r3, [r7, #20]
 8006bb8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d002      	beq.n	8006bc6 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8006bc0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006bc4:	e039      	b.n	8006c3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8006bc6:	697b      	ldr	r3, [r7, #20]
 8006bc8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d002      	beq.n	8006bd6 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8006bd0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006bd4:	e031      	b.n	8006c3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8006bd6:	697b      	ldr	r3, [r7, #20]
 8006bd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d002      	beq.n	8006be6 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8006be0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006be4:	e029      	b.n	8006c3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8006be6:	697b      	ldr	r3, [r7, #20]
 8006be8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d002      	beq.n	8006bf6 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8006bf0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006bf4:	e021      	b.n	8006c3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8006bf6:	697b      	ldr	r3, [r7, #20]
 8006bf8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d002      	beq.n	8006c06 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8006c00:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8006c04:	e019      	b.n	8006c3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8006c06:	697b      	ldr	r3, [r7, #20]
 8006c08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d002      	beq.n	8006c16 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8006c10:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006c14:	e011      	b.n	8006c3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8006c16:	697b      	ldr	r3, [r7, #20]
 8006c18:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d002      	beq.n	8006c26 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8006c20:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006c24:	e009      	b.n	8006c3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8006c26:	697b      	ldr	r3, [r7, #20]
 8006c28:	f003 0308 	and.w	r3, r3, #8
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d002      	beq.n	8006c36 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8006c30:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8006c34:	e001      	b.n	8006c3a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8006c36:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	3720      	adds	r7, #32
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	bd80      	pop	{r7, pc}
 8006c42:	bf00      	nop
 8006c44:	20000000 	.word	0x20000000
 8006c48:	10624dd3 	.word	0x10624dd3
 8006c4c:	fdffe008 	.word	0xfdffe008

08006c50 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8006c50:	b480      	push	{r7}
 8006c52:	b085      	sub	sp, #20
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006c58:	4b1f      	ldr	r3, [pc, #124]	; (8006cd8 <SDMMC_GetCmdResp2+0x88>)
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	4a1f      	ldr	r2, [pc, #124]	; (8006cdc <SDMMC_GetCmdResp2+0x8c>)
 8006c5e:	fba2 2303 	umull	r2, r3, r2, r3
 8006c62:	0a5b      	lsrs	r3, r3, #9
 8006c64:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c68:	fb02 f303 	mul.w	r3, r2, r3
 8006c6c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	1e5a      	subs	r2, r3, #1
 8006c72:	60fa      	str	r2, [r7, #12]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d102      	bne.n	8006c7e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006c78:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006c7c:	e026      	b.n	8006ccc <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c82:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006c84:	68bb      	ldr	r3, [r7, #8]
 8006c86:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d0ef      	beq.n	8006c6e <SDMMC_GetCmdResp2+0x1e>
 8006c8e:	68bb      	ldr	r3, [r7, #8]
 8006c90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d1ea      	bne.n	8006c6e <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c9c:	f003 0304 	and.w	r3, r3, #4
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d004      	beq.n	8006cae <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2204      	movs	r2, #4
 8006ca8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006caa:	2304      	movs	r3, #4
 8006cac:	e00e      	b.n	8006ccc <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cb2:	f003 0301 	and.w	r3, r3, #1
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d004      	beq.n	8006cc4 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2201      	movs	r2, #1
 8006cbe:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006cc0:	2301      	movs	r3, #1
 8006cc2:	e003      	b.n	8006ccc <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	22c5      	movs	r2, #197	; 0xc5
 8006cc8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8006cca:	2300      	movs	r3, #0
}
 8006ccc:	4618      	mov	r0, r3
 8006cce:	3714      	adds	r7, #20
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd6:	4770      	bx	lr
 8006cd8:	20000000 	.word	0x20000000
 8006cdc:	10624dd3 	.word	0x10624dd3

08006ce0 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8006ce0:	b480      	push	{r7}
 8006ce2:	b085      	sub	sp, #20
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006ce8:	4b1a      	ldr	r3, [pc, #104]	; (8006d54 <SDMMC_GetCmdResp3+0x74>)
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	4a1a      	ldr	r2, [pc, #104]	; (8006d58 <SDMMC_GetCmdResp3+0x78>)
 8006cee:	fba2 2303 	umull	r2, r3, r2, r3
 8006cf2:	0a5b      	lsrs	r3, r3, #9
 8006cf4:	f241 3288 	movw	r2, #5000	; 0x1388
 8006cf8:	fb02 f303 	mul.w	r3, r2, r3
 8006cfc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	1e5a      	subs	r2, r3, #1
 8006d02:	60fa      	str	r2, [r7, #12]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d102      	bne.n	8006d0e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006d08:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006d0c:	e01b      	b.n	8006d46 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d12:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006d14:	68bb      	ldr	r3, [r7, #8]
 8006d16:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d0ef      	beq.n	8006cfe <SDMMC_GetCmdResp3+0x1e>
 8006d1e:	68bb      	ldr	r3, [r7, #8]
 8006d20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d1ea      	bne.n	8006cfe <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d2c:	f003 0304 	and.w	r3, r3, #4
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d004      	beq.n	8006d3e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2204      	movs	r2, #4
 8006d38:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006d3a:	2304      	movs	r3, #4
 8006d3c:	e003      	b.n	8006d46 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	22c5      	movs	r2, #197	; 0xc5
 8006d42:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8006d44:	2300      	movs	r3, #0
}
 8006d46:	4618      	mov	r0, r3
 8006d48:	3714      	adds	r7, #20
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d50:	4770      	bx	lr
 8006d52:	bf00      	nop
 8006d54:	20000000 	.word	0x20000000
 8006d58:	10624dd3 	.word	0x10624dd3

08006d5c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b088      	sub	sp, #32
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	60f8      	str	r0, [r7, #12]
 8006d64:	460b      	mov	r3, r1
 8006d66:	607a      	str	r2, [r7, #4]
 8006d68:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006d6a:	4b35      	ldr	r3, [pc, #212]	; (8006e40 <SDMMC_GetCmdResp6+0xe4>)
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	4a35      	ldr	r2, [pc, #212]	; (8006e44 <SDMMC_GetCmdResp6+0xe8>)
 8006d70:	fba2 2303 	umull	r2, r3, r2, r3
 8006d74:	0a5b      	lsrs	r3, r3, #9
 8006d76:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d7a:	fb02 f303 	mul.w	r3, r2, r3
 8006d7e:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8006d80:	69fb      	ldr	r3, [r7, #28]
 8006d82:	1e5a      	subs	r2, r3, #1
 8006d84:	61fa      	str	r2, [r7, #28]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d102      	bne.n	8006d90 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006d8a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006d8e:	e052      	b.n	8006e36 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d94:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006d96:	69bb      	ldr	r3, [r7, #24]
 8006d98:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d0ef      	beq.n	8006d80 <SDMMC_GetCmdResp6+0x24>
 8006da0:	69bb      	ldr	r3, [r7, #24]
 8006da2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d1ea      	bne.n	8006d80 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006dae:	f003 0304 	and.w	r3, r3, #4
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d004      	beq.n	8006dc0 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	2204      	movs	r2, #4
 8006dba:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006dbc:	2304      	movs	r3, #4
 8006dbe:	e03a      	b.n	8006e36 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006dc4:	f003 0301 	and.w	r3, r3, #1
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d004      	beq.n	8006dd6 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	2201      	movs	r2, #1
 8006dd0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006dd2:	2301      	movs	r3, #1
 8006dd4:	e02f      	b.n	8006e36 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8006dd6:	68f8      	ldr	r0, [r7, #12]
 8006dd8:	f7ff fbcb 	bl	8006572 <SDIO_GetCommandResponse>
 8006ddc:	4603      	mov	r3, r0
 8006dde:	461a      	mov	r2, r3
 8006de0:	7afb      	ldrb	r3, [r7, #11]
 8006de2:	4293      	cmp	r3, r2
 8006de4:	d001      	beq.n	8006dea <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006de6:	2301      	movs	r3, #1
 8006de8:	e025      	b.n	8006e36 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	22c5      	movs	r2, #197	; 0xc5
 8006dee:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8006df0:	2100      	movs	r1, #0
 8006df2:	68f8      	ldr	r0, [r7, #12]
 8006df4:	f7ff fbca 	bl	800658c <SDIO_GetResponse>
 8006df8:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8006dfa:	697b      	ldr	r3, [r7, #20]
 8006dfc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d106      	bne.n	8006e12 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8006e04:	697b      	ldr	r3, [r7, #20]
 8006e06:	0c1b      	lsrs	r3, r3, #16
 8006e08:	b29a      	uxth	r2, r3
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8006e0e:	2300      	movs	r3, #0
 8006e10:	e011      	b.n	8006e36 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8006e12:	697b      	ldr	r3, [r7, #20]
 8006e14:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d002      	beq.n	8006e22 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8006e1c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006e20:	e009      	b.n	8006e36 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8006e22:	697b      	ldr	r3, [r7, #20]
 8006e24:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d002      	beq.n	8006e32 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8006e2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006e30:	e001      	b.n	8006e36 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8006e32:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8006e36:	4618      	mov	r0, r3
 8006e38:	3720      	adds	r7, #32
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	bd80      	pop	{r7, pc}
 8006e3e:	bf00      	nop
 8006e40:	20000000 	.word	0x20000000
 8006e44:	10624dd3 	.word	0x10624dd3

08006e48 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8006e48:	b480      	push	{r7}
 8006e4a:	b085      	sub	sp, #20
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006e50:	4b22      	ldr	r3, [pc, #136]	; (8006edc <SDMMC_GetCmdResp7+0x94>)
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	4a22      	ldr	r2, [pc, #136]	; (8006ee0 <SDMMC_GetCmdResp7+0x98>)
 8006e56:	fba2 2303 	umull	r2, r3, r2, r3
 8006e5a:	0a5b      	lsrs	r3, r3, #9
 8006e5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e60:	fb02 f303 	mul.w	r3, r2, r3
 8006e64:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	1e5a      	subs	r2, r3, #1
 8006e6a:	60fa      	str	r2, [r7, #12]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d102      	bne.n	8006e76 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006e70:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006e74:	e02c      	b.n	8006ed0 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e7a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006e7c:	68bb      	ldr	r3, [r7, #8]
 8006e7e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d0ef      	beq.n	8006e66 <SDMMC_GetCmdResp7+0x1e>
 8006e86:	68bb      	ldr	r3, [r7, #8]
 8006e88:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d1ea      	bne.n	8006e66 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e94:	f003 0304 	and.w	r3, r3, #4
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d004      	beq.n	8006ea6 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2204      	movs	r2, #4
 8006ea0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006ea2:	2304      	movs	r3, #4
 8006ea4:	e014      	b.n	8006ed0 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006eaa:	f003 0301 	and.w	r3, r3, #1
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d004      	beq.n	8006ebc <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	2201      	movs	r2, #1
 8006eb6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006eb8:	2301      	movs	r3, #1
 8006eba:	e009      	b.n	8006ed0 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ec0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d002      	beq.n	8006ece <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2240      	movs	r2, #64	; 0x40
 8006ecc:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8006ece:	2300      	movs	r3, #0
  
}
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	3714      	adds	r7, #20
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eda:	4770      	bx	lr
 8006edc:	20000000 	.word	0x20000000
 8006ee0:	10624dd3 	.word	0x10624dd3

08006ee4 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8006ee4:	b480      	push	{r7}
 8006ee6:	b085      	sub	sp, #20
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006eec:	4b11      	ldr	r3, [pc, #68]	; (8006f34 <SDMMC_GetCmdError+0x50>)
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	4a11      	ldr	r2, [pc, #68]	; (8006f38 <SDMMC_GetCmdError+0x54>)
 8006ef2:	fba2 2303 	umull	r2, r3, r2, r3
 8006ef6:	0a5b      	lsrs	r3, r3, #9
 8006ef8:	f241 3288 	movw	r2, #5000	; 0x1388
 8006efc:	fb02 f303 	mul.w	r3, r2, r3
 8006f00:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	1e5a      	subs	r2, r3, #1
 8006f06:	60fa      	str	r2, [r7, #12]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d102      	bne.n	8006f12 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006f0c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006f10:	e009      	b.n	8006f26 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d0f1      	beq.n	8006f02 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	22c5      	movs	r2, #197	; 0xc5
 8006f22:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8006f24:	2300      	movs	r3, #0
}
 8006f26:	4618      	mov	r0, r3
 8006f28:	3714      	adds	r7, #20
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f30:	4770      	bx	lr
 8006f32:	bf00      	nop
 8006f34:	20000000 	.word	0x20000000
 8006f38:	10624dd3 	.word	0x10624dd3

08006f3c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8006f40:	4904      	ldr	r1, [pc, #16]	; (8006f54 <MX_FATFS_Init+0x18>)
 8006f42:	4805      	ldr	r0, [pc, #20]	; (8006f58 <MX_FATFS_Init+0x1c>)
 8006f44:	f000 f9e4 	bl	8007310 <FATFS_LinkDriver>
 8006f48:	4603      	mov	r3, r0
 8006f4a:	461a      	mov	r2, r3
 8006f4c:	4b03      	ldr	r3, [pc, #12]	; (8006f5c <MX_FATFS_Init+0x20>)
 8006f4e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8006f50:	bf00      	nop
 8006f52:	bd80      	pop	{r7, pc}
 8006f54:	20000884 	.word	0x20000884
 8006f58:	08009730 	.word	0x08009730
 8006f5c:	20000880 	.word	0x20000880

08006f60 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8006f60:	b580      	push	{r7, lr}
 8006f62:	b082      	sub	sp, #8
 8006f64:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8006f66:	2300      	movs	r3, #0
 8006f68:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8006f6a:	f000 f879 	bl	8007060 <BSP_SD_IsDetected>
 8006f6e:	4603      	mov	r3, r0
 8006f70:	2b01      	cmp	r3, #1
 8006f72:	d001      	beq.n	8006f78 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8006f74:	2301      	movs	r3, #1
 8006f76:	e012      	b.n	8006f9e <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8006f78:	480b      	ldr	r0, [pc, #44]	; (8006fa8 <BSP_SD_Init+0x48>)
 8006f7a:	f7fd f881 	bl	8004080 <HAL_SD_Init>
 8006f7e:	4603      	mov	r3, r0
 8006f80:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8006f82:	79fb      	ldrb	r3, [r7, #7]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d109      	bne.n	8006f9c <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8006f88:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006f8c:	4806      	ldr	r0, [pc, #24]	; (8006fa8 <BSP_SD_Init+0x48>)
 8006f8e:	f7fd fe5b 	bl	8004c48 <HAL_SD_ConfigWideBusOperation>
 8006f92:	4603      	mov	r3, r0
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d001      	beq.n	8006f9c <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8006f98:	2301      	movs	r3, #1
 8006f9a:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8006f9c:	79fb      	ldrb	r3, [r7, #7]
}
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	3708      	adds	r7, #8
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	bd80      	pop	{r7, pc}
 8006fa6:	bf00      	nop
 8006fa8:	20000134 	.word	0x20000134

08006fac <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8006fac:	b580      	push	{r7, lr}
 8006fae:	b088      	sub	sp, #32
 8006fb0:	af02      	add	r7, sp, #8
 8006fb2:	60f8      	str	r0, [r7, #12]
 8006fb4:	60b9      	str	r1, [r7, #8]
 8006fb6:	607a      	str	r2, [r7, #4]
 8006fb8:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8006fba:	2300      	movs	r3, #0
 8006fbc:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8006fbe:	683b      	ldr	r3, [r7, #0]
 8006fc0:	9300      	str	r3, [sp, #0]
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	68ba      	ldr	r2, [r7, #8]
 8006fc6:	68f9      	ldr	r1, [r7, #12]
 8006fc8:	4806      	ldr	r0, [pc, #24]	; (8006fe4 <BSP_SD_ReadBlocks+0x38>)
 8006fca:	f7fd f909 	bl	80041e0 <HAL_SD_ReadBlocks>
 8006fce:	4603      	mov	r3, r0
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d001      	beq.n	8006fd8 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8006fd4:	2301      	movs	r3, #1
 8006fd6:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8006fd8:	7dfb      	ldrb	r3, [r7, #23]
}
 8006fda:	4618      	mov	r0, r3
 8006fdc:	3718      	adds	r7, #24
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	bd80      	pop	{r7, pc}
 8006fe2:	bf00      	nop
 8006fe4:	20000134 	.word	0x20000134

08006fe8 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b088      	sub	sp, #32
 8006fec:	af02      	add	r7, sp, #8
 8006fee:	60f8      	str	r0, [r7, #12]
 8006ff0:	60b9      	str	r1, [r7, #8]
 8006ff2:	607a      	str	r2, [r7, #4]
 8006ff4:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	9300      	str	r3, [sp, #0]
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	68ba      	ldr	r2, [r7, #8]
 8007002:	68f9      	ldr	r1, [r7, #12]
 8007004:	4806      	ldr	r0, [pc, #24]	; (8007020 <BSP_SD_WriteBlocks+0x38>)
 8007006:	f7fd fac9 	bl	800459c <HAL_SD_WriteBlocks>
 800700a:	4603      	mov	r3, r0
 800700c:	2b00      	cmp	r3, #0
 800700e:	d001      	beq.n	8007014 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8007010:	2301      	movs	r3, #1
 8007012:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8007014:	7dfb      	ldrb	r3, [r7, #23]
}
 8007016:	4618      	mov	r0, r3
 8007018:	3718      	adds	r7, #24
 800701a:	46bd      	mov	sp, r7
 800701c:	bd80      	pop	{r7, pc}
 800701e:	bf00      	nop
 8007020:	20000134 	.word	0x20000134

08007024 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8007024:	b580      	push	{r7, lr}
 8007026:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8007028:	4805      	ldr	r0, [pc, #20]	; (8007040 <BSP_SD_GetCardState+0x1c>)
 800702a:	f7fd fea7 	bl	8004d7c <HAL_SD_GetCardState>
 800702e:	4603      	mov	r3, r0
 8007030:	2b04      	cmp	r3, #4
 8007032:	bf14      	ite	ne
 8007034:	2301      	movne	r3, #1
 8007036:	2300      	moveq	r3, #0
 8007038:	b2db      	uxtb	r3, r3
}
 800703a:	4618      	mov	r0, r3
 800703c:	bd80      	pop	{r7, pc}
 800703e:	bf00      	nop
 8007040:	20000134 	.word	0x20000134

08007044 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8007044:	b580      	push	{r7, lr}
 8007046:	b082      	sub	sp, #8
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800704c:	6879      	ldr	r1, [r7, #4]
 800704e:	4803      	ldr	r0, [pc, #12]	; (800705c <BSP_SD_GetCardInfo+0x18>)
 8007050:	f7fd fdce 	bl	8004bf0 <HAL_SD_GetCardInfo>
}
 8007054:	bf00      	nop
 8007056:	3708      	adds	r7, #8
 8007058:	46bd      	mov	sp, r7
 800705a:	bd80      	pop	{r7, pc}
 800705c:	20000134 	.word	0x20000134

08007060 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8007060:	b580      	push	{r7, lr}
 8007062:	b082      	sub	sp, #8
 8007064:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8007066:	2301      	movs	r3, #1
 8007068:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800706a:	f000 f80b 	bl	8007084 <BSP_PlatformIsDetected>
 800706e:	4603      	mov	r3, r0
 8007070:	2b00      	cmp	r3, #0
 8007072:	d101      	bne.n	8007078 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8007074:	2300      	movs	r3, #0
 8007076:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8007078:	79fb      	ldrb	r3, [r7, #7]
 800707a:	b2db      	uxtb	r3, r3
}
 800707c:	4618      	mov	r0, r3
 800707e:	3708      	adds	r7, #8
 8007080:	46bd      	mov	sp, r7
 8007082:	bd80      	pop	{r7, pc}

08007084 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8007084:	b580      	push	{r7, lr}
 8007086:	b082      	sub	sp, #8
 8007088:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800708a:	2301      	movs	r3, #1
 800708c:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800708e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007092:	4806      	ldr	r0, [pc, #24]	; (80070ac <BSP_PlatformIsDetected+0x28>)
 8007094:	f7fb f856 	bl	8002144 <HAL_GPIO_ReadPin>
 8007098:	4603      	mov	r3, r0
 800709a:	2b00      	cmp	r3, #0
 800709c:	d001      	beq.n	80070a2 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800709e:	2300      	movs	r3, #0
 80070a0:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 80070a2:	79fb      	ldrb	r3, [r7, #7]
}
 80070a4:	4618      	mov	r0, r3
 80070a6:	3708      	adds	r7, #8
 80070a8:	46bd      	mov	sp, r7
 80070aa:	bd80      	pop	{r7, pc}
 80070ac:	40020000 	.word	0x40020000

080070b0 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b082      	sub	sp, #8
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	4603      	mov	r3, r0
 80070b8:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80070ba:	4b0b      	ldr	r3, [pc, #44]	; (80070e8 <SD_CheckStatus+0x38>)
 80070bc:	2201      	movs	r2, #1
 80070be:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 80070c0:	f7ff ffb0 	bl	8007024 <BSP_SD_GetCardState>
 80070c4:	4603      	mov	r3, r0
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d107      	bne.n	80070da <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80070ca:	4b07      	ldr	r3, [pc, #28]	; (80070e8 <SD_CheckStatus+0x38>)
 80070cc:	781b      	ldrb	r3, [r3, #0]
 80070ce:	b2db      	uxtb	r3, r3
 80070d0:	f023 0301 	bic.w	r3, r3, #1
 80070d4:	b2da      	uxtb	r2, r3
 80070d6:	4b04      	ldr	r3, [pc, #16]	; (80070e8 <SD_CheckStatus+0x38>)
 80070d8:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80070da:	4b03      	ldr	r3, [pc, #12]	; (80070e8 <SD_CheckStatus+0x38>)
 80070dc:	781b      	ldrb	r3, [r3, #0]
 80070de:	b2db      	uxtb	r3, r3
}
 80070e0:	4618      	mov	r0, r3
 80070e2:	3708      	adds	r7, #8
 80070e4:	46bd      	mov	sp, r7
 80070e6:	bd80      	pop	{r7, pc}
 80070e8:	20000009 	.word	0x20000009

080070ec <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80070ec:	b580      	push	{r7, lr}
 80070ee:	b082      	sub	sp, #8
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	4603      	mov	r3, r0
 80070f4:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 80070f6:	4b0b      	ldr	r3, [pc, #44]	; (8007124 <SD_initialize+0x38>)
 80070f8:	2201      	movs	r2, #1
 80070fa:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 80070fc:	f7ff ff30 	bl	8006f60 <BSP_SD_Init>
 8007100:	4603      	mov	r3, r0
 8007102:	2b00      	cmp	r3, #0
 8007104:	d107      	bne.n	8007116 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 8007106:	79fb      	ldrb	r3, [r7, #7]
 8007108:	4618      	mov	r0, r3
 800710a:	f7ff ffd1 	bl	80070b0 <SD_CheckStatus>
 800710e:	4603      	mov	r3, r0
 8007110:	461a      	mov	r2, r3
 8007112:	4b04      	ldr	r3, [pc, #16]	; (8007124 <SD_initialize+0x38>)
 8007114:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8007116:	4b03      	ldr	r3, [pc, #12]	; (8007124 <SD_initialize+0x38>)
 8007118:	781b      	ldrb	r3, [r3, #0]
 800711a:	b2db      	uxtb	r3, r3
}
 800711c:	4618      	mov	r0, r3
 800711e:	3708      	adds	r7, #8
 8007120:	46bd      	mov	sp, r7
 8007122:	bd80      	pop	{r7, pc}
 8007124:	20000009 	.word	0x20000009

08007128 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8007128:	b580      	push	{r7, lr}
 800712a:	b082      	sub	sp, #8
 800712c:	af00      	add	r7, sp, #0
 800712e:	4603      	mov	r3, r0
 8007130:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8007132:	79fb      	ldrb	r3, [r7, #7]
 8007134:	4618      	mov	r0, r3
 8007136:	f7ff ffbb 	bl	80070b0 <SD_CheckStatus>
 800713a:	4603      	mov	r3, r0
}
 800713c:	4618      	mov	r0, r3
 800713e:	3708      	adds	r7, #8
 8007140:	46bd      	mov	sp, r7
 8007142:	bd80      	pop	{r7, pc}

08007144 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8007144:	b580      	push	{r7, lr}
 8007146:	b086      	sub	sp, #24
 8007148:	af00      	add	r7, sp, #0
 800714a:	60b9      	str	r1, [r7, #8]
 800714c:	607a      	str	r2, [r7, #4]
 800714e:	603b      	str	r3, [r7, #0]
 8007150:	4603      	mov	r3, r0
 8007152:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8007154:	2301      	movs	r3, #1
 8007156:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8007158:	f04f 33ff 	mov.w	r3, #4294967295
 800715c:	683a      	ldr	r2, [r7, #0]
 800715e:	6879      	ldr	r1, [r7, #4]
 8007160:	68b8      	ldr	r0, [r7, #8]
 8007162:	f7ff ff23 	bl	8006fac <BSP_SD_ReadBlocks>
 8007166:	4603      	mov	r3, r0
 8007168:	2b00      	cmp	r3, #0
 800716a:	d107      	bne.n	800717c <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800716c:	bf00      	nop
 800716e:	f7ff ff59 	bl	8007024 <BSP_SD_GetCardState>
 8007172:	4603      	mov	r3, r0
 8007174:	2b00      	cmp	r3, #0
 8007176:	d1fa      	bne.n	800716e <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8007178:	2300      	movs	r3, #0
 800717a:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800717c:	7dfb      	ldrb	r3, [r7, #23]
}
 800717e:	4618      	mov	r0, r3
 8007180:	3718      	adds	r7, #24
 8007182:	46bd      	mov	sp, r7
 8007184:	bd80      	pop	{r7, pc}

08007186 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8007186:	b580      	push	{r7, lr}
 8007188:	b086      	sub	sp, #24
 800718a:	af00      	add	r7, sp, #0
 800718c:	60b9      	str	r1, [r7, #8]
 800718e:	607a      	str	r2, [r7, #4]
 8007190:	603b      	str	r3, [r7, #0]
 8007192:	4603      	mov	r3, r0
 8007194:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8007196:	2301      	movs	r3, #1
 8007198:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800719a:	f04f 33ff 	mov.w	r3, #4294967295
 800719e:	683a      	ldr	r2, [r7, #0]
 80071a0:	6879      	ldr	r1, [r7, #4]
 80071a2:	68b8      	ldr	r0, [r7, #8]
 80071a4:	f7ff ff20 	bl	8006fe8 <BSP_SD_WriteBlocks>
 80071a8:	4603      	mov	r3, r0
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d107      	bne.n	80071be <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 80071ae:	bf00      	nop
 80071b0:	f7ff ff38 	bl	8007024 <BSP_SD_GetCardState>
 80071b4:	4603      	mov	r3, r0
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d1fa      	bne.n	80071b0 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 80071ba:	2300      	movs	r3, #0
 80071bc:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 80071be:	7dfb      	ldrb	r3, [r7, #23]
}
 80071c0:	4618      	mov	r0, r3
 80071c2:	3718      	adds	r7, #24
 80071c4:	46bd      	mov	sp, r7
 80071c6:	bd80      	pop	{r7, pc}

080071c8 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b08c      	sub	sp, #48	; 0x30
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	4603      	mov	r3, r0
 80071d0:	603a      	str	r2, [r7, #0]
 80071d2:	71fb      	strb	r3, [r7, #7]
 80071d4:	460b      	mov	r3, r1
 80071d6:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80071d8:	2301      	movs	r3, #1
 80071da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80071de:	4b25      	ldr	r3, [pc, #148]	; (8007274 <SD_ioctl+0xac>)
 80071e0:	781b      	ldrb	r3, [r3, #0]
 80071e2:	b2db      	uxtb	r3, r3
 80071e4:	f003 0301 	and.w	r3, r3, #1
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d001      	beq.n	80071f0 <SD_ioctl+0x28>
 80071ec:	2303      	movs	r3, #3
 80071ee:	e03c      	b.n	800726a <SD_ioctl+0xa2>

  switch (cmd)
 80071f0:	79bb      	ldrb	r3, [r7, #6]
 80071f2:	2b03      	cmp	r3, #3
 80071f4:	d834      	bhi.n	8007260 <SD_ioctl+0x98>
 80071f6:	a201      	add	r2, pc, #4	; (adr r2, 80071fc <SD_ioctl+0x34>)
 80071f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071fc:	0800720d 	.word	0x0800720d
 8007200:	08007215 	.word	0x08007215
 8007204:	0800722d 	.word	0x0800722d
 8007208:	08007247 	.word	0x08007247
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800720c:	2300      	movs	r3, #0
 800720e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8007212:	e028      	b.n	8007266 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8007214:	f107 030c 	add.w	r3, r7, #12
 8007218:	4618      	mov	r0, r3
 800721a:	f7ff ff13 	bl	8007044 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800721e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007220:	683b      	ldr	r3, [r7, #0]
 8007222:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8007224:	2300      	movs	r3, #0
 8007226:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800722a:	e01c      	b.n	8007266 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800722c:	f107 030c 	add.w	r3, r7, #12
 8007230:	4618      	mov	r0, r3
 8007232:	f7ff ff07 	bl	8007044 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8007236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007238:	b29a      	uxth	r2, r3
 800723a:	683b      	ldr	r3, [r7, #0]
 800723c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800723e:	2300      	movs	r3, #0
 8007240:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8007244:	e00f      	b.n	8007266 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8007246:	f107 030c 	add.w	r3, r7, #12
 800724a:	4618      	mov	r0, r3
 800724c:	f7ff fefa 	bl	8007044 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8007250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007252:	0a5a      	lsrs	r2, r3, #9
 8007254:	683b      	ldr	r3, [r7, #0]
 8007256:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8007258:	2300      	movs	r3, #0
 800725a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800725e:	e002      	b.n	8007266 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8007260:	2304      	movs	r3, #4
 8007262:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8007266:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800726a:	4618      	mov	r0, r3
 800726c:	3730      	adds	r7, #48	; 0x30
 800726e:	46bd      	mov	sp, r7
 8007270:	bd80      	pop	{r7, pc}
 8007272:	bf00      	nop
 8007274:	20000009 	.word	0x20000009

08007278 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8007278:	b480      	push	{r7}
 800727a:	b087      	sub	sp, #28
 800727c:	af00      	add	r7, sp, #0
 800727e:	60f8      	str	r0, [r7, #12]
 8007280:	60b9      	str	r1, [r7, #8]
 8007282:	4613      	mov	r3, r2
 8007284:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8007286:	2301      	movs	r3, #1
 8007288:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800728a:	2300      	movs	r3, #0
 800728c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800728e:	4b1f      	ldr	r3, [pc, #124]	; (800730c <FATFS_LinkDriverEx+0x94>)
 8007290:	7a5b      	ldrb	r3, [r3, #9]
 8007292:	b2db      	uxtb	r3, r3
 8007294:	2b00      	cmp	r3, #0
 8007296:	d131      	bne.n	80072fc <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8007298:	4b1c      	ldr	r3, [pc, #112]	; (800730c <FATFS_LinkDriverEx+0x94>)
 800729a:	7a5b      	ldrb	r3, [r3, #9]
 800729c:	b2db      	uxtb	r3, r3
 800729e:	461a      	mov	r2, r3
 80072a0:	4b1a      	ldr	r3, [pc, #104]	; (800730c <FATFS_LinkDriverEx+0x94>)
 80072a2:	2100      	movs	r1, #0
 80072a4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80072a6:	4b19      	ldr	r3, [pc, #100]	; (800730c <FATFS_LinkDriverEx+0x94>)
 80072a8:	7a5b      	ldrb	r3, [r3, #9]
 80072aa:	b2db      	uxtb	r3, r3
 80072ac:	4a17      	ldr	r2, [pc, #92]	; (800730c <FATFS_LinkDriverEx+0x94>)
 80072ae:	009b      	lsls	r3, r3, #2
 80072b0:	4413      	add	r3, r2
 80072b2:	68fa      	ldr	r2, [r7, #12]
 80072b4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80072b6:	4b15      	ldr	r3, [pc, #84]	; (800730c <FATFS_LinkDriverEx+0x94>)
 80072b8:	7a5b      	ldrb	r3, [r3, #9]
 80072ba:	b2db      	uxtb	r3, r3
 80072bc:	461a      	mov	r2, r3
 80072be:	4b13      	ldr	r3, [pc, #76]	; (800730c <FATFS_LinkDriverEx+0x94>)
 80072c0:	4413      	add	r3, r2
 80072c2:	79fa      	ldrb	r2, [r7, #7]
 80072c4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80072c6:	4b11      	ldr	r3, [pc, #68]	; (800730c <FATFS_LinkDriverEx+0x94>)
 80072c8:	7a5b      	ldrb	r3, [r3, #9]
 80072ca:	b2db      	uxtb	r3, r3
 80072cc:	1c5a      	adds	r2, r3, #1
 80072ce:	b2d1      	uxtb	r1, r2
 80072d0:	4a0e      	ldr	r2, [pc, #56]	; (800730c <FATFS_LinkDriverEx+0x94>)
 80072d2:	7251      	strb	r1, [r2, #9]
 80072d4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80072d6:	7dbb      	ldrb	r3, [r7, #22]
 80072d8:	3330      	adds	r3, #48	; 0x30
 80072da:	b2da      	uxtb	r2, r3
 80072dc:	68bb      	ldr	r3, [r7, #8]
 80072de:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80072e0:	68bb      	ldr	r3, [r7, #8]
 80072e2:	3301      	adds	r3, #1
 80072e4:	223a      	movs	r2, #58	; 0x3a
 80072e6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80072e8:	68bb      	ldr	r3, [r7, #8]
 80072ea:	3302      	adds	r3, #2
 80072ec:	222f      	movs	r2, #47	; 0x2f
 80072ee:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80072f0:	68bb      	ldr	r3, [r7, #8]
 80072f2:	3303      	adds	r3, #3
 80072f4:	2200      	movs	r2, #0
 80072f6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80072f8:	2300      	movs	r3, #0
 80072fa:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80072fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80072fe:	4618      	mov	r0, r3
 8007300:	371c      	adds	r7, #28
 8007302:	46bd      	mov	sp, r7
 8007304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007308:	4770      	bx	lr
 800730a:	bf00      	nop
 800730c:	20000888 	.word	0x20000888

08007310 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8007310:	b580      	push	{r7, lr}
 8007312:	b082      	sub	sp, #8
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
 8007318:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800731a:	2200      	movs	r2, #0
 800731c:	6839      	ldr	r1, [r7, #0]
 800731e:	6878      	ldr	r0, [r7, #4]
 8007320:	f7ff ffaa 	bl	8007278 <FATFS_LinkDriverEx>
 8007324:	4603      	mov	r3, r0
}
 8007326:	4618      	mov	r0, r3
 8007328:	3708      	adds	r7, #8
 800732a:	46bd      	mov	sp, r7
 800732c:	bd80      	pop	{r7, pc}
	...

08007330 <arm_rfft_32_fast_init_f32>:
 8007330:	b178      	cbz	r0, 8007352 <arm_rfft_32_fast_init_f32+0x22>
 8007332:	b430      	push	{r4, r5}
 8007334:	4908      	ldr	r1, [pc, #32]	; (8007358 <arm_rfft_32_fast_init_f32+0x28>)
 8007336:	4a09      	ldr	r2, [pc, #36]	; (800735c <arm_rfft_32_fast_init_f32+0x2c>)
 8007338:	2310      	movs	r3, #16
 800733a:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800733e:	8003      	strh	r3, [r0, #0]
 8007340:	2520      	movs	r5, #32
 8007342:	2414      	movs	r4, #20
 8007344:	4b06      	ldr	r3, [pc, #24]	; (8007360 <arm_rfft_32_fast_init_f32+0x30>)
 8007346:	8205      	strh	r5, [r0, #16]
 8007348:	8184      	strh	r4, [r0, #12]
 800734a:	6143      	str	r3, [r0, #20]
 800734c:	bc30      	pop	{r4, r5}
 800734e:	2000      	movs	r0, #0
 8007350:	4770      	bx	lr
 8007352:	f04f 30ff 	mov.w	r0, #4294967295
 8007356:	4770      	bx	lr
 8007358:	0800a6f4 	.word	0x0800a6f4
 800735c:	0800f02c 	.word	0x0800f02c
 8007360:	08017dac 	.word	0x08017dac

08007364 <arm_rfft_64_fast_init_f32>:
 8007364:	b178      	cbz	r0, 8007386 <arm_rfft_64_fast_init_f32+0x22>
 8007366:	b430      	push	{r4, r5}
 8007368:	4908      	ldr	r1, [pc, #32]	; (800738c <arm_rfft_64_fast_init_f32+0x28>)
 800736a:	4a09      	ldr	r2, [pc, #36]	; (8007390 <arm_rfft_64_fast_init_f32+0x2c>)
 800736c:	2320      	movs	r3, #32
 800736e:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8007372:	8003      	strh	r3, [r0, #0]
 8007374:	2540      	movs	r5, #64	; 0x40
 8007376:	2430      	movs	r4, #48	; 0x30
 8007378:	4b06      	ldr	r3, [pc, #24]	; (8007394 <arm_rfft_64_fast_init_f32+0x30>)
 800737a:	8205      	strh	r5, [r0, #16]
 800737c:	8184      	strh	r4, [r0, #12]
 800737e:	6143      	str	r3, [r0, #20]
 8007380:	bc30      	pop	{r4, r5}
 8007382:	2000      	movs	r0, #0
 8007384:	4770      	bx	lr
 8007386:	f04f 30ff 	mov.w	r0, #4294967295
 800738a:	4770      	bx	lr
 800738c:	0800c84c 	.word	0x0800c84c
 8007390:	080138ac 	.word	0x080138ac
 8007394:	0801c62c 	.word	0x0801c62c

08007398 <arm_rfft_256_fast_init_f32>:
 8007398:	b180      	cbz	r0, 80073bc <arm_rfft_256_fast_init_f32+0x24>
 800739a:	b430      	push	{r4, r5}
 800739c:	4909      	ldr	r1, [pc, #36]	; (80073c4 <arm_rfft_256_fast_init_f32+0x2c>)
 800739e:	4a0a      	ldr	r2, [pc, #40]	; (80073c8 <arm_rfft_256_fast_init_f32+0x30>)
 80073a0:	2380      	movs	r3, #128	; 0x80
 80073a2:	e9c0 2101 	strd	r2, r1, [r0, #4]
 80073a6:	8003      	strh	r3, [r0, #0]
 80073a8:	f44f 7580 	mov.w	r5, #256	; 0x100
 80073ac:	24d0      	movs	r4, #208	; 0xd0
 80073ae:	4b07      	ldr	r3, [pc, #28]	; (80073cc <arm_rfft_256_fast_init_f32+0x34>)
 80073b0:	8205      	strh	r5, [r0, #16]
 80073b2:	8184      	strh	r4, [r0, #12]
 80073b4:	6143      	str	r3, [r0, #20]
 80073b6:	bc30      	pop	{r4, r5}
 80073b8:	2000      	movs	r0, #0
 80073ba:	4770      	bx	lr
 80073bc:	f04f 30ff 	mov.w	r0, #4294967295
 80073c0:	4770      	bx	lr
 80073c2:	bf00      	nop
 80073c4:	0800a554 	.word	0x0800a554
 80073c8:	0800ec2c 	.word	0x0800ec2c
 80073cc:	080179ac 	.word	0x080179ac

080073d0 <arm_rfft_512_fast_init_f32>:
 80073d0:	b190      	cbz	r0, 80073f8 <arm_rfft_512_fast_init_f32+0x28>
 80073d2:	b430      	push	{r4, r5}
 80073d4:	490a      	ldr	r1, [pc, #40]	; (8007400 <arm_rfft_512_fast_init_f32+0x30>)
 80073d6:	4a0b      	ldr	r2, [pc, #44]	; (8007404 <arm_rfft_512_fast_init_f32+0x34>)
 80073d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80073dc:	e9c0 2101 	strd	r2, r1, [r0, #4]
 80073e0:	8003      	strh	r3, [r0, #0]
 80073e2:	f44f 7500 	mov.w	r5, #512	; 0x200
 80073e6:	f44f 74dc 	mov.w	r4, #440	; 0x1b8
 80073ea:	4b07      	ldr	r3, [pc, #28]	; (8007408 <arm_rfft_512_fast_init_f32+0x38>)
 80073ec:	8205      	strh	r5, [r0, #16]
 80073ee:	8184      	strh	r4, [r0, #12]
 80073f0:	6143      	str	r3, [r0, #20]
 80073f2:	bc30      	pop	{r4, r5}
 80073f4:	2000      	movs	r0, #0
 80073f6:	4770      	bx	lr
 80073f8:	f04f 30ff 	mov.w	r0, #4294967295
 80073fc:	4770      	bx	lr
 80073fe:	bf00      	nop
 8007400:	0800c4dc 	.word	0x0800c4dc
 8007404:	080130ac 	.word	0x080130ac
 8007408:	0801be2c 	.word	0x0801be2c

0800740c <arm_rfft_1024_fast_init_f32>:
 800740c:	b190      	cbz	r0, 8007434 <arm_rfft_1024_fast_init_f32+0x28>
 800740e:	b430      	push	{r4, r5}
 8007410:	490a      	ldr	r1, [pc, #40]	; (800743c <arm_rfft_1024_fast_init_f32+0x30>)
 8007412:	4a0b      	ldr	r2, [pc, #44]	; (8007440 <arm_rfft_1024_fast_init_f32+0x34>)
 8007414:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007418:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800741c:	8003      	strh	r3, [r0, #0]
 800741e:	f44f 6580 	mov.w	r5, #1024	; 0x400
 8007422:	f44f 74e0 	mov.w	r4, #448	; 0x1c0
 8007426:	4b07      	ldr	r3, [pc, #28]	; (8007444 <arm_rfft_1024_fast_init_f32+0x38>)
 8007428:	8205      	strh	r5, [r0, #16]
 800742a:	8184      	strh	r4, [r0, #12]
 800742c:	6143      	str	r3, [r0, #20]
 800742e:	bc30      	pop	{r4, r5}
 8007430:	2000      	movs	r0, #0
 8007432:	4770      	bx	lr
 8007434:	f04f 30ff 	mov.w	r0, #4294967295
 8007438:	4770      	bx	lr
 800743a:	bf00      	nop
 800743c:	0800c8ac 	.word	0x0800c8ac
 8007440:	080139ac 	.word	0x080139ac
 8007444:	080149ac 	.word	0x080149ac

08007448 <arm_rfft_2048_fast_init_f32>:
 8007448:	b190      	cbz	r0, 8007470 <arm_rfft_2048_fast_init_f32+0x28>
 800744a:	b430      	push	{r4, r5}
 800744c:	490a      	ldr	r1, [pc, #40]	; (8007478 <arm_rfft_2048_fast_init_f32+0x30>)
 800744e:	4a0b      	ldr	r2, [pc, #44]	; (800747c <arm_rfft_2048_fast_init_f32+0x34>)
 8007450:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007454:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8007458:	8003      	strh	r3, [r0, #0]
 800745a:	f44f 6500 	mov.w	r5, #2048	; 0x800
 800745e:	f44f 64e1 	mov.w	r4, #1800	; 0x708
 8007462:	4b07      	ldr	r3, [pc, #28]	; (8007480 <arm_rfft_2048_fast_init_f32+0x38>)
 8007464:	8205      	strh	r5, [r0, #16]
 8007466:	8184      	strh	r4, [r0, #12]
 8007468:	6143      	str	r3, [r0, #20]
 800746a:	bc30      	pop	{r4, r5}
 800746c:	2000      	movs	r0, #0
 800746e:	4770      	bx	lr
 8007470:	f04f 30ff 	mov.w	r0, #4294967295
 8007474:	4770      	bx	lr
 8007476:	bf00      	nop
 8007478:	08009744 	.word	0x08009744
 800747c:	0800cc2c 	.word	0x0800cc2c
 8007480:	080159ac 	.word	0x080159ac

08007484 <arm_rfft_4096_fast_init_f32>:
 8007484:	b190      	cbz	r0, 80074ac <arm_rfft_4096_fast_init_f32+0x28>
 8007486:	b430      	push	{r4, r5}
 8007488:	490a      	ldr	r1, [pc, #40]	; (80074b4 <arm_rfft_4096_fast_init_f32+0x30>)
 800748a:	4a0b      	ldr	r2, [pc, #44]	; (80074b8 <arm_rfft_4096_fast_init_f32+0x34>)
 800748c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007490:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8007494:	8003      	strh	r3, [r0, #0]
 8007496:	f44f 5580 	mov.w	r5, #4096	; 0x1000
 800749a:	f44f 646e 	mov.w	r4, #3808	; 0xee0
 800749e:	4b07      	ldr	r3, [pc, #28]	; (80074bc <arm_rfft_4096_fast_init_f32+0x38>)
 80074a0:	8205      	strh	r5, [r0, #16]
 80074a2:	8184      	strh	r4, [r0, #12]
 80074a4:	6143      	str	r3, [r0, #20]
 80074a6:	bc30      	pop	{r4, r5}
 80074a8:	2000      	movs	r0, #0
 80074aa:	4770      	bx	lr
 80074ac:	f04f 30ff 	mov.w	r0, #4294967295
 80074b0:	4770      	bx	lr
 80074b2:	bf00      	nop
 80074b4:	0800a71c 	.word	0x0800a71c
 80074b8:	0800f0ac 	.word	0x0800f0ac
 80074bc:	08017e2c 	.word	0x08017e2c

080074c0 <arm_rfft_fast_init_f32>:
 80074c0:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80074c4:	d01f      	beq.n	8007506 <arm_rfft_fast_init_f32+0x46>
 80074c6:	d90b      	bls.n	80074e0 <arm_rfft_fast_init_f32+0x20>
 80074c8:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 80074cc:	d019      	beq.n	8007502 <arm_rfft_fast_init_f32+0x42>
 80074ce:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 80074d2:	d012      	beq.n	80074fa <arm_rfft_fast_init_f32+0x3a>
 80074d4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80074d8:	d00d      	beq.n	80074f6 <arm_rfft_fast_init_f32+0x36>
 80074da:	f04f 30ff 	mov.w	r0, #4294967295
 80074de:	4770      	bx	lr
 80074e0:	2940      	cmp	r1, #64	; 0x40
 80074e2:	d00c      	beq.n	80074fe <arm_rfft_fast_init_f32+0x3e>
 80074e4:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 80074e8:	d003      	beq.n	80074f2 <arm_rfft_fast_init_f32+0x32>
 80074ea:	2920      	cmp	r1, #32
 80074ec:	d1f5      	bne.n	80074da <arm_rfft_fast_init_f32+0x1a>
 80074ee:	4b07      	ldr	r3, [pc, #28]	; (800750c <arm_rfft_fast_init_f32+0x4c>)
 80074f0:	4718      	bx	r3
 80074f2:	4b07      	ldr	r3, [pc, #28]	; (8007510 <arm_rfft_fast_init_f32+0x50>)
 80074f4:	4718      	bx	r3
 80074f6:	4b07      	ldr	r3, [pc, #28]	; (8007514 <arm_rfft_fast_init_f32+0x54>)
 80074f8:	4718      	bx	r3
 80074fa:	4b07      	ldr	r3, [pc, #28]	; (8007518 <arm_rfft_fast_init_f32+0x58>)
 80074fc:	4718      	bx	r3
 80074fe:	4b07      	ldr	r3, [pc, #28]	; (800751c <arm_rfft_fast_init_f32+0x5c>)
 8007500:	e7f6      	b.n	80074f0 <arm_rfft_fast_init_f32+0x30>
 8007502:	4b07      	ldr	r3, [pc, #28]	; (8007520 <arm_rfft_fast_init_f32+0x60>)
 8007504:	e7f4      	b.n	80074f0 <arm_rfft_fast_init_f32+0x30>
 8007506:	4b07      	ldr	r3, [pc, #28]	; (8007524 <arm_rfft_fast_init_f32+0x64>)
 8007508:	e7f2      	b.n	80074f0 <arm_rfft_fast_init_f32+0x30>
 800750a:	bf00      	nop
 800750c:	08007331 	.word	0x08007331
 8007510:	08007399 	.word	0x08007399
 8007514:	0800740d 	.word	0x0800740d
 8007518:	08007485 	.word	0x08007485
 800751c:	08007365 	.word	0x08007365
 8007520:	08007449 	.word	0x08007449
 8007524:	080073d1 	.word	0x080073d1

08007528 <stage_rfft_f32>:
 8007528:	b410      	push	{r4}
 800752a:	edd1 7a00 	vldr	s15, [r1]
 800752e:	ed91 7a01 	vldr	s14, [r1, #4]
 8007532:	8804      	ldrh	r4, [r0, #0]
 8007534:	6940      	ldr	r0, [r0, #20]
 8007536:	ee37 7a07 	vadd.f32	s14, s14, s14
 800753a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800753e:	eeb6 4a00 	vmov.f32	s8, #96	; 0x3f000000  0.5
 8007542:	ee77 6a87 	vadd.f32	s13, s15, s14
 8007546:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800754a:	3c01      	subs	r4, #1
 800754c:	ee26 7a84 	vmul.f32	s14, s13, s8
 8007550:	ee67 7a84 	vmul.f32	s15, s15, s8
 8007554:	eb01 03c4 	add.w	r3, r1, r4, lsl #3
 8007558:	ed82 7a00 	vstr	s14, [r2]
 800755c:	edc2 7a01 	vstr	s15, [r2, #4]
 8007560:	3010      	adds	r0, #16
 8007562:	3210      	adds	r2, #16
 8007564:	3b08      	subs	r3, #8
 8007566:	3110      	adds	r1, #16
 8007568:	ed11 5a02 	vldr	s10, [r1, #-8]
 800756c:	ed93 7a02 	vldr	s14, [r3, #8]
 8007570:	ed50 6a02 	vldr	s13, [r0, #-8]
 8007574:	edd3 4a03 	vldr	s9, [r3, #12]
 8007578:	ed51 7a01 	vldr	s15, [r1, #-4]
 800757c:	ed10 6a01 	vldr	s12, [r0, #-4]
 8007580:	ee77 5a45 	vsub.f32	s11, s14, s10
 8007584:	ee37 7a05 	vadd.f32	s14, s14, s10
 8007588:	ee66 3aa5 	vmul.f32	s7, s13, s11
 800758c:	ee34 5aa7 	vadd.f32	s10, s9, s15
 8007590:	ee66 5a25 	vmul.f32	s11, s12, s11
 8007594:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8007598:	ee37 7a23 	vadd.f32	s14, s14, s7
 800759c:	ee66 6a85 	vmul.f32	s13, s13, s10
 80075a0:	ee26 6a05 	vmul.f32	s12, s12, s10
 80075a4:	ee77 7aa5 	vadd.f32	s15, s15, s11
 80075a8:	ee37 7a06 	vadd.f32	s14, s14, s12
 80075ac:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80075b0:	ee27 7a04 	vmul.f32	s14, s14, s8
 80075b4:	ee67 7a84 	vmul.f32	s15, s15, s8
 80075b8:	3c01      	subs	r4, #1
 80075ba:	ed02 7a02 	vstr	s14, [r2, #-8]
 80075be:	ed42 7a01 	vstr	s15, [r2, #-4]
 80075c2:	f1a3 0308 	sub.w	r3, r3, #8
 80075c6:	f101 0108 	add.w	r1, r1, #8
 80075ca:	f100 0008 	add.w	r0, r0, #8
 80075ce:	f102 0208 	add.w	r2, r2, #8
 80075d2:	d1c9      	bne.n	8007568 <stage_rfft_f32+0x40>
 80075d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80075d8:	4770      	bx	lr
 80075da:	bf00      	nop

080075dc <merge_rfft_f32>:
 80075dc:	b410      	push	{r4}
 80075de:	edd1 7a00 	vldr	s15, [r1]
 80075e2:	edd1 6a01 	vldr	s13, [r1, #4]
 80075e6:	8804      	ldrh	r4, [r0, #0]
 80075e8:	6940      	ldr	r0, [r0, #20]
 80075ea:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80075ee:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80075f2:	eeb6 4a00 	vmov.f32	s8, #96	; 0x3f000000  0.5
 80075f6:	ee27 7a04 	vmul.f32	s14, s14, s8
 80075fa:	ee67 7a84 	vmul.f32	s15, s15, s8
 80075fe:	3c01      	subs	r4, #1
 8007600:	ed82 7a00 	vstr	s14, [r2]
 8007604:	edc2 7a01 	vstr	s15, [r2, #4]
 8007608:	b3dc      	cbz	r4, 8007682 <merge_rfft_f32+0xa6>
 800760a:	00e3      	lsls	r3, r4, #3
 800760c:	3b08      	subs	r3, #8
 800760e:	440b      	add	r3, r1
 8007610:	3010      	adds	r0, #16
 8007612:	3210      	adds	r2, #16
 8007614:	3110      	adds	r1, #16
 8007616:	ed11 5a02 	vldr	s10, [r1, #-8]
 800761a:	ed93 7a02 	vldr	s14, [r3, #8]
 800761e:	ed50 6a02 	vldr	s13, [r0, #-8]
 8007622:	edd3 4a03 	vldr	s9, [r3, #12]
 8007626:	ed51 7a01 	vldr	s15, [r1, #-4]
 800762a:	ed10 6a01 	vldr	s12, [r0, #-4]
 800762e:	ee75 5a47 	vsub.f32	s11, s10, s14
 8007632:	ee37 7a05 	vadd.f32	s14, s14, s10
 8007636:	ee66 3aa5 	vmul.f32	s7, s13, s11
 800763a:	ee34 5aa7 	vadd.f32	s10, s9, s15
 800763e:	ee66 5a25 	vmul.f32	s11, s12, s11
 8007642:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8007646:	ee37 7a63 	vsub.f32	s14, s14, s7
 800764a:	ee66 6a85 	vmul.f32	s13, s13, s10
 800764e:	ee26 6a05 	vmul.f32	s12, s12, s10
 8007652:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8007656:	ee37 7a46 	vsub.f32	s14, s14, s12
 800765a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800765e:	ee27 7a04 	vmul.f32	s14, s14, s8
 8007662:	ee67 7a84 	vmul.f32	s15, s15, s8
 8007666:	3c01      	subs	r4, #1
 8007668:	ed02 7a02 	vstr	s14, [r2, #-8]
 800766c:	ed42 7a01 	vstr	s15, [r2, #-4]
 8007670:	f1a3 0308 	sub.w	r3, r3, #8
 8007674:	f101 0108 	add.w	r1, r1, #8
 8007678:	f100 0008 	add.w	r0, r0, #8
 800767c:	f102 0208 	add.w	r2, r2, #8
 8007680:	d1c9      	bne.n	8007616 <merge_rfft_f32+0x3a>
 8007682:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007686:	4770      	bx	lr

08007688 <arm_rfft_fast_f32>:
 8007688:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800768c:	8a05      	ldrh	r5, [r0, #16]
 800768e:	086d      	lsrs	r5, r5, #1
 8007690:	8005      	strh	r5, [r0, #0]
 8007692:	4604      	mov	r4, r0
 8007694:	4616      	mov	r6, r2
 8007696:	461d      	mov	r5, r3
 8007698:	b14b      	cbz	r3, 80076ae <arm_rfft_fast_f32+0x26>
 800769a:	f7ff ff9f 	bl	80075dc <merge_rfft_f32>
 800769e:	462a      	mov	r2, r5
 80076a0:	4631      	mov	r1, r6
 80076a2:	4620      	mov	r0, r4
 80076a4:	2301      	movs	r3, #1
 80076a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80076aa:	f000 bb33 	b.w	8007d14 <arm_cfft_f32>
 80076ae:	460f      	mov	r7, r1
 80076b0:	461a      	mov	r2, r3
 80076b2:	2301      	movs	r3, #1
 80076b4:	f000 fb2e 	bl	8007d14 <arm_cfft_f32>
 80076b8:	4632      	mov	r2, r6
 80076ba:	4639      	mov	r1, r7
 80076bc:	4620      	mov	r0, r4
 80076be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80076c2:	f7ff bf31 	b.w	8007528 <stage_rfft_f32>
 80076c6:	bf00      	nop

080076c8 <arm_cfft_radix8by2_f32>:
 80076c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80076cc:	ed2d 8b08 	vpush	{d8-d11}
 80076d0:	4607      	mov	r7, r0
 80076d2:	4608      	mov	r0, r1
 80076d4:	f8b7 c000 	ldrh.w	ip, [r7]
 80076d8:	687a      	ldr	r2, [r7, #4]
 80076da:	ea4f 015c 	mov.w	r1, ip, lsr #1
 80076de:	eb00 088c 	add.w	r8, r0, ip, lsl #2
 80076e2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80076e6:	f000 80b0 	beq.w	800784a <arm_cfft_radix8by2_f32+0x182>
 80076ea:	008c      	lsls	r4, r1, #2
 80076ec:	3410      	adds	r4, #16
 80076ee:	f100 0310 	add.w	r3, r0, #16
 80076f2:	1906      	adds	r6, r0, r4
 80076f4:	3210      	adds	r2, #16
 80076f6:	4444      	add	r4, r8
 80076f8:	eb03 1c0c 	add.w	ip, r3, ip, lsl #4
 80076fc:	f108 0510 	add.w	r5, r8, #16
 8007700:	ed15 2a04 	vldr	s4, [r5, #-16]
 8007704:	ed55 2a03 	vldr	s5, [r5, #-12]
 8007708:	ed54 4a04 	vldr	s9, [r4, #-16]
 800770c:	ed14 4a03 	vldr	s8, [r4, #-12]
 8007710:	ed14 6a02 	vldr	s12, [r4, #-8]
 8007714:	ed54 5a01 	vldr	s11, [r4, #-4]
 8007718:	ed53 3a04 	vldr	s7, [r3, #-16]
 800771c:	ed15 0a02 	vldr	s0, [r5, #-8]
 8007720:	ed55 0a01 	vldr	s1, [r5, #-4]
 8007724:	ed56 6a04 	vldr	s13, [r6, #-16]
 8007728:	ed16 3a03 	vldr	s6, [r6, #-12]
 800772c:	ed13 7a03 	vldr	s14, [r3, #-12]
 8007730:	ed13 5a02 	vldr	s10, [r3, #-8]
 8007734:	ed53 7a01 	vldr	s15, [r3, #-4]
 8007738:	ed16 1a02 	vldr	s2, [r6, #-8]
 800773c:	ed56 1a01 	vldr	s3, [r6, #-4]
 8007740:	ee73 ba82 	vadd.f32	s23, s7, s4
 8007744:	ee37 ba22 	vadd.f32	s22, s14, s5
 8007748:	ee76 9aa4 	vadd.f32	s19, s13, s9
 800774c:	ee33 9a04 	vadd.f32	s18, s6, s8
 8007750:	ee31 8aa5 	vadd.f32	s16, s3, s11
 8007754:	ee75 aa00 	vadd.f32	s21, s10, s0
 8007758:	ee37 aaa0 	vadd.f32	s20, s15, s1
 800775c:	ee71 8a06 	vadd.f32	s17, s2, s12
 8007760:	ed43 ba04 	vstr	s23, [r3, #-16]
 8007764:	ed03 ba03 	vstr	s22, [r3, #-12]
 8007768:	ed43 aa02 	vstr	s21, [r3, #-8]
 800776c:	ed03 aa01 	vstr	s20, [r3, #-4]
 8007770:	ed06 8a01 	vstr	s16, [r6, #-4]
 8007774:	ed46 9a04 	vstr	s19, [r6, #-16]
 8007778:	ed06 9a03 	vstr	s18, [r6, #-12]
 800777c:	ed46 8a02 	vstr	s17, [r6, #-8]
 8007780:	ee37 7a62 	vsub.f32	s14, s14, s5
 8007784:	ee74 4ae6 	vsub.f32	s9, s9, s13
 8007788:	ee34 4a43 	vsub.f32	s8, s8, s6
 800778c:	ed52 6a03 	vldr	s13, [r2, #-12]
 8007790:	ed12 3a04 	vldr	s6, [r2, #-16]
 8007794:	ee73 3ac2 	vsub.f32	s7, s7, s4
 8007798:	ee27 8a26 	vmul.f32	s16, s14, s13
 800779c:	ee64 2aa6 	vmul.f32	s5, s9, s13
 80077a0:	ee23 2a83 	vmul.f32	s4, s7, s6
 80077a4:	ee64 4a83 	vmul.f32	s9, s9, s6
 80077a8:	ee63 3aa6 	vmul.f32	s7, s7, s13
 80077ac:	ee27 7a03 	vmul.f32	s14, s14, s6
 80077b0:	ee64 6a26 	vmul.f32	s13, s8, s13
 80077b4:	ee24 4a03 	vmul.f32	s8, s8, s6
 80077b8:	ee37 7a63 	vsub.f32	s14, s14, s7
 80077bc:	ee76 6aa4 	vadd.f32	s13, s13, s9
 80077c0:	ee32 4ac4 	vsub.f32	s8, s5, s8
 80077c4:	ee32 3a08 	vadd.f32	s6, s4, s16
 80077c8:	ed05 7a03 	vstr	s14, [r5, #-12]
 80077cc:	ed05 3a04 	vstr	s6, [r5, #-16]
 80077d0:	ed04 4a04 	vstr	s8, [r4, #-16]
 80077d4:	ed44 6a03 	vstr	s13, [r4, #-12]
 80077d8:	ed12 7a01 	vldr	s14, [r2, #-4]
 80077dc:	ee76 6a41 	vsub.f32	s13, s12, s2
 80077e0:	ee35 5a40 	vsub.f32	s10, s10, s0
 80077e4:	ee35 6ae1 	vsub.f32	s12, s11, s3
 80077e8:	ee77 7ae0 	vsub.f32	s15, s15, s1
 80077ec:	ed52 5a02 	vldr	s11, [r2, #-8]
 80077f0:	ee67 3a87 	vmul.f32	s7, s15, s14
 80077f4:	ee66 4a87 	vmul.f32	s9, s13, s14
 80077f8:	ee25 4a25 	vmul.f32	s8, s10, s11
 80077fc:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8007800:	ee25 5a07 	vmul.f32	s10, s10, s14
 8007804:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8007808:	ee26 7a07 	vmul.f32	s14, s12, s14
 800780c:	ee26 6a25 	vmul.f32	s12, s12, s11
 8007810:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8007814:	ee74 5a23 	vadd.f32	s11, s8, s7
 8007818:	ee34 6ac6 	vsub.f32	s12, s9, s12
 800781c:	ee37 7a26 	vadd.f32	s14, s14, s13
 8007820:	3310      	adds	r3, #16
 8007822:	4563      	cmp	r3, ip
 8007824:	ed45 5a02 	vstr	s11, [r5, #-8]
 8007828:	f106 0610 	add.w	r6, r6, #16
 800782c:	ed45 7a01 	vstr	s15, [r5, #-4]
 8007830:	f102 0210 	add.w	r2, r2, #16
 8007834:	ed04 6a02 	vstr	s12, [r4, #-8]
 8007838:	ed04 7a01 	vstr	s14, [r4, #-4]
 800783c:	f105 0510 	add.w	r5, r5, #16
 8007840:	f104 0410 	add.w	r4, r4, #16
 8007844:	f47f af5c 	bne.w	8007700 <arm_cfft_radix8by2_f32+0x38>
 8007848:	687a      	ldr	r2, [r7, #4]
 800784a:	b28c      	uxth	r4, r1
 800784c:	4621      	mov	r1, r4
 800784e:	2302      	movs	r3, #2
 8007850:	f000 fc1c 	bl	800808c <arm_radix8_butterfly_f32>
 8007854:	ecbd 8b08 	vpop	{d8-d11}
 8007858:	4621      	mov	r1, r4
 800785a:	687a      	ldr	r2, [r7, #4]
 800785c:	4640      	mov	r0, r8
 800785e:	2302      	movs	r3, #2
 8007860:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007864:	f000 bc12 	b.w	800808c <arm_radix8_butterfly_f32>

08007868 <arm_cfft_radix8by4_f32>:
 8007868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800786c:	ed2d 8b0a 	vpush	{d8-d12}
 8007870:	b08d      	sub	sp, #52	; 0x34
 8007872:	460d      	mov	r5, r1
 8007874:	910b      	str	r1, [sp, #44]	; 0x2c
 8007876:	8801      	ldrh	r1, [r0, #0]
 8007878:	6842      	ldr	r2, [r0, #4]
 800787a:	900a      	str	r0, [sp, #40]	; 0x28
 800787c:	0849      	lsrs	r1, r1, #1
 800787e:	008b      	lsls	r3, r1, #2
 8007880:	18ee      	adds	r6, r5, r3
 8007882:	18f0      	adds	r0, r6, r3
 8007884:	edd0 5a00 	vldr	s11, [r0]
 8007888:	edd5 7a00 	vldr	s15, [r5]
 800788c:	ed96 7a00 	vldr	s14, [r6]
 8007890:	edd0 3a01 	vldr	s7, [r0, #4]
 8007894:	ed96 4a01 	vldr	s8, [r6, #4]
 8007898:	ed95 5a01 	vldr	s10, [r5, #4]
 800789c:	9008      	str	r0, [sp, #32]
 800789e:	ee37 6aa5 	vadd.f32	s12, s15, s11
 80078a2:	18c7      	adds	r7, r0, r3
 80078a4:	edd7 4a00 	vldr	s9, [r7]
 80078a8:	ed97 3a01 	vldr	s6, [r7, #4]
 80078ac:	9701      	str	r7, [sp, #4]
 80078ae:	ee77 6a06 	vadd.f32	s13, s14, s12
 80078b2:	462c      	mov	r4, r5
 80078b4:	ee76 6aa4 	vadd.f32	s13, s13, s9
 80078b8:	ee77 7ae5 	vsub.f32	s15, s15, s11
 80078bc:	ee16 ca90 	vmov	ip, s13
 80078c0:	f844 cb08 	str.w	ip, [r4], #8
 80078c4:	ee75 6a23 	vadd.f32	s13, s10, s7
 80078c8:	edd6 5a01 	vldr	s11, [r6, #4]
 80078cc:	edd7 2a01 	vldr	s5, [r7, #4]
 80078d0:	9404      	str	r4, [sp, #16]
 80078d2:	ee35 5a63 	vsub.f32	s10, s10, s7
 80078d6:	ee74 3a27 	vadd.f32	s7, s8, s15
 80078da:	ee36 6a47 	vsub.f32	s12, s12, s14
 80078de:	ee76 5aa5 	vadd.f32	s11, s13, s11
 80078e2:	ee73 3ac3 	vsub.f32	s7, s7, s6
 80078e6:	0849      	lsrs	r1, r1, #1
 80078e8:	f102 0e08 	add.w	lr, r2, #8
 80078ec:	ee76 6ac4 	vsub.f32	s13, s13, s8
 80078f0:	ee77 7ac4 	vsub.f32	s15, s15, s8
 80078f4:	9109      	str	r1, [sp, #36]	; 0x24
 80078f6:	ee35 4a47 	vsub.f32	s8, s10, s14
 80078fa:	f1a1 0902 	sub.w	r9, r1, #2
 80078fe:	f8cd e00c 	str.w	lr, [sp, #12]
 8007902:	4631      	mov	r1, r6
 8007904:	ee13 ea90 	vmov	lr, s7
 8007908:	ee36 6a64 	vsub.f32	s12, s12, s9
 800790c:	ee75 5aa2 	vadd.f32	s11, s11, s5
 8007910:	4604      	mov	r4, r0
 8007912:	edc5 5a01 	vstr	s11, [r5, #4]
 8007916:	ee37 7a05 	vadd.f32	s14, s14, s10
 800791a:	f841 eb08 	str.w	lr, [r1], #8
 800791e:	ee34 5a24 	vadd.f32	s10, s8, s9
 8007922:	ee16 ea10 	vmov	lr, s12
 8007926:	ed86 5a01 	vstr	s10, [r6, #4]
 800792a:	ee76 6ac3 	vsub.f32	s13, s13, s6
 800792e:	f844 eb08 	str.w	lr, [r4], #8
 8007932:	ee77 7a83 	vadd.f32	s15, s15, s6
 8007936:	edc0 6a01 	vstr	s13, [r0, #4]
 800793a:	9405      	str	r4, [sp, #20]
 800793c:	4604      	mov	r4, r0
 800793e:	ee17 0a90 	vmov	r0, s15
 8007942:	9106      	str	r1, [sp, #24]
 8007944:	ee37 7a64 	vsub.f32	s14, s14, s9
 8007948:	f102 0110 	add.w	r1, r2, #16
 800794c:	46bc      	mov	ip, r7
 800794e:	9100      	str	r1, [sp, #0]
 8007950:	f847 0b08 	str.w	r0, [r7], #8
 8007954:	f102 0118 	add.w	r1, r2, #24
 8007958:	ea5f 0059 	movs.w	r0, r9, lsr #1
 800795c:	9102      	str	r1, [sp, #8]
 800795e:	ed8c 7a01 	vstr	s14, [ip, #4]
 8007962:	9007      	str	r0, [sp, #28]
 8007964:	f000 8134 	beq.w	8007bd0 <arm_cfft_radix8by4_f32+0x368>
 8007968:	f102 0920 	add.w	r9, r2, #32
 800796c:	f102 0830 	add.w	r8, r2, #48	; 0x30
 8007970:	9a01      	ldr	r2, [sp, #4]
 8007972:	f8dd a000 	ldr.w	sl, [sp]
 8007976:	3b0c      	subs	r3, #12
 8007978:	4683      	mov	fp, r0
 800797a:	4463      	add	r3, ip
 800797c:	f105 0e10 	add.w	lr, r5, #16
 8007980:	f1a4 010c 	sub.w	r1, r4, #12
 8007984:	f104 0510 	add.w	r5, r4, #16
 8007988:	f1a6 0c0c 	sub.w	ip, r6, #12
 800798c:	f1a2 040c 	sub.w	r4, r2, #12
 8007990:	f106 0010 	add.w	r0, r6, #16
 8007994:	3210      	adds	r2, #16
 8007996:	ed1e 5a02 	vldr	s10, [lr, #-8]
 800799a:	ed55 5a02 	vldr	s11, [r5, #-8]
 800799e:	ed50 7a02 	vldr	s15, [r0, #-8]
 80079a2:	ed52 1a02 	vldr	s3, [r2, #-8]
 80079a6:	ed55 6a01 	vldr	s13, [r5, #-4]
 80079aa:	ed1e 0a01 	vldr	s0, [lr, #-4]
 80079ae:	ed12 1a01 	vldr	s2, [r2, #-4]
 80079b2:	ed10 8a01 	vldr	s16, [r0, #-4]
 80079b6:	ee35 4a25 	vadd.f32	s8, s10, s11
 80079ba:	ee30 6a26 	vadd.f32	s12, s0, s13
 80079be:	ee37 7a84 	vadd.f32	s14, s15, s8
 80079c2:	ee30 0a66 	vsub.f32	s0, s0, s13
 80079c6:	ee37 7a21 	vadd.f32	s14, s14, s3
 80079ca:	ee75 5a65 	vsub.f32	s11, s10, s11
 80079ce:	ed0e 7a02 	vstr	s14, [lr, #-8]
 80079d2:	ed10 7a01 	vldr	s14, [r0, #-4]
 80079d6:	ed52 6a01 	vldr	s13, [r2, #-4]
 80079da:	ee36 7a07 	vadd.f32	s14, s12, s14
 80079de:	ee78 aa25 	vadd.f32	s21, s16, s11
 80079e2:	ee37 7a26 	vadd.f32	s14, s14, s13
 80079e6:	ee70 3a67 	vsub.f32	s7, s0, s15
 80079ea:	ed0e 7a01 	vstr	s14, [lr, #-4]
 80079ee:	ed94 7a02 	vldr	s14, [r4, #8]
 80079f2:	ed9c 2a02 	vldr	s4, [ip, #8]
 80079f6:	ed91 ba02 	vldr	s22, [r1, #8]
 80079fa:	edd3 9a02 	vldr	s19, [r3, #8]
 80079fe:	edd4 2a01 	vldr	s5, [r4, #4]
 8007a02:	ed9c 9a01 	vldr	s18, [ip, #4]
 8007a06:	ed93 5a01 	vldr	s10, [r3, #4]
 8007a0a:	edd1 0a01 	vldr	s1, [r1, #4]
 8007a0e:	ee72 6a07 	vadd.f32	s13, s4, s14
 8007a12:	ee32 2a47 	vsub.f32	s4, s4, s14
 8007a16:	ee7b 8a26 	vadd.f32	s17, s22, s13
 8007a1a:	ee79 4a22 	vadd.f32	s9, s18, s5
 8007a1e:	ee38 7aa9 	vadd.f32	s14, s17, s19
 8007a22:	ee79 2a62 	vsub.f32	s5, s18, s5
 8007a26:	ed8c 7a02 	vstr	s14, [ip, #8]
 8007a2a:	ed91 7a01 	vldr	s14, [r1, #4]
 8007a2e:	edd3 8a01 	vldr	s17, [r3, #4]
 8007a32:	ee34 7a87 	vadd.f32	s14, s9, s14
 8007a36:	ee3b 3a69 	vsub.f32	s6, s22, s19
 8007a3a:	ee37 7a28 	vadd.f32	s14, s14, s17
 8007a3e:	ee32 9a60 	vsub.f32	s18, s4, s1
 8007a42:	ed8c 7a01 	vstr	s14, [ip, #4]
 8007a46:	ed1a 7a01 	vldr	s14, [sl, #-4]
 8007a4a:	ed1a aa02 	vldr	s20, [sl, #-8]
 8007a4e:	ee73 8a22 	vadd.f32	s17, s6, s5
 8007a52:	ee39 9a05 	vadd.f32	s18, s18, s10
 8007a56:	ee7a aac1 	vsub.f32	s21, s21, s2
 8007a5a:	ee73 3aa1 	vadd.f32	s7, s7, s3
 8007a5e:	ee2a ca8a 	vmul.f32	s24, s21, s20
 8007a62:	ee69 ba07 	vmul.f32	s23, s18, s14
 8007a66:	ee6a aa87 	vmul.f32	s21, s21, s14
 8007a6a:	ee29 9a0a 	vmul.f32	s18, s18, s20
 8007a6e:	ee63 ca87 	vmul.f32	s25, s7, s14
 8007a72:	ee63 3a8a 	vmul.f32	s7, s7, s20
 8007a76:	ee28 aa8a 	vmul.f32	s20, s17, s20
 8007a7a:	ee68 8a87 	vmul.f32	s17, s17, s14
 8007a7e:	ee73 3aea 	vsub.f32	s7, s7, s21
 8007a82:	ee78 8a89 	vadd.f32	s17, s17, s18
 8007a86:	ee3c 7a2c 	vadd.f32	s14, s24, s25
 8007a8a:	ee3b aaca 	vsub.f32	s20, s23, s20
 8007a8e:	ee34 4a67 	vsub.f32	s8, s8, s15
 8007a92:	ee76 6acb 	vsub.f32	s13, s13, s22
 8007a96:	ee36 6a48 	vsub.f32	s12, s12, s16
 8007a9a:	ee74 4ae0 	vsub.f32	s9, s9, s1
 8007a9e:	ed00 7a02 	vstr	s14, [r0, #-8]
 8007aa2:	ed40 3a01 	vstr	s7, [r0, #-4]
 8007aa6:	edc1 8a01 	vstr	s17, [r1, #4]
 8007aaa:	ed81 aa02 	vstr	s20, [r1, #8]
 8007aae:	ed59 3a04 	vldr	s7, [r9, #-16]
 8007ab2:	ee36 7ae9 	vsub.f32	s14, s13, s19
 8007ab6:	ee74 4ac5 	vsub.f32	s9, s9, s10
 8007aba:	ed59 6a03 	vldr	s13, [r9, #-12]
 8007abe:	ee34 4a61 	vsub.f32	s8, s8, s3
 8007ac2:	ee36 6a41 	vsub.f32	s12, s12, s2
 8007ac6:	ee67 8a63 	vnmul.f32	s17, s14, s7
 8007aca:	ee66 9a26 	vmul.f32	s19, s12, s13
 8007ace:	ee24 9a23 	vmul.f32	s18, s8, s7
 8007ad2:	ee26 6a23 	vmul.f32	s12, s12, s7
 8007ad6:	ee24 4a26 	vmul.f32	s8, s8, s13
 8007ada:	ee27 7a26 	vmul.f32	s14, s14, s13
 8007ade:	ee64 6aa6 	vmul.f32	s13, s9, s13
 8007ae2:	ee64 4aa3 	vmul.f32	s9, s9, s7
 8007ae6:	ee36 6a44 	vsub.f32	s12, s12, s8
 8007aea:	ee37 7a64 	vsub.f32	s14, s14, s9
 8007aee:	ee38 4ae6 	vsub.f32	s8, s17, s13
 8007af2:	ee79 3a29 	vadd.f32	s7, s18, s19
 8007af6:	ee75 6a60 	vsub.f32	s13, s10, s1
 8007afa:	ee75 5ac8 	vsub.f32	s11, s11, s16
 8007afe:	ee77 7a80 	vadd.f32	s15, s15, s0
 8007b02:	ed45 3a02 	vstr	s7, [r5, #-8]
 8007b06:	ed05 6a01 	vstr	s12, [r5, #-4]
 8007b0a:	ed84 7a01 	vstr	s14, [r4, #4]
 8007b0e:	ed84 4a02 	vstr	s8, [r4, #8]
 8007b12:	ee35 6a81 	vadd.f32	s12, s11, s2
 8007b16:	ee36 7ac2 	vsub.f32	s14, s13, s4
 8007b1a:	ed58 5a06 	vldr	s11, [r8, #-24]	; 0xffffffe8
 8007b1e:	ed58 6a05 	vldr	s13, [r8, #-20]	; 0xffffffec
 8007b22:	ee33 3a62 	vsub.f32	s6, s6, s5
 8007b26:	ee77 7ae1 	vsub.f32	s15, s15, s3
 8007b2a:	ee67 2a26 	vmul.f32	s5, s14, s13
 8007b2e:	ee67 4aa6 	vmul.f32	s9, s15, s13
 8007b32:	ee26 5a25 	vmul.f32	s10, s12, s11
 8007b36:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8007b3a:	ee26 6a26 	vmul.f32	s12, s12, s13
 8007b3e:	ee27 7a25 	vmul.f32	s14, s14, s11
 8007b42:	ee63 6a26 	vmul.f32	s13, s6, s13
 8007b46:	ee23 3a25 	vmul.f32	s6, s6, s11
 8007b4a:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8007b4e:	ee75 5a24 	vadd.f32	s11, s10, s9
 8007b52:	ee32 3ac3 	vsub.f32	s6, s5, s6
 8007b56:	ee36 7a87 	vadd.f32	s14, s13, s14
 8007b5a:	f1bb 0b01 	subs.w	fp, fp, #1
 8007b5e:	ed42 5a02 	vstr	s11, [r2, #-8]
 8007b62:	ed42 7a01 	vstr	s15, [r2, #-4]
 8007b66:	f10e 0e08 	add.w	lr, lr, #8
 8007b6a:	ed83 3a02 	vstr	s6, [r3, #8]
 8007b6e:	ed83 7a01 	vstr	s14, [r3, #4]
 8007b72:	f1ac 0c08 	sub.w	ip, ip, #8
 8007b76:	f10a 0a08 	add.w	sl, sl, #8
 8007b7a:	f100 0008 	add.w	r0, r0, #8
 8007b7e:	f1a1 0108 	sub.w	r1, r1, #8
 8007b82:	f109 0910 	add.w	r9, r9, #16
 8007b86:	f105 0508 	add.w	r5, r5, #8
 8007b8a:	f1a4 0408 	sub.w	r4, r4, #8
 8007b8e:	f108 0818 	add.w	r8, r8, #24
 8007b92:	f102 0208 	add.w	r2, r2, #8
 8007b96:	f1a3 0308 	sub.w	r3, r3, #8
 8007b9a:	f47f aefc 	bne.w	8007996 <arm_cfft_radix8by4_f32+0x12e>
 8007b9e:	9907      	ldr	r1, [sp, #28]
 8007ba0:	9800      	ldr	r0, [sp, #0]
 8007ba2:	00cb      	lsls	r3, r1, #3
 8007ba4:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8007ba8:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8007bac:	9100      	str	r1, [sp, #0]
 8007bae:	9904      	ldr	r1, [sp, #16]
 8007bb0:	4419      	add	r1, r3
 8007bb2:	9104      	str	r1, [sp, #16]
 8007bb4:	9903      	ldr	r1, [sp, #12]
 8007bb6:	4419      	add	r1, r3
 8007bb8:	9103      	str	r1, [sp, #12]
 8007bba:	9906      	ldr	r1, [sp, #24]
 8007bbc:	4419      	add	r1, r3
 8007bbe:	9106      	str	r1, [sp, #24]
 8007bc0:	9905      	ldr	r1, [sp, #20]
 8007bc2:	441f      	add	r7, r3
 8007bc4:	4419      	add	r1, r3
 8007bc6:	9b02      	ldr	r3, [sp, #8]
 8007bc8:	9105      	str	r1, [sp, #20]
 8007bca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007bce:	9302      	str	r3, [sp, #8]
 8007bd0:	9904      	ldr	r1, [sp, #16]
 8007bd2:	9805      	ldr	r0, [sp, #20]
 8007bd4:	ed91 4a00 	vldr	s8, [r1]
 8007bd8:	edd0 6a00 	vldr	s13, [r0]
 8007bdc:	9b06      	ldr	r3, [sp, #24]
 8007bde:	ed97 3a00 	vldr	s6, [r7]
 8007be2:	edd3 7a00 	vldr	s15, [r3]
 8007be6:	edd0 4a01 	vldr	s9, [r0, #4]
 8007bea:	edd1 3a01 	vldr	s7, [r1, #4]
 8007bee:	ed97 2a01 	vldr	s4, [r7, #4]
 8007bf2:	ed93 7a01 	vldr	s14, [r3, #4]
 8007bf6:	9a03      	ldr	r2, [sp, #12]
 8007bf8:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 8007bfc:	ee34 6a26 	vadd.f32	s12, s8, s13
 8007c00:	ee73 5aa4 	vadd.f32	s11, s7, s9
 8007c04:	ee37 5a86 	vadd.f32	s10, s15, s12
 8007c08:	ee73 3ae4 	vsub.f32	s7, s7, s9
 8007c0c:	ee35 5a03 	vadd.f32	s10, s10, s6
 8007c10:	ee74 6a66 	vsub.f32	s13, s8, s13
 8007c14:	ed81 5a00 	vstr	s10, [r1]
 8007c18:	ed93 5a01 	vldr	s10, [r3, #4]
 8007c1c:	edd7 4a01 	vldr	s9, [r7, #4]
 8007c20:	ee35 5a85 	vadd.f32	s10, s11, s10
 8007c24:	ee37 4a26 	vadd.f32	s8, s14, s13
 8007c28:	ee35 5a24 	vadd.f32	s10, s10, s9
 8007c2c:	ee73 4ae7 	vsub.f32	s9, s7, s15
 8007c30:	ed81 5a01 	vstr	s10, [r1, #4]
 8007c34:	edd2 1a00 	vldr	s3, [r2]
 8007c38:	edd2 2a01 	vldr	s5, [r2, #4]
 8007c3c:	ee34 5a83 	vadd.f32	s10, s9, s6
 8007c40:	ee34 4a42 	vsub.f32	s8, s8, s4
 8007c44:	ee36 6a67 	vsub.f32	s12, s12, s15
 8007c48:	ee64 4a21 	vmul.f32	s9, s8, s3
 8007c4c:	ee24 4a22 	vmul.f32	s8, s8, s5
 8007c50:	ee65 2a22 	vmul.f32	s5, s10, s5
 8007c54:	ee25 5a21 	vmul.f32	s10, s10, s3
 8007c58:	ee74 2aa2 	vadd.f32	s5, s9, s5
 8007c5c:	ee35 5a44 	vsub.f32	s10, s10, s8
 8007c60:	edc3 2a00 	vstr	s5, [r3]
 8007c64:	ed83 5a01 	vstr	s10, [r3, #4]
 8007c68:	ee75 5ac7 	vsub.f32	s11, s11, s14
 8007c6c:	9b00      	ldr	r3, [sp, #0]
 8007c6e:	ee36 6a43 	vsub.f32	s12, s12, s6
 8007c72:	ed93 4a01 	vldr	s8, [r3, #4]
 8007c76:	ed93 5a00 	vldr	s10, [r3]
 8007c7a:	9b02      	ldr	r3, [sp, #8]
 8007c7c:	ee75 5ac2 	vsub.f32	s11, s11, s4
 8007c80:	ee66 4a05 	vmul.f32	s9, s12, s10
 8007c84:	ee25 5a85 	vmul.f32	s10, s11, s10
 8007c88:	ee26 6a04 	vmul.f32	s12, s12, s8
 8007c8c:	ee65 5a84 	vmul.f32	s11, s11, s8
 8007c90:	ee35 6a46 	vsub.f32	s12, s10, s12
 8007c94:	ee74 5aa5 	vadd.f32	s11, s9, s11
 8007c98:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8007c9c:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8007ca0:	ed80 6a01 	vstr	s12, [r0, #4]
 8007ca4:	edc0 5a00 	vstr	s11, [r0]
 8007ca8:	edd3 5a01 	vldr	s11, [r3, #4]
 8007cac:	edd3 6a00 	vldr	s13, [r3]
 8007cb0:	ee37 7a02 	vadd.f32	s14, s14, s4
 8007cb4:	ee77 7ac3 	vsub.f32	s15, s15, s6
 8007cb8:	ee27 6a26 	vmul.f32	s12, s14, s13
 8007cbc:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8007cc0:	ee27 7a25 	vmul.f32	s14, s14, s11
 8007cc4:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8007cc8:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8007ccc:	ee76 7a27 	vadd.f32	s15, s12, s15
 8007cd0:	ed87 7a01 	vstr	s14, [r7, #4]
 8007cd4:	edc7 7a00 	vstr	s15, [r7]
 8007cd8:	e9dd 500a 	ldrd	r5, r0, [sp, #40]	; 0x28
 8007cdc:	4621      	mov	r1, r4
 8007cde:	686a      	ldr	r2, [r5, #4]
 8007ce0:	2304      	movs	r3, #4
 8007ce2:	f000 f9d3 	bl	800808c <arm_radix8_butterfly_f32>
 8007ce6:	4630      	mov	r0, r6
 8007ce8:	4621      	mov	r1, r4
 8007cea:	686a      	ldr	r2, [r5, #4]
 8007cec:	2304      	movs	r3, #4
 8007cee:	f000 f9cd 	bl	800808c <arm_radix8_butterfly_f32>
 8007cf2:	9808      	ldr	r0, [sp, #32]
 8007cf4:	686a      	ldr	r2, [r5, #4]
 8007cf6:	4621      	mov	r1, r4
 8007cf8:	2304      	movs	r3, #4
 8007cfa:	f000 f9c7 	bl	800808c <arm_radix8_butterfly_f32>
 8007cfe:	686a      	ldr	r2, [r5, #4]
 8007d00:	9801      	ldr	r0, [sp, #4]
 8007d02:	4621      	mov	r1, r4
 8007d04:	2304      	movs	r3, #4
 8007d06:	b00d      	add	sp, #52	; 0x34
 8007d08:	ecbd 8b0a 	vpop	{d8-d12}
 8007d0c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d10:	f000 b9bc 	b.w	800808c <arm_radix8_butterfly_f32>

08007d14 <arm_cfft_f32>:
 8007d14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d18:	2a01      	cmp	r2, #1
 8007d1a:	4606      	mov	r6, r0
 8007d1c:	4617      	mov	r7, r2
 8007d1e:	460c      	mov	r4, r1
 8007d20:	4698      	mov	r8, r3
 8007d22:	8805      	ldrh	r5, [r0, #0]
 8007d24:	d056      	beq.n	8007dd4 <arm_cfft_f32+0xc0>
 8007d26:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8007d2a:	d063      	beq.n	8007df4 <arm_cfft_f32+0xe0>
 8007d2c:	d916      	bls.n	8007d5c <arm_cfft_f32+0x48>
 8007d2e:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 8007d32:	d01a      	beq.n	8007d6a <arm_cfft_f32+0x56>
 8007d34:	d947      	bls.n	8007dc6 <arm_cfft_f32+0xb2>
 8007d36:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 8007d3a:	d05b      	beq.n	8007df4 <arm_cfft_f32+0xe0>
 8007d3c:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 8007d40:	d105      	bne.n	8007d4e <arm_cfft_f32+0x3a>
 8007d42:	2301      	movs	r3, #1
 8007d44:	6872      	ldr	r2, [r6, #4]
 8007d46:	4629      	mov	r1, r5
 8007d48:	4620      	mov	r0, r4
 8007d4a:	f000 f99f 	bl	800808c <arm_radix8_butterfly_f32>
 8007d4e:	f1b8 0f00 	cmp.w	r8, #0
 8007d52:	d111      	bne.n	8007d78 <arm_cfft_f32+0x64>
 8007d54:	2f01      	cmp	r7, #1
 8007d56:	d016      	beq.n	8007d86 <arm_cfft_f32+0x72>
 8007d58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d5c:	2d20      	cmp	r5, #32
 8007d5e:	d049      	beq.n	8007df4 <arm_cfft_f32+0xe0>
 8007d60:	d935      	bls.n	8007dce <arm_cfft_f32+0xba>
 8007d62:	2d40      	cmp	r5, #64	; 0x40
 8007d64:	d0ed      	beq.n	8007d42 <arm_cfft_f32+0x2e>
 8007d66:	2d80      	cmp	r5, #128	; 0x80
 8007d68:	d1f1      	bne.n	8007d4e <arm_cfft_f32+0x3a>
 8007d6a:	4621      	mov	r1, r4
 8007d6c:	4630      	mov	r0, r6
 8007d6e:	f7ff fcab 	bl	80076c8 <arm_cfft_radix8by2_f32>
 8007d72:	f1b8 0f00 	cmp.w	r8, #0
 8007d76:	d0ed      	beq.n	8007d54 <arm_cfft_f32+0x40>
 8007d78:	68b2      	ldr	r2, [r6, #8]
 8007d7a:	89b1      	ldrh	r1, [r6, #12]
 8007d7c:	4620      	mov	r0, r4
 8007d7e:	f000 f841 	bl	8007e04 <arm_bitreversal_32>
 8007d82:	2f01      	cmp	r7, #1
 8007d84:	d1e8      	bne.n	8007d58 <arm_cfft_f32+0x44>
 8007d86:	ee07 5a90 	vmov	s15, r5
 8007d8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d8e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007d92:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8007d96:	2d00      	cmp	r5, #0
 8007d98:	d0de      	beq.n	8007d58 <arm_cfft_f32+0x44>
 8007d9a:	f104 0108 	add.w	r1, r4, #8
 8007d9e:	2300      	movs	r3, #0
 8007da0:	3301      	adds	r3, #1
 8007da2:	429d      	cmp	r5, r3
 8007da4:	f101 0108 	add.w	r1, r1, #8
 8007da8:	ed11 7a04 	vldr	s14, [r1, #-16]
 8007dac:	ed51 7a03 	vldr	s15, [r1, #-12]
 8007db0:	ee27 7a26 	vmul.f32	s14, s14, s13
 8007db4:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8007db8:	ed01 7a04 	vstr	s14, [r1, #-16]
 8007dbc:	ed41 7a03 	vstr	s15, [r1, #-12]
 8007dc0:	d1ee      	bne.n	8007da0 <arm_cfft_f32+0x8c>
 8007dc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007dc6:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 8007dca:	d0ba      	beq.n	8007d42 <arm_cfft_f32+0x2e>
 8007dcc:	e7bf      	b.n	8007d4e <arm_cfft_f32+0x3a>
 8007dce:	2d10      	cmp	r5, #16
 8007dd0:	d0cb      	beq.n	8007d6a <arm_cfft_f32+0x56>
 8007dd2:	e7bc      	b.n	8007d4e <arm_cfft_f32+0x3a>
 8007dd4:	b19d      	cbz	r5, 8007dfe <arm_cfft_f32+0xea>
 8007dd6:	f101 030c 	add.w	r3, r1, #12
 8007dda:	2200      	movs	r2, #0
 8007ddc:	ed53 7a02 	vldr	s15, [r3, #-8]
 8007de0:	3201      	adds	r2, #1
 8007de2:	eef1 7a67 	vneg.f32	s15, s15
 8007de6:	4295      	cmp	r5, r2
 8007de8:	ed43 7a02 	vstr	s15, [r3, #-8]
 8007dec:	f103 0308 	add.w	r3, r3, #8
 8007df0:	d1f4      	bne.n	8007ddc <arm_cfft_f32+0xc8>
 8007df2:	e798      	b.n	8007d26 <arm_cfft_f32+0x12>
 8007df4:	4621      	mov	r1, r4
 8007df6:	4630      	mov	r0, r6
 8007df8:	f7ff fd36 	bl	8007868 <arm_cfft_radix8by4_f32>
 8007dfc:	e7a7      	b.n	8007d4e <arm_cfft_f32+0x3a>
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d0aa      	beq.n	8007d58 <arm_cfft_f32+0x44>
 8007e02:	e7b9      	b.n	8007d78 <arm_cfft_f32+0x64>

08007e04 <arm_bitreversal_32>:
 8007e04:	b1e9      	cbz	r1, 8007e42 <arm_bitreversal_32+0x3e>
 8007e06:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e08:	2500      	movs	r5, #0
 8007e0a:	f102 0e02 	add.w	lr, r2, #2
 8007e0e:	f83e 4015 	ldrh.w	r4, [lr, r5, lsl #1]
 8007e12:	f832 3015 	ldrh.w	r3, [r2, r5, lsl #1]
 8007e16:	08a4      	lsrs	r4, r4, #2
 8007e18:	089b      	lsrs	r3, r3, #2
 8007e1a:	f850 6024 	ldr.w	r6, [r0, r4, lsl #2]
 8007e1e:	f850 c023 	ldr.w	ip, [r0, r3, lsl #2]
 8007e22:	f840 6023 	str.w	r6, [r0, r3, lsl #2]
 8007e26:	00a6      	lsls	r6, r4, #2
 8007e28:	009b      	lsls	r3, r3, #2
 8007e2a:	f840 c024 	str.w	ip, [r0, r4, lsl #2]
 8007e2e:	3304      	adds	r3, #4
 8007e30:	1d34      	adds	r4, r6, #4
 8007e32:	3502      	adds	r5, #2
 8007e34:	58c6      	ldr	r6, [r0, r3]
 8007e36:	5907      	ldr	r7, [r0, r4]
 8007e38:	50c7      	str	r7, [r0, r3]
 8007e3a:	428d      	cmp	r5, r1
 8007e3c:	5106      	str	r6, [r0, r4]
 8007e3e:	d3e6      	bcc.n	8007e0e <arm_bitreversal_32+0xa>
 8007e40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e42:	4770      	bx	lr

08007e44 <arm_cmplx_mag_f32>:
 8007e44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e48:	ed2d 8b02 	vpush	{d8}
 8007e4c:	0897      	lsrs	r7, r2, #2
 8007e4e:	b084      	sub	sp, #16
 8007e50:	d077      	beq.n	8007f42 <arm_cmplx_mag_f32+0xfe>
 8007e52:	f04f 0800 	mov.w	r8, #0
 8007e56:	f100 0420 	add.w	r4, r0, #32
 8007e5a:	f101 0510 	add.w	r5, r1, #16
 8007e5e:	463e      	mov	r6, r7
 8007e60:	ed14 0a08 	vldr	s0, [r4, #-32]	; 0xffffffe0
 8007e64:	ed54 7a07 	vldr	s15, [r4, #-28]	; 0xffffffe4
 8007e68:	ee20 0a00 	vmul.f32	s0, s0, s0
 8007e6c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8007e70:	ee30 0a27 	vadd.f32	s0, s0, s15
 8007e74:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8007e78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e7c:	f2c0 80c5 	blt.w	800800a <arm_cmplx_mag_f32+0x1c6>
 8007e80:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8007e84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e88:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8007e8c:	f100 80cb 	bmi.w	8008026 <arm_cmplx_mag_f32+0x1e2>
 8007e90:	ed05 8a04 	vstr	s16, [r5, #-16]
 8007e94:	ed14 0a06 	vldr	s0, [r4, #-24]	; 0xffffffe8
 8007e98:	ed54 7a05 	vldr	s15, [r4, #-20]	; 0xffffffec
 8007e9c:	ee20 0a00 	vmul.f32	s0, s0, s0
 8007ea0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8007ea4:	ee30 0a27 	vadd.f32	s0, s0, s15
 8007ea8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8007eac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007eb0:	f2c0 80a8 	blt.w	8008004 <arm_cmplx_mag_f32+0x1c0>
 8007eb4:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8007eb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ebc:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8007ec0:	f100 80a8 	bmi.w	8008014 <arm_cmplx_mag_f32+0x1d0>
 8007ec4:	ed05 8a03 	vstr	s16, [r5, #-12]
 8007ec8:	ed14 0a04 	vldr	s0, [r4, #-16]
 8007ecc:	ed54 7a03 	vldr	s15, [r4, #-12]
 8007ed0:	ee20 0a00 	vmul.f32	s0, s0, s0
 8007ed4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8007ed8:	ee30 0a27 	vadd.f32	s0, s0, s15
 8007edc:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8007ee0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ee4:	f2c0 808b 	blt.w	8007ffe <arm_cmplx_mag_f32+0x1ba>
 8007ee8:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8007eec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ef0:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8007ef4:	f100 80a9 	bmi.w	800804a <arm_cmplx_mag_f32+0x206>
 8007ef8:	ed05 8a02 	vstr	s16, [r5, #-8]
 8007efc:	ed14 0a02 	vldr	s0, [r4, #-8]
 8007f00:	ed54 7a01 	vldr	s15, [r4, #-4]
 8007f04:	ee20 0a00 	vmul.f32	s0, s0, s0
 8007f08:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8007f0c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8007f10:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8007f14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f18:	db6e      	blt.n	8007ff8 <arm_cmplx_mag_f32+0x1b4>
 8007f1a:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8007f1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f22:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8007f26:	f100 8087 	bmi.w	8008038 <arm_cmplx_mag_f32+0x1f4>
 8007f2a:	ed05 8a01 	vstr	s16, [r5, #-4]
 8007f2e:	3e01      	subs	r6, #1
 8007f30:	f104 0420 	add.w	r4, r4, #32
 8007f34:	f105 0510 	add.w	r5, r5, #16
 8007f38:	d192      	bne.n	8007e60 <arm_cmplx_mag_f32+0x1c>
 8007f3a:	eb00 1047 	add.w	r0, r0, r7, lsl #5
 8007f3e:	eb01 1107 	add.w	r1, r1, r7, lsl #4
 8007f42:	f012 0203 	ands.w	r2, r2, #3
 8007f46:	d052      	beq.n	8007fee <arm_cmplx_mag_f32+0x1aa>
 8007f48:	ed90 0a00 	vldr	s0, [r0]
 8007f4c:	edd0 7a01 	vldr	s15, [r0, #4]
 8007f50:	ee20 0a00 	vmul.f32	s0, s0, s0
 8007f54:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8007f58:	2300      	movs	r3, #0
 8007f5a:	ee37 0a80 	vadd.f32	s0, s15, s0
 8007f5e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8007f62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f66:	bfb8      	it	lt
 8007f68:	600b      	strlt	r3, [r1, #0]
 8007f6a:	db08      	blt.n	8007f7e <arm_cmplx_mag_f32+0x13a>
 8007f6c:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8007f70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f74:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8007f78:	d479      	bmi.n	800806e <arm_cmplx_mag_f32+0x22a>
 8007f7a:	ed81 8a00 	vstr	s16, [r1]
 8007f7e:	3a01      	subs	r2, #1
 8007f80:	d035      	beq.n	8007fee <arm_cmplx_mag_f32+0x1aa>
 8007f82:	ed90 0a02 	vldr	s0, [r0, #8]
 8007f86:	edd0 7a03 	vldr	s15, [r0, #12]
 8007f8a:	ee20 0a00 	vmul.f32	s0, s0, s0
 8007f8e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8007f92:	2300      	movs	r3, #0
 8007f94:	ee37 0a80 	vadd.f32	s0, s15, s0
 8007f98:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8007f9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007fa0:	bfb8      	it	lt
 8007fa2:	604b      	strlt	r3, [r1, #4]
 8007fa4:	db08      	blt.n	8007fb8 <arm_cmplx_mag_f32+0x174>
 8007fa6:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8007faa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007fae:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8007fb2:	d453      	bmi.n	800805c <arm_cmplx_mag_f32+0x218>
 8007fb4:	ed81 8a01 	vstr	s16, [r1, #4]
 8007fb8:	2a01      	cmp	r2, #1
 8007fba:	d018      	beq.n	8007fee <arm_cmplx_mag_f32+0x1aa>
 8007fbc:	ed90 0a04 	vldr	s0, [r0, #16]
 8007fc0:	edd0 7a05 	vldr	s15, [r0, #20]
 8007fc4:	ee20 0a00 	vmul.f32	s0, s0, s0
 8007fc8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8007fcc:	2300      	movs	r3, #0
 8007fce:	ee30 0a27 	vadd.f32	s0, s0, s15
 8007fd2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8007fd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007fda:	db19      	blt.n	8008010 <arm_cmplx_mag_f32+0x1cc>
 8007fdc:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8007fe0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007fe4:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8007fe8:	d44a      	bmi.n	8008080 <arm_cmplx_mag_f32+0x23c>
 8007fea:	ed81 8a02 	vstr	s16, [r1, #8]
 8007fee:	b004      	add	sp, #16
 8007ff0:	ecbd 8b02 	vpop	{d8}
 8007ff4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ff8:	f845 8c04 	str.w	r8, [r5, #-4]
 8007ffc:	e797      	b.n	8007f2e <arm_cmplx_mag_f32+0xea>
 8007ffe:	f845 8c08 	str.w	r8, [r5, #-8]
 8008002:	e77b      	b.n	8007efc <arm_cmplx_mag_f32+0xb8>
 8008004:	f845 8c0c 	str.w	r8, [r5, #-12]
 8008008:	e75e      	b.n	8007ec8 <arm_cmplx_mag_f32+0x84>
 800800a:	f845 8c10 	str.w	r8, [r5, #-16]
 800800e:	e741      	b.n	8007e94 <arm_cmplx_mag_f32+0x50>
 8008010:	608b      	str	r3, [r1, #8]
 8008012:	e7ec      	b.n	8007fee <arm_cmplx_mag_f32+0x1aa>
 8008014:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8008018:	9001      	str	r0, [sp, #4]
 800801a:	f001 fb2d 	bl	8009678 <sqrtf>
 800801e:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8008022:	9801      	ldr	r0, [sp, #4]
 8008024:	e74e      	b.n	8007ec4 <arm_cmplx_mag_f32+0x80>
 8008026:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800802a:	9001      	str	r0, [sp, #4]
 800802c:	f001 fb24 	bl	8009678 <sqrtf>
 8008030:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8008034:	9801      	ldr	r0, [sp, #4]
 8008036:	e72b      	b.n	8007e90 <arm_cmplx_mag_f32+0x4c>
 8008038:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800803c:	9001      	str	r0, [sp, #4]
 800803e:	f001 fb1b 	bl	8009678 <sqrtf>
 8008042:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8008046:	9801      	ldr	r0, [sp, #4]
 8008048:	e76f      	b.n	8007f2a <arm_cmplx_mag_f32+0xe6>
 800804a:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800804e:	9001      	str	r0, [sp, #4]
 8008050:	f001 fb12 	bl	8009678 <sqrtf>
 8008054:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8008058:	9801      	ldr	r0, [sp, #4]
 800805a:	e74d      	b.n	8007ef8 <arm_cmplx_mag_f32+0xb4>
 800805c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008060:	9201      	str	r2, [sp, #4]
 8008062:	f001 fb09 	bl	8009678 <sqrtf>
 8008066:	e9dd 2001 	ldrd	r2, r0, [sp, #4]
 800806a:	9903      	ldr	r1, [sp, #12]
 800806c:	e7a2      	b.n	8007fb4 <arm_cmplx_mag_f32+0x170>
 800806e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008072:	9201      	str	r2, [sp, #4]
 8008074:	f001 fb00 	bl	8009678 <sqrtf>
 8008078:	e9dd 2001 	ldrd	r2, r0, [sp, #4]
 800807c:	9903      	ldr	r1, [sp, #12]
 800807e:	e77c      	b.n	8007f7a <arm_cmplx_mag_f32+0x136>
 8008080:	9101      	str	r1, [sp, #4]
 8008082:	f001 faf9 	bl	8009678 <sqrtf>
 8008086:	9901      	ldr	r1, [sp, #4]
 8008088:	e7af      	b.n	8007fea <arm_cmplx_mag_f32+0x1a6>
 800808a:	bf00      	nop

0800808c <arm_radix8_butterfly_f32>:
 800808c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008090:	ed2d 8b10 	vpush	{d8-d15}
 8008094:	b095      	sub	sp, #84	; 0x54
 8008096:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
 800809a:	4603      	mov	r3, r0
 800809c:	3304      	adds	r3, #4
 800809e:	ed9f bab9 	vldr	s22, [pc, #740]	; 8008384 <arm_radix8_butterfly_f32+0x2f8>
 80080a2:	9012      	str	r0, [sp, #72]	; 0x48
 80080a4:	468b      	mov	fp, r1
 80080a6:	9313      	str	r3, [sp, #76]	; 0x4c
 80080a8:	4689      	mov	r9, r1
 80080aa:	ea4f 06db 	mov.w	r6, fp, lsr #3
 80080ae:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80080b0:	960f      	str	r6, [sp, #60]	; 0x3c
 80080b2:	ea4f 1846 	mov.w	r8, r6, lsl #5
 80080b6:	ea4f 0ec6 	mov.w	lr, r6, lsl #3
 80080ba:	eb03 0508 	add.w	r5, r3, r8
 80080be:	ea4f 0a86 	mov.w	sl, r6, lsl #2
 80080c2:	eb05 040e 	add.w	r4, r5, lr
 80080c6:	0137      	lsls	r7, r6, #4
 80080c8:	eba6 030a 	sub.w	r3, r6, sl
 80080cc:	eb04 000e 	add.w	r0, r4, lr
 80080d0:	44b2      	add	sl, r6
 80080d2:	1d3a      	adds	r2, r7, #4
 80080d4:	9702      	str	r7, [sp, #8]
 80080d6:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 80080da:	ea4f 07ca 	mov.w	r7, sl, lsl #3
 80080de:	ebae 0c06 	sub.w	ip, lr, r6
 80080e2:	9703      	str	r7, [sp, #12]
 80080e4:	eb03 0708 	add.w	r7, r3, r8
 80080e8:	9701      	str	r7, [sp, #4]
 80080ea:	ea4f 07cc 	mov.w	r7, ip, lsl #3
 80080ee:	9706      	str	r7, [sp, #24]
 80080f0:	9f12      	ldr	r7, [sp, #72]	; 0x48
 80080f2:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80080f6:	f10e 0104 	add.w	r1, lr, #4
 80080fa:	4439      	add	r1, r7
 80080fc:	443a      	add	r2, r7
 80080fe:	0137      	lsls	r7, r6, #4
 8008100:	00f6      	lsls	r6, r6, #3
 8008102:	9704      	str	r7, [sp, #16]
 8008104:	9605      	str	r6, [sp, #20]
 8008106:	9f01      	ldr	r7, [sp, #4]
 8008108:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 800810a:	ea4f 0acb 	mov.w	sl, fp, lsl #3
 800810e:	f04f 0c00 	mov.w	ip, #0
 8008112:	edd4 6a00 	vldr	s13, [r4]
 8008116:	edd7 1a00 	vldr	s3, [r7]
 800811a:	ed16 aa01 	vldr	s20, [r6, #-4]
 800811e:	edd5 5a00 	vldr	s11, [r5]
 8008122:	ed52 9a01 	vldr	s19, [r2, #-4]
 8008126:	ed90 6a00 	vldr	s12, [r0]
 800812a:	ed51 7a01 	vldr	s15, [r1, #-4]
 800812e:	ed93 3a00 	vldr	s6, [r3]
 8008132:	ee39 0a86 	vadd.f32	s0, s19, s12
 8008136:	ee33 2a21 	vadd.f32	s4, s6, s3
 800813a:	ee37 5aa6 	vadd.f32	s10, s15, s13
 800813e:	ee7a 4a25 	vadd.f32	s9, s20, s11
 8008142:	ee35 7a02 	vadd.f32	s14, s10, s4
 8008146:	ee34 4a80 	vadd.f32	s8, s9, s0
 800814a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800814e:	ee74 6a07 	vadd.f32	s13, s8, s14
 8008152:	ee34 4a47 	vsub.f32	s8, s8, s14
 8008156:	ed46 6a01 	vstr	s13, [r6, #-4]
 800815a:	ed85 4a00 	vstr	s8, [r5]
 800815e:	edd1 6a00 	vldr	s13, [r1]
 8008162:	ed94 9a01 	vldr	s18, [r4, #4]
 8008166:	edd3 2a01 	vldr	s5, [r3, #4]
 800816a:	edd7 8a01 	vldr	s17, [r7, #4]
 800816e:	edd6 0a00 	vldr	s1, [r6]
 8008172:	edd5 3a01 	vldr	s7, [r5, #4]
 8008176:	ed90 8a01 	vldr	s16, [r0, #4]
 800817a:	ed92 7a00 	vldr	s14, [r2]
 800817e:	ee33 3a61 	vsub.f32	s6, s6, s3
 8008182:	ee36 4ac9 	vsub.f32	s8, s13, s18
 8008186:	ee72 aae8 	vsub.f32	s21, s5, s17
 800818a:	ee77 1ac3 	vsub.f32	s3, s15, s6
 800818e:	ee34 1a2a 	vadd.f32	s2, s8, s21
 8008192:	ee77 7a83 	vadd.f32	s15, s15, s6
 8008196:	ee34 4a6a 	vsub.f32	s8, s8, s21
 800819a:	ee30 3aa3 	vadd.f32	s6, s1, s7
 800819e:	ee39 6ac6 	vsub.f32	s12, s19, s12
 80081a2:	ee70 3ae3 	vsub.f32	s7, s1, s7
 80081a6:	ee72 2aa8 	vadd.f32	s5, s5, s17
 80081aa:	ee77 0a08 	vadd.f32	s1, s14, s16
 80081ae:	ee21 1a0b 	vmul.f32	s2, s2, s22
 80081b2:	ee37 7a48 	vsub.f32	s14, s14, s16
 80081b6:	ee61 1a8b 	vmul.f32	s3, s3, s22
 80081ba:	ee7a 5a65 	vsub.f32	s11, s20, s11
 80081be:	ee76 6a89 	vadd.f32	s13, s13, s18
 80081c2:	ee24 4a0b 	vmul.f32	s8, s8, s22
 80081c6:	ee67 7a8b 	vmul.f32	s15, s15, s22
 80081ca:	ee74 4ac0 	vsub.f32	s9, s9, s0
 80081ce:	ee35 5a42 	vsub.f32	s10, s10, s4
 80081d2:	ee36 0aa2 	vadd.f32	s0, s13, s5
 80081d6:	ee33 2a20 	vadd.f32	s4, s6, s1
 80081da:	ee76 6ae2 	vsub.f32	s13, s13, s5
 80081de:	ee33 3a60 	vsub.f32	s6, s6, s1
 80081e2:	ee75 2aa1 	vadd.f32	s5, s11, s3
 80081e6:	ee77 0a01 	vadd.f32	s1, s14, s2
 80081ea:	ee75 5ae1 	vsub.f32	s11, s11, s3
 80081ee:	ee37 7a41 	vsub.f32	s14, s14, s2
 80081f2:	ee73 1a84 	vadd.f32	s3, s7, s8
 80081f6:	ee33 4ac4 	vsub.f32	s8, s7, s8
 80081fa:	ee76 3a27 	vadd.f32	s7, s12, s15
 80081fe:	ee76 7a67 	vsub.f32	s15, s12, s15
 8008202:	ee32 8a00 	vadd.f32	s16, s4, s0
 8008206:	ee33 1a45 	vsub.f32	s2, s6, s10
 800820a:	ee32 2a40 	vsub.f32	s4, s4, s0
 800820e:	ee35 5a03 	vadd.f32	s10, s10, s6
 8008212:	ee34 0aa6 	vadd.f32	s0, s9, s13
 8008216:	ee32 3aa0 	vadd.f32	s6, s5, s1
 800821a:	ee74 6ae6 	vsub.f32	s13, s9, s13
 800821e:	ee34 6a67 	vsub.f32	s12, s8, s15
 8008222:	ee75 4a87 	vadd.f32	s9, s11, s14
 8008226:	ee72 2ae0 	vsub.f32	s5, s5, s1
 800822a:	ee35 7ac7 	vsub.f32	s14, s11, s14
 800822e:	ee77 7a84 	vadd.f32	s15, s15, s8
 8008232:	ee71 5ae3 	vsub.f32	s11, s3, s7
 8008236:	44dc      	add	ip, fp
 8008238:	ee73 3aa1 	vadd.f32	s7, s7, s3
 800823c:	45e1      	cmp	r9, ip
 800823e:	ed86 8a00 	vstr	s16, [r6]
 8008242:	ed85 2a01 	vstr	s4, [r5, #4]
 8008246:	4456      	add	r6, sl
 8008248:	ed02 0a01 	vstr	s0, [r2, #-4]
 800824c:	4455      	add	r5, sl
 800824e:	edc0 6a00 	vstr	s13, [r0]
 8008252:	ed82 1a00 	vstr	s2, [r2]
 8008256:	ed80 5a01 	vstr	s10, [r0, #4]
 800825a:	4452      	add	r2, sl
 800825c:	ed01 3a01 	vstr	s6, [r1, #-4]
 8008260:	4450      	add	r0, sl
 8008262:	edc7 2a00 	vstr	s5, [r7]
 8008266:	edc4 4a00 	vstr	s9, [r4]
 800826a:	ed83 7a00 	vstr	s14, [r3]
 800826e:	edc1 5a00 	vstr	s11, [r1]
 8008272:	edc7 3a01 	vstr	s7, [r7, #4]
 8008276:	4451      	add	r1, sl
 8008278:	ed84 6a01 	vstr	s12, [r4, #4]
 800827c:	4457      	add	r7, sl
 800827e:	edc3 7a01 	vstr	s15, [r3, #4]
 8008282:	4454      	add	r4, sl
 8008284:	4453      	add	r3, sl
 8008286:	f63f af44 	bhi.w	8008112 <arm_radix8_butterfly_f32+0x86>
 800828a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800828c:	2b07      	cmp	r3, #7
 800828e:	f240 81b7 	bls.w	8008600 <arm_radix8_butterfly_f32+0x574>
 8008292:	9b06      	ldr	r3, [sp, #24]
 8008294:	9903      	ldr	r1, [sp, #12]
 8008296:	9812      	ldr	r0, [sp, #72]	; 0x48
 8008298:	9e05      	ldr	r6, [sp, #20]
 800829a:	9a04      	ldr	r2, [sp, #16]
 800829c:	f103 0c08 	add.w	ip, r3, #8
 80082a0:	9b02      	ldr	r3, [sp, #8]
 80082a2:	3108      	adds	r1, #8
 80082a4:	f108 0808 	add.w	r8, r8, #8
 80082a8:	1841      	adds	r1, r0, r1
 80082aa:	3608      	adds	r6, #8
 80082ac:	330c      	adds	r3, #12
 80082ae:	4604      	mov	r4, r0
 80082b0:	4444      	add	r4, r8
 80082b2:	18c3      	adds	r3, r0, r3
 80082b4:	9109      	str	r1, [sp, #36]	; 0x24
 80082b6:	1981      	adds	r1, r0, r6
 80082b8:	f10e 0e08 	add.w	lr, lr, #8
 80082bc:	3208      	adds	r2, #8
 80082be:	940b      	str	r4, [sp, #44]	; 0x2c
 80082c0:	9107      	str	r1, [sp, #28]
 80082c2:	4604      	mov	r4, r0
 80082c4:	4601      	mov	r1, r0
 80082c6:	9304      	str	r3, [sp, #16]
 80082c8:	f100 030c 	add.w	r3, r0, #12
 80082cc:	4474      	add	r4, lr
 80082ce:	f04f 0801 	mov.w	r8, #1
 80082d2:	1882      	adds	r2, r0, r2
 80082d4:	4461      	add	r1, ip
 80082d6:	9305      	str	r3, [sp, #20]
 80082d8:	464b      	mov	r3, r9
 80082da:	940a      	str	r4, [sp, #40]	; 0x28
 80082dc:	46c1      	mov	r9, r8
 80082de:	9208      	str	r2, [sp, #32]
 80082e0:	46d8      	mov	r8, fp
 80082e2:	9106      	str	r1, [sp, #24]
 80082e4:	f04f 0e00 	mov.w	lr, #0
 80082e8:	469b      	mov	fp, r3
 80082ea:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80082ec:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80082ee:	449e      	add	lr, r3
 80082f0:	ea4f 03ce 	mov.w	r3, lr, lsl #3
 80082f4:	441a      	add	r2, r3
 80082f6:	920e      	str	r2, [sp, #56]	; 0x38
 80082f8:	441a      	add	r2, r3
 80082fa:	18d4      	adds	r4, r2, r3
 80082fc:	18e5      	adds	r5, r4, r3
 80082fe:	18ee      	adds	r6, r5, r3
 8008300:	18f7      	adds	r7, r6, r3
 8008302:	eb07 0c03 	add.w	ip, r7, r3
 8008306:	920d      	str	r2, [sp, #52]	; 0x34
 8008308:	ebae 028e 	sub.w	r2, lr, lr, lsl #2
 800830c:	eb0c 1102 	add.w	r1, ip, r2, lsl #4
 8008310:	910c      	str	r1, [sp, #48]	; 0x30
 8008312:	4419      	add	r1, r3
 8008314:	9103      	str	r1, [sp, #12]
 8008316:	4419      	add	r1, r3
 8008318:	18ca      	adds	r2, r1, r3
 800831a:	9202      	str	r2, [sp, #8]
 800831c:	441a      	add	r2, r3
 800831e:	18d0      	adds	r0, r2, r3
 8008320:	ed92 ea01 	vldr	s28, [r2, #4]
 8008324:	9a02      	ldr	r2, [sp, #8]
 8008326:	edd4 7a00 	vldr	s15, [r4]
 800832a:	edd2 da01 	vldr	s27, [r2, #4]
 800832e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008330:	ed91 da01 	vldr	s26, [r1, #4]
 8008334:	ed92 ca01 	vldr	s24, [r2, #4]
 8008338:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800833a:	9903      	ldr	r1, [sp, #12]
 800833c:	edcd 7a03 	vstr	s15, [sp, #12]
 8008340:	edd2 7a00 	vldr	s15, [r2]
 8008344:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008346:	edcd 7a02 	vstr	s15, [sp, #8]
 800834a:	edd2 7a00 	vldr	s15, [r2]
 800834e:	edd0 ea01 	vldr	s29, [r0, #4]
 8008352:	edd1 ca01 	vldr	s25, [r1, #4]
 8008356:	eddc ba00 	vldr	s23, [ip]
 800835a:	edd7 aa00 	vldr	s21, [r7]
 800835e:	ed96 aa00 	vldr	s20, [r6]
 8008362:	edd5 9a00 	vldr	s19, [r5]
 8008366:	edcd 7a01 	vstr	s15, [sp, #4]
 800836a:	4403      	add	r3, r0
 800836c:	ed93 fa01 	vldr	s30, [r3, #4]
 8008370:	e9dd 7604 	ldrd	r7, r6, [sp, #16]
 8008374:	e9dd 5406 	ldrd	r5, r4, [sp, #24]
 8008378:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800837c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008380:	46cc      	mov	ip, r9
 8008382:	e001      	b.n	8008388 <arm_radix8_butterfly_f32+0x2fc>
 8008384:	3f3504f3 	.word	0x3f3504f3
 8008388:	ed91 6a00 	vldr	s12, [r1]
 800838c:	ed93 5a00 	vldr	s10, [r3]
 8008390:	edd0 fa00 	vldr	s31, [r0]
 8008394:	edd4 7a00 	vldr	s15, [r4]
 8008398:	ed95 7a00 	vldr	s14, [r5]
 800839c:	ed56 3a01 	vldr	s7, [r6, #-4]
 80083a0:	ed17 3a01 	vldr	s6, [r7, #-4]
 80083a4:	ed92 2a00 	vldr	s4, [r2]
 80083a8:	ed96 0a00 	vldr	s0, [r6]
 80083ac:	ee33 8a85 	vadd.f32	s16, s7, s10
 80083b0:	ee32 1a06 	vadd.f32	s2, s4, s12
 80083b4:	ee33 4a2f 	vadd.f32	s8, s6, s31
 80083b8:	ee77 4a87 	vadd.f32	s9, s15, s14
 80083bc:	ee78 1a04 	vadd.f32	s3, s16, s8
 80083c0:	ee71 6a24 	vadd.f32	s13, s2, s9
 80083c4:	ee32 2a46 	vsub.f32	s4, s4, s12
 80083c8:	ee31 6aa6 	vadd.f32	s12, s3, s13
 80083cc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80083d0:	ed06 6a01 	vstr	s12, [r6, #-4]
 80083d4:	edd4 8a01 	vldr	s17, [r4, #4]
 80083d8:	ed92 9a01 	vldr	s18, [r2, #4]
 80083dc:	edd7 0a00 	vldr	s1, [r7]
 80083e0:	edd1 2a01 	vldr	s5, [r1, #4]
 80083e4:	ed95 7a01 	vldr	s14, [r5, #4]
 80083e8:	ed93 6a01 	vldr	s12, [r3, #4]
 80083ec:	edd0 5a01 	vldr	s11, [r0, #4]
 80083f0:	ee73 3ac5 	vsub.f32	s7, s7, s10
 80083f4:	ee33 3a6f 	vsub.f32	s6, s6, s31
 80083f8:	ee39 5a62 	vsub.f32	s10, s18, s5
 80083fc:	ee78 fac7 	vsub.f32	s31, s17, s14
 8008400:	ee38 4a44 	vsub.f32	s8, s16, s8
 8008404:	ee38 7a87 	vadd.f32	s14, s17, s14
 8008408:	ee30 8aa5 	vadd.f32	s16, s1, s11
 800840c:	ee79 2a22 	vadd.f32	s5, s18, s5
 8008410:	ee32 9a27 	vadd.f32	s18, s4, s15
 8008414:	ee72 7a67 	vsub.f32	s15, s4, s15
 8008418:	ee30 2a06 	vadd.f32	s4, s0, s12
 800841c:	ee75 8a6f 	vsub.f32	s17, s10, s31
 8008420:	ee71 4a64 	vsub.f32	s9, s2, s9
 8008424:	ee35 5a2f 	vadd.f32	s10, s10, s31
 8008428:	ee32 1a08 	vadd.f32	s2, s4, s16
 800842c:	ee72 fa87 	vadd.f32	s31, s5, s14
 8008430:	ee32 2a48 	vsub.f32	s4, s4, s16
 8008434:	ee68 8a8b 	vmul.f32	s17, s17, s22
 8008438:	ee25 5a0b 	vmul.f32	s10, s10, s22
 800843c:	ee70 5ae5 	vsub.f32	s11, s1, s11
 8008440:	ee72 2ac7 	vsub.f32	s5, s5, s14
 8008444:	ee71 6ae6 	vsub.f32	s13, s3, s13
 8008448:	ee29 9a0b 	vmul.f32	s18, s18, s22
 800844c:	ee71 1a6f 	vsub.f32	s3, s2, s31
 8008450:	ee67 7a8b 	vmul.f32	s15, s15, s22
 8008454:	ee30 6a46 	vsub.f32	s12, s0, s12
 8008458:	ee74 0a22 	vadd.f32	s1, s8, s5
 800845c:	ee36 0a28 	vadd.f32	s0, s12, s17
 8008460:	ee74 2a62 	vsub.f32	s5, s8, s5
 8008464:	ee36 6a68 	vsub.f32	s12, s12, s17
 8008468:	ee32 4a64 	vsub.f32	s8, s4, s9
 800846c:	ee73 8a09 	vadd.f32	s17, s6, s18
 8008470:	ee74 4a82 	vadd.f32	s9, s9, s4
 8008474:	ee33 9a49 	vsub.f32	s18, s6, s18
 8008478:	ee2d 2aa1 	vmul.f32	s4, s27, s3
 800847c:	ee35 3a85 	vadd.f32	s6, s11, s10
 8008480:	ee75 5ac5 	vsub.f32	s11, s11, s10
 8008484:	ee33 5aa7 	vadd.f32	s10, s7, s15
 8008488:	ee73 7ae7 	vsub.f32	s15, s7, s15
 800848c:	ee69 3aa6 	vmul.f32	s7, s19, s13
 8008490:	ee30 7a68 	vsub.f32	s14, s0, s17
 8008494:	ee35 8a03 	vadd.f32	s16, s10, s6
 8008498:	ee38 0a80 	vadd.f32	s0, s17, s0
 800849c:	ee73 3a82 	vadd.f32	s7, s7, s4
 80084a0:	ee69 8aa1 	vmul.f32	s17, s19, s3
 80084a4:	ed9d 2a01 	vldr	s4, [sp, #4]
 80084a8:	eddd 1a02 	vldr	s3, [sp, #8]
 80084ac:	ee35 5a43 	vsub.f32	s10, s10, s6
 80084b0:	ee71 fa2f 	vadd.f32	s31, s2, s31
 80084b4:	ee37 3aa5 	vadd.f32	s6, s15, s11
 80084b8:	ee21 1aa0 	vmul.f32	s2, s3, s1
 80084bc:	ee77 7ae5 	vsub.f32	s15, s15, s11
 80084c0:	ee6d 6aa6 	vmul.f32	s13, s27, s13
 80084c4:	ee76 5a49 	vsub.f32	s11, s12, s18
 80084c8:	ee6c 0aa0 	vmul.f32	s1, s25, s1
 80084cc:	ee39 6a06 	vadd.f32	s12, s18, s12
 80084d0:	ee2c 9a84 	vmul.f32	s18, s25, s8
 80084d4:	ee21 4a84 	vmul.f32	s8, s3, s8
 80084d8:	ee6c 1a07 	vmul.f32	s3, s24, s14
 80084dc:	ee22 7a07 	vmul.f32	s14, s4, s14
 80084e0:	ee22 2a08 	vmul.f32	s4, s4, s16
 80084e4:	ee2c 8a08 	vmul.f32	s16, s24, s16
 80084e8:	ee78 6ae6 	vsub.f32	s13, s17, s13
 80084ec:	ee31 1a09 	vadd.f32	s2, s2, s18
 80084f0:	ee6a 8aa2 	vmul.f32	s17, s21, s5
 80084f4:	ee2e 9aa4 	vmul.f32	s18, s29, s9
 80084f8:	ee74 0a60 	vsub.f32	s1, s8, s1
 80084fc:	ee37 7a48 	vsub.f32	s14, s14, s16
 8008500:	ee2f 4a00 	vmul.f32	s8, s30, s0
 8008504:	ee2b 8a85 	vmul.f32	s16, s23, s10
 8008508:	ee72 1a21 	vadd.f32	s3, s4, s3
 800850c:	ee6a 4aa4 	vmul.f32	s9, s21, s9
 8008510:	ee38 2a89 	vadd.f32	s4, s17, s18
 8008514:	ee2f 5a05 	vmul.f32	s10, s30, s10
 8008518:	ee38 8a04 	vadd.f32	s16, s16, s8
 800851c:	ee2e 9a25 	vmul.f32	s18, s28, s11
 8008520:	ee2a 4a25 	vmul.f32	s8, s20, s11
 8008524:	ee6e 2aa2 	vmul.f32	s5, s29, s5
 8008528:	eddd 5a03 	vldr	s11, [sp, #12]
 800852c:	edc6 fa00 	vstr	s31, [r6]
 8008530:	ee2b 0a80 	vmul.f32	s0, s23, s0
 8008534:	ee74 2ae2 	vsub.f32	s5, s9, s5
 8008538:	ee30 0a45 	vsub.f32	s0, s0, s10
 800853c:	ee6a 4a03 	vmul.f32	s9, s20, s6
 8008540:	ee65 8aa7 	vmul.f32	s17, s11, s15
 8008544:	ee2d 5a06 	vmul.f32	s10, s26, s12
 8008548:	ee2e 3a03 	vmul.f32	s6, s28, s6
 800854c:	ee6d 7a27 	vmul.f32	s15, s26, s15
 8008550:	ee25 6a86 	vmul.f32	s12, s11, s12
 8008554:	ee74 4a89 	vadd.f32	s9, s9, s18
 8008558:	ee34 3a43 	vsub.f32	s6, s8, s6
 800855c:	ee78 8a85 	vadd.f32	s17, s17, s10
 8008560:	ee36 6a67 	vsub.f32	s12, s12, s15
 8008564:	44c4      	add	ip, r8
 8008566:	45e3      	cmp	fp, ip
 8008568:	edc3 3a00 	vstr	s7, [r3]
 800856c:	edc3 6a01 	vstr	s13, [r3, #4]
 8008570:	4456      	add	r6, sl
 8008572:	ed07 1a01 	vstr	s2, [r7, #-4]
 8008576:	edc7 0a00 	vstr	s1, [r7]
 800857a:	4453      	add	r3, sl
 800857c:	ed80 2a00 	vstr	s4, [r0]
 8008580:	edc0 2a01 	vstr	s5, [r0, #4]
 8008584:	4457      	add	r7, sl
 8008586:	edc2 1a00 	vstr	s3, [r2]
 800858a:	ed82 7a01 	vstr	s14, [r2, #4]
 800858e:	4450      	add	r0, sl
 8008590:	ed85 8a00 	vstr	s16, [r5]
 8008594:	ed85 0a01 	vstr	s0, [r5, #4]
 8008598:	4452      	add	r2, sl
 800859a:	edc1 4a00 	vstr	s9, [r1]
 800859e:	4455      	add	r5, sl
 80085a0:	ed81 3a01 	vstr	s6, [r1, #4]
 80085a4:	edc4 8a00 	vstr	s17, [r4]
 80085a8:	ed84 6a01 	vstr	s12, [r4, #4]
 80085ac:	4451      	add	r1, sl
 80085ae:	4454      	add	r4, sl
 80085b0:	f63f aeea 	bhi.w	8008388 <arm_radix8_butterfly_f32+0x2fc>
 80085b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80085b6:	3308      	adds	r3, #8
 80085b8:	930b      	str	r3, [sp, #44]	; 0x2c
 80085ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80085bc:	3308      	adds	r3, #8
 80085be:	930a      	str	r3, [sp, #40]	; 0x28
 80085c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085c2:	3308      	adds	r3, #8
 80085c4:	9309      	str	r3, [sp, #36]	; 0x24
 80085c6:	9b08      	ldr	r3, [sp, #32]
 80085c8:	3308      	adds	r3, #8
 80085ca:	9308      	str	r3, [sp, #32]
 80085cc:	9b07      	ldr	r3, [sp, #28]
 80085ce:	3308      	adds	r3, #8
 80085d0:	9307      	str	r3, [sp, #28]
 80085d2:	9b06      	ldr	r3, [sp, #24]
 80085d4:	3308      	adds	r3, #8
 80085d6:	9306      	str	r3, [sp, #24]
 80085d8:	9b05      	ldr	r3, [sp, #20]
 80085da:	3308      	adds	r3, #8
 80085dc:	9305      	str	r3, [sp, #20]
 80085de:	9b04      	ldr	r3, [sp, #16]
 80085e0:	3308      	adds	r3, #8
 80085e2:	9304      	str	r3, [sp, #16]
 80085e4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80085e6:	f109 0901 	add.w	r9, r9, #1
 80085ea:	454b      	cmp	r3, r9
 80085ec:	f47f ae7d 	bne.w	80082ea <arm_radix8_butterfly_f32+0x25e>
 80085f0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80085f2:	00db      	lsls	r3, r3, #3
 80085f4:	b29b      	uxth	r3, r3
 80085f6:	46d9      	mov	r9, fp
 80085f8:	9310      	str	r3, [sp, #64]	; 0x40
 80085fa:	f8dd b03c 	ldr.w	fp, [sp, #60]	; 0x3c
 80085fe:	e554      	b.n	80080aa <arm_radix8_butterfly_f32+0x1e>
 8008600:	b015      	add	sp, #84	; 0x54
 8008602:	ecbd 8b10 	vpop	{d8-d15}
 8008606:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800860a:	bf00      	nop

0800860c <__errno>:
 800860c:	4b01      	ldr	r3, [pc, #4]	; (8008614 <__errno+0x8>)
 800860e:	6818      	ldr	r0, [r3, #0]
 8008610:	4770      	bx	lr
 8008612:	bf00      	nop
 8008614:	2000000c 	.word	0x2000000c

08008618 <__libc_init_array>:
 8008618:	b570      	push	{r4, r5, r6, lr}
 800861a:	4d0d      	ldr	r5, [pc, #52]	; (8008650 <__libc_init_array+0x38>)
 800861c:	4c0d      	ldr	r4, [pc, #52]	; (8008654 <__libc_init_array+0x3c>)
 800861e:	1b64      	subs	r4, r4, r5
 8008620:	10a4      	asrs	r4, r4, #2
 8008622:	2600      	movs	r6, #0
 8008624:	42a6      	cmp	r6, r4
 8008626:	d109      	bne.n	800863c <__libc_init_array+0x24>
 8008628:	4d0b      	ldr	r5, [pc, #44]	; (8008658 <__libc_init_array+0x40>)
 800862a:	4c0c      	ldr	r4, [pc, #48]	; (800865c <__libc_init_array+0x44>)
 800862c:	f001 f846 	bl	80096bc <_init>
 8008630:	1b64      	subs	r4, r4, r5
 8008632:	10a4      	asrs	r4, r4, #2
 8008634:	2600      	movs	r6, #0
 8008636:	42a6      	cmp	r6, r4
 8008638:	d105      	bne.n	8008646 <__libc_init_array+0x2e>
 800863a:	bd70      	pop	{r4, r5, r6, pc}
 800863c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008640:	4798      	blx	r3
 8008642:	3601      	adds	r6, #1
 8008644:	e7ee      	b.n	8008624 <__libc_init_array+0xc>
 8008646:	f855 3b04 	ldr.w	r3, [r5], #4
 800864a:	4798      	blx	r3
 800864c:	3601      	adds	r6, #1
 800864e:	e7f2      	b.n	8008636 <__libc_init_array+0x1e>
 8008650:	0801c7cc 	.word	0x0801c7cc
 8008654:	0801c7cc 	.word	0x0801c7cc
 8008658:	0801c7cc 	.word	0x0801c7cc
 800865c:	0801c7d0 	.word	0x0801c7d0

08008660 <memset>:
 8008660:	4402      	add	r2, r0
 8008662:	4603      	mov	r3, r0
 8008664:	4293      	cmp	r3, r2
 8008666:	d100      	bne.n	800866a <memset+0xa>
 8008668:	4770      	bx	lr
 800866a:	f803 1b01 	strb.w	r1, [r3], #1
 800866e:	e7f9      	b.n	8008664 <memset+0x4>

08008670 <iprintf>:
 8008670:	b40f      	push	{r0, r1, r2, r3}
 8008672:	4b0a      	ldr	r3, [pc, #40]	; (800869c <iprintf+0x2c>)
 8008674:	b513      	push	{r0, r1, r4, lr}
 8008676:	681c      	ldr	r4, [r3, #0]
 8008678:	b124      	cbz	r4, 8008684 <iprintf+0x14>
 800867a:	69a3      	ldr	r3, [r4, #24]
 800867c:	b913      	cbnz	r3, 8008684 <iprintf+0x14>
 800867e:	4620      	mov	r0, r4
 8008680:	f000 fa5e 	bl	8008b40 <__sinit>
 8008684:	ab05      	add	r3, sp, #20
 8008686:	9a04      	ldr	r2, [sp, #16]
 8008688:	68a1      	ldr	r1, [r4, #8]
 800868a:	9301      	str	r3, [sp, #4]
 800868c:	4620      	mov	r0, r4
 800868e:	f000 fc67 	bl	8008f60 <_vfiprintf_r>
 8008692:	b002      	add	sp, #8
 8008694:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008698:	b004      	add	sp, #16
 800869a:	4770      	bx	lr
 800869c:	2000000c 	.word	0x2000000c

080086a0 <_puts_r>:
 80086a0:	b570      	push	{r4, r5, r6, lr}
 80086a2:	460e      	mov	r6, r1
 80086a4:	4605      	mov	r5, r0
 80086a6:	b118      	cbz	r0, 80086b0 <_puts_r+0x10>
 80086a8:	6983      	ldr	r3, [r0, #24]
 80086aa:	b90b      	cbnz	r3, 80086b0 <_puts_r+0x10>
 80086ac:	f000 fa48 	bl	8008b40 <__sinit>
 80086b0:	69ab      	ldr	r3, [r5, #24]
 80086b2:	68ac      	ldr	r4, [r5, #8]
 80086b4:	b913      	cbnz	r3, 80086bc <_puts_r+0x1c>
 80086b6:	4628      	mov	r0, r5
 80086b8:	f000 fa42 	bl	8008b40 <__sinit>
 80086bc:	4b2c      	ldr	r3, [pc, #176]	; (8008770 <_puts_r+0xd0>)
 80086be:	429c      	cmp	r4, r3
 80086c0:	d120      	bne.n	8008704 <_puts_r+0x64>
 80086c2:	686c      	ldr	r4, [r5, #4]
 80086c4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80086c6:	07db      	lsls	r3, r3, #31
 80086c8:	d405      	bmi.n	80086d6 <_puts_r+0x36>
 80086ca:	89a3      	ldrh	r3, [r4, #12]
 80086cc:	0598      	lsls	r0, r3, #22
 80086ce:	d402      	bmi.n	80086d6 <_puts_r+0x36>
 80086d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80086d2:	f000 fad3 	bl	8008c7c <__retarget_lock_acquire_recursive>
 80086d6:	89a3      	ldrh	r3, [r4, #12]
 80086d8:	0719      	lsls	r1, r3, #28
 80086da:	d51d      	bpl.n	8008718 <_puts_r+0x78>
 80086dc:	6923      	ldr	r3, [r4, #16]
 80086de:	b1db      	cbz	r3, 8008718 <_puts_r+0x78>
 80086e0:	3e01      	subs	r6, #1
 80086e2:	68a3      	ldr	r3, [r4, #8]
 80086e4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80086e8:	3b01      	subs	r3, #1
 80086ea:	60a3      	str	r3, [r4, #8]
 80086ec:	bb39      	cbnz	r1, 800873e <_puts_r+0x9e>
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	da38      	bge.n	8008764 <_puts_r+0xc4>
 80086f2:	4622      	mov	r2, r4
 80086f4:	210a      	movs	r1, #10
 80086f6:	4628      	mov	r0, r5
 80086f8:	f000 f848 	bl	800878c <__swbuf_r>
 80086fc:	3001      	adds	r0, #1
 80086fe:	d011      	beq.n	8008724 <_puts_r+0x84>
 8008700:	250a      	movs	r5, #10
 8008702:	e011      	b.n	8008728 <_puts_r+0x88>
 8008704:	4b1b      	ldr	r3, [pc, #108]	; (8008774 <_puts_r+0xd4>)
 8008706:	429c      	cmp	r4, r3
 8008708:	d101      	bne.n	800870e <_puts_r+0x6e>
 800870a:	68ac      	ldr	r4, [r5, #8]
 800870c:	e7da      	b.n	80086c4 <_puts_r+0x24>
 800870e:	4b1a      	ldr	r3, [pc, #104]	; (8008778 <_puts_r+0xd8>)
 8008710:	429c      	cmp	r4, r3
 8008712:	bf08      	it	eq
 8008714:	68ec      	ldreq	r4, [r5, #12]
 8008716:	e7d5      	b.n	80086c4 <_puts_r+0x24>
 8008718:	4621      	mov	r1, r4
 800871a:	4628      	mov	r0, r5
 800871c:	f000 f888 	bl	8008830 <__swsetup_r>
 8008720:	2800      	cmp	r0, #0
 8008722:	d0dd      	beq.n	80086e0 <_puts_r+0x40>
 8008724:	f04f 35ff 	mov.w	r5, #4294967295
 8008728:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800872a:	07da      	lsls	r2, r3, #31
 800872c:	d405      	bmi.n	800873a <_puts_r+0x9a>
 800872e:	89a3      	ldrh	r3, [r4, #12]
 8008730:	059b      	lsls	r3, r3, #22
 8008732:	d402      	bmi.n	800873a <_puts_r+0x9a>
 8008734:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008736:	f000 faa2 	bl	8008c7e <__retarget_lock_release_recursive>
 800873a:	4628      	mov	r0, r5
 800873c:	bd70      	pop	{r4, r5, r6, pc}
 800873e:	2b00      	cmp	r3, #0
 8008740:	da04      	bge.n	800874c <_puts_r+0xac>
 8008742:	69a2      	ldr	r2, [r4, #24]
 8008744:	429a      	cmp	r2, r3
 8008746:	dc06      	bgt.n	8008756 <_puts_r+0xb6>
 8008748:	290a      	cmp	r1, #10
 800874a:	d004      	beq.n	8008756 <_puts_r+0xb6>
 800874c:	6823      	ldr	r3, [r4, #0]
 800874e:	1c5a      	adds	r2, r3, #1
 8008750:	6022      	str	r2, [r4, #0]
 8008752:	7019      	strb	r1, [r3, #0]
 8008754:	e7c5      	b.n	80086e2 <_puts_r+0x42>
 8008756:	4622      	mov	r2, r4
 8008758:	4628      	mov	r0, r5
 800875a:	f000 f817 	bl	800878c <__swbuf_r>
 800875e:	3001      	adds	r0, #1
 8008760:	d1bf      	bne.n	80086e2 <_puts_r+0x42>
 8008762:	e7df      	b.n	8008724 <_puts_r+0x84>
 8008764:	6823      	ldr	r3, [r4, #0]
 8008766:	250a      	movs	r5, #10
 8008768:	1c5a      	adds	r2, r3, #1
 800876a:	6022      	str	r2, [r4, #0]
 800876c:	701d      	strb	r5, [r3, #0]
 800876e:	e7db      	b.n	8008728 <_puts_r+0x88>
 8008770:	0801c750 	.word	0x0801c750
 8008774:	0801c770 	.word	0x0801c770
 8008778:	0801c730 	.word	0x0801c730

0800877c <puts>:
 800877c:	4b02      	ldr	r3, [pc, #8]	; (8008788 <puts+0xc>)
 800877e:	4601      	mov	r1, r0
 8008780:	6818      	ldr	r0, [r3, #0]
 8008782:	f7ff bf8d 	b.w	80086a0 <_puts_r>
 8008786:	bf00      	nop
 8008788:	2000000c 	.word	0x2000000c

0800878c <__swbuf_r>:
 800878c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800878e:	460e      	mov	r6, r1
 8008790:	4614      	mov	r4, r2
 8008792:	4605      	mov	r5, r0
 8008794:	b118      	cbz	r0, 800879e <__swbuf_r+0x12>
 8008796:	6983      	ldr	r3, [r0, #24]
 8008798:	b90b      	cbnz	r3, 800879e <__swbuf_r+0x12>
 800879a:	f000 f9d1 	bl	8008b40 <__sinit>
 800879e:	4b21      	ldr	r3, [pc, #132]	; (8008824 <__swbuf_r+0x98>)
 80087a0:	429c      	cmp	r4, r3
 80087a2:	d12b      	bne.n	80087fc <__swbuf_r+0x70>
 80087a4:	686c      	ldr	r4, [r5, #4]
 80087a6:	69a3      	ldr	r3, [r4, #24]
 80087a8:	60a3      	str	r3, [r4, #8]
 80087aa:	89a3      	ldrh	r3, [r4, #12]
 80087ac:	071a      	lsls	r2, r3, #28
 80087ae:	d52f      	bpl.n	8008810 <__swbuf_r+0x84>
 80087b0:	6923      	ldr	r3, [r4, #16]
 80087b2:	b36b      	cbz	r3, 8008810 <__swbuf_r+0x84>
 80087b4:	6923      	ldr	r3, [r4, #16]
 80087b6:	6820      	ldr	r0, [r4, #0]
 80087b8:	1ac0      	subs	r0, r0, r3
 80087ba:	6963      	ldr	r3, [r4, #20]
 80087bc:	b2f6      	uxtb	r6, r6
 80087be:	4283      	cmp	r3, r0
 80087c0:	4637      	mov	r7, r6
 80087c2:	dc04      	bgt.n	80087ce <__swbuf_r+0x42>
 80087c4:	4621      	mov	r1, r4
 80087c6:	4628      	mov	r0, r5
 80087c8:	f000 f926 	bl	8008a18 <_fflush_r>
 80087cc:	bb30      	cbnz	r0, 800881c <__swbuf_r+0x90>
 80087ce:	68a3      	ldr	r3, [r4, #8]
 80087d0:	3b01      	subs	r3, #1
 80087d2:	60a3      	str	r3, [r4, #8]
 80087d4:	6823      	ldr	r3, [r4, #0]
 80087d6:	1c5a      	adds	r2, r3, #1
 80087d8:	6022      	str	r2, [r4, #0]
 80087da:	701e      	strb	r6, [r3, #0]
 80087dc:	6963      	ldr	r3, [r4, #20]
 80087de:	3001      	adds	r0, #1
 80087e0:	4283      	cmp	r3, r0
 80087e2:	d004      	beq.n	80087ee <__swbuf_r+0x62>
 80087e4:	89a3      	ldrh	r3, [r4, #12]
 80087e6:	07db      	lsls	r3, r3, #31
 80087e8:	d506      	bpl.n	80087f8 <__swbuf_r+0x6c>
 80087ea:	2e0a      	cmp	r6, #10
 80087ec:	d104      	bne.n	80087f8 <__swbuf_r+0x6c>
 80087ee:	4621      	mov	r1, r4
 80087f0:	4628      	mov	r0, r5
 80087f2:	f000 f911 	bl	8008a18 <_fflush_r>
 80087f6:	b988      	cbnz	r0, 800881c <__swbuf_r+0x90>
 80087f8:	4638      	mov	r0, r7
 80087fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80087fc:	4b0a      	ldr	r3, [pc, #40]	; (8008828 <__swbuf_r+0x9c>)
 80087fe:	429c      	cmp	r4, r3
 8008800:	d101      	bne.n	8008806 <__swbuf_r+0x7a>
 8008802:	68ac      	ldr	r4, [r5, #8]
 8008804:	e7cf      	b.n	80087a6 <__swbuf_r+0x1a>
 8008806:	4b09      	ldr	r3, [pc, #36]	; (800882c <__swbuf_r+0xa0>)
 8008808:	429c      	cmp	r4, r3
 800880a:	bf08      	it	eq
 800880c:	68ec      	ldreq	r4, [r5, #12]
 800880e:	e7ca      	b.n	80087a6 <__swbuf_r+0x1a>
 8008810:	4621      	mov	r1, r4
 8008812:	4628      	mov	r0, r5
 8008814:	f000 f80c 	bl	8008830 <__swsetup_r>
 8008818:	2800      	cmp	r0, #0
 800881a:	d0cb      	beq.n	80087b4 <__swbuf_r+0x28>
 800881c:	f04f 37ff 	mov.w	r7, #4294967295
 8008820:	e7ea      	b.n	80087f8 <__swbuf_r+0x6c>
 8008822:	bf00      	nop
 8008824:	0801c750 	.word	0x0801c750
 8008828:	0801c770 	.word	0x0801c770
 800882c:	0801c730 	.word	0x0801c730

08008830 <__swsetup_r>:
 8008830:	4b32      	ldr	r3, [pc, #200]	; (80088fc <__swsetup_r+0xcc>)
 8008832:	b570      	push	{r4, r5, r6, lr}
 8008834:	681d      	ldr	r5, [r3, #0]
 8008836:	4606      	mov	r6, r0
 8008838:	460c      	mov	r4, r1
 800883a:	b125      	cbz	r5, 8008846 <__swsetup_r+0x16>
 800883c:	69ab      	ldr	r3, [r5, #24]
 800883e:	b913      	cbnz	r3, 8008846 <__swsetup_r+0x16>
 8008840:	4628      	mov	r0, r5
 8008842:	f000 f97d 	bl	8008b40 <__sinit>
 8008846:	4b2e      	ldr	r3, [pc, #184]	; (8008900 <__swsetup_r+0xd0>)
 8008848:	429c      	cmp	r4, r3
 800884a:	d10f      	bne.n	800886c <__swsetup_r+0x3c>
 800884c:	686c      	ldr	r4, [r5, #4]
 800884e:	89a3      	ldrh	r3, [r4, #12]
 8008850:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008854:	0719      	lsls	r1, r3, #28
 8008856:	d42c      	bmi.n	80088b2 <__swsetup_r+0x82>
 8008858:	06dd      	lsls	r5, r3, #27
 800885a:	d411      	bmi.n	8008880 <__swsetup_r+0x50>
 800885c:	2309      	movs	r3, #9
 800885e:	6033      	str	r3, [r6, #0]
 8008860:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008864:	81a3      	strh	r3, [r4, #12]
 8008866:	f04f 30ff 	mov.w	r0, #4294967295
 800886a:	e03e      	b.n	80088ea <__swsetup_r+0xba>
 800886c:	4b25      	ldr	r3, [pc, #148]	; (8008904 <__swsetup_r+0xd4>)
 800886e:	429c      	cmp	r4, r3
 8008870:	d101      	bne.n	8008876 <__swsetup_r+0x46>
 8008872:	68ac      	ldr	r4, [r5, #8]
 8008874:	e7eb      	b.n	800884e <__swsetup_r+0x1e>
 8008876:	4b24      	ldr	r3, [pc, #144]	; (8008908 <__swsetup_r+0xd8>)
 8008878:	429c      	cmp	r4, r3
 800887a:	bf08      	it	eq
 800887c:	68ec      	ldreq	r4, [r5, #12]
 800887e:	e7e6      	b.n	800884e <__swsetup_r+0x1e>
 8008880:	0758      	lsls	r0, r3, #29
 8008882:	d512      	bpl.n	80088aa <__swsetup_r+0x7a>
 8008884:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008886:	b141      	cbz	r1, 800889a <__swsetup_r+0x6a>
 8008888:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800888c:	4299      	cmp	r1, r3
 800888e:	d002      	beq.n	8008896 <__swsetup_r+0x66>
 8008890:	4630      	mov	r0, r6
 8008892:	f000 fa5b 	bl	8008d4c <_free_r>
 8008896:	2300      	movs	r3, #0
 8008898:	6363      	str	r3, [r4, #52]	; 0x34
 800889a:	89a3      	ldrh	r3, [r4, #12]
 800889c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80088a0:	81a3      	strh	r3, [r4, #12]
 80088a2:	2300      	movs	r3, #0
 80088a4:	6063      	str	r3, [r4, #4]
 80088a6:	6923      	ldr	r3, [r4, #16]
 80088a8:	6023      	str	r3, [r4, #0]
 80088aa:	89a3      	ldrh	r3, [r4, #12]
 80088ac:	f043 0308 	orr.w	r3, r3, #8
 80088b0:	81a3      	strh	r3, [r4, #12]
 80088b2:	6923      	ldr	r3, [r4, #16]
 80088b4:	b94b      	cbnz	r3, 80088ca <__swsetup_r+0x9a>
 80088b6:	89a3      	ldrh	r3, [r4, #12]
 80088b8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80088bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80088c0:	d003      	beq.n	80088ca <__swsetup_r+0x9a>
 80088c2:	4621      	mov	r1, r4
 80088c4:	4630      	mov	r0, r6
 80088c6:	f000 fa01 	bl	8008ccc <__smakebuf_r>
 80088ca:	89a0      	ldrh	r0, [r4, #12]
 80088cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80088d0:	f010 0301 	ands.w	r3, r0, #1
 80088d4:	d00a      	beq.n	80088ec <__swsetup_r+0xbc>
 80088d6:	2300      	movs	r3, #0
 80088d8:	60a3      	str	r3, [r4, #8]
 80088da:	6963      	ldr	r3, [r4, #20]
 80088dc:	425b      	negs	r3, r3
 80088de:	61a3      	str	r3, [r4, #24]
 80088e0:	6923      	ldr	r3, [r4, #16]
 80088e2:	b943      	cbnz	r3, 80088f6 <__swsetup_r+0xc6>
 80088e4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80088e8:	d1ba      	bne.n	8008860 <__swsetup_r+0x30>
 80088ea:	bd70      	pop	{r4, r5, r6, pc}
 80088ec:	0781      	lsls	r1, r0, #30
 80088ee:	bf58      	it	pl
 80088f0:	6963      	ldrpl	r3, [r4, #20]
 80088f2:	60a3      	str	r3, [r4, #8]
 80088f4:	e7f4      	b.n	80088e0 <__swsetup_r+0xb0>
 80088f6:	2000      	movs	r0, #0
 80088f8:	e7f7      	b.n	80088ea <__swsetup_r+0xba>
 80088fa:	bf00      	nop
 80088fc:	2000000c 	.word	0x2000000c
 8008900:	0801c750 	.word	0x0801c750
 8008904:	0801c770 	.word	0x0801c770
 8008908:	0801c730 	.word	0x0801c730

0800890c <__sflush_r>:
 800890c:	898a      	ldrh	r2, [r1, #12]
 800890e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008912:	4605      	mov	r5, r0
 8008914:	0710      	lsls	r0, r2, #28
 8008916:	460c      	mov	r4, r1
 8008918:	d458      	bmi.n	80089cc <__sflush_r+0xc0>
 800891a:	684b      	ldr	r3, [r1, #4]
 800891c:	2b00      	cmp	r3, #0
 800891e:	dc05      	bgt.n	800892c <__sflush_r+0x20>
 8008920:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008922:	2b00      	cmp	r3, #0
 8008924:	dc02      	bgt.n	800892c <__sflush_r+0x20>
 8008926:	2000      	movs	r0, #0
 8008928:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800892c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800892e:	2e00      	cmp	r6, #0
 8008930:	d0f9      	beq.n	8008926 <__sflush_r+0x1a>
 8008932:	2300      	movs	r3, #0
 8008934:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008938:	682f      	ldr	r7, [r5, #0]
 800893a:	602b      	str	r3, [r5, #0]
 800893c:	d032      	beq.n	80089a4 <__sflush_r+0x98>
 800893e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008940:	89a3      	ldrh	r3, [r4, #12]
 8008942:	075a      	lsls	r2, r3, #29
 8008944:	d505      	bpl.n	8008952 <__sflush_r+0x46>
 8008946:	6863      	ldr	r3, [r4, #4]
 8008948:	1ac0      	subs	r0, r0, r3
 800894a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800894c:	b10b      	cbz	r3, 8008952 <__sflush_r+0x46>
 800894e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008950:	1ac0      	subs	r0, r0, r3
 8008952:	2300      	movs	r3, #0
 8008954:	4602      	mov	r2, r0
 8008956:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008958:	6a21      	ldr	r1, [r4, #32]
 800895a:	4628      	mov	r0, r5
 800895c:	47b0      	blx	r6
 800895e:	1c43      	adds	r3, r0, #1
 8008960:	89a3      	ldrh	r3, [r4, #12]
 8008962:	d106      	bne.n	8008972 <__sflush_r+0x66>
 8008964:	6829      	ldr	r1, [r5, #0]
 8008966:	291d      	cmp	r1, #29
 8008968:	d82c      	bhi.n	80089c4 <__sflush_r+0xb8>
 800896a:	4a2a      	ldr	r2, [pc, #168]	; (8008a14 <__sflush_r+0x108>)
 800896c:	40ca      	lsrs	r2, r1
 800896e:	07d6      	lsls	r6, r2, #31
 8008970:	d528      	bpl.n	80089c4 <__sflush_r+0xb8>
 8008972:	2200      	movs	r2, #0
 8008974:	6062      	str	r2, [r4, #4]
 8008976:	04d9      	lsls	r1, r3, #19
 8008978:	6922      	ldr	r2, [r4, #16]
 800897a:	6022      	str	r2, [r4, #0]
 800897c:	d504      	bpl.n	8008988 <__sflush_r+0x7c>
 800897e:	1c42      	adds	r2, r0, #1
 8008980:	d101      	bne.n	8008986 <__sflush_r+0x7a>
 8008982:	682b      	ldr	r3, [r5, #0]
 8008984:	b903      	cbnz	r3, 8008988 <__sflush_r+0x7c>
 8008986:	6560      	str	r0, [r4, #84]	; 0x54
 8008988:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800898a:	602f      	str	r7, [r5, #0]
 800898c:	2900      	cmp	r1, #0
 800898e:	d0ca      	beq.n	8008926 <__sflush_r+0x1a>
 8008990:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008994:	4299      	cmp	r1, r3
 8008996:	d002      	beq.n	800899e <__sflush_r+0x92>
 8008998:	4628      	mov	r0, r5
 800899a:	f000 f9d7 	bl	8008d4c <_free_r>
 800899e:	2000      	movs	r0, #0
 80089a0:	6360      	str	r0, [r4, #52]	; 0x34
 80089a2:	e7c1      	b.n	8008928 <__sflush_r+0x1c>
 80089a4:	6a21      	ldr	r1, [r4, #32]
 80089a6:	2301      	movs	r3, #1
 80089a8:	4628      	mov	r0, r5
 80089aa:	47b0      	blx	r6
 80089ac:	1c41      	adds	r1, r0, #1
 80089ae:	d1c7      	bne.n	8008940 <__sflush_r+0x34>
 80089b0:	682b      	ldr	r3, [r5, #0]
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d0c4      	beq.n	8008940 <__sflush_r+0x34>
 80089b6:	2b1d      	cmp	r3, #29
 80089b8:	d001      	beq.n	80089be <__sflush_r+0xb2>
 80089ba:	2b16      	cmp	r3, #22
 80089bc:	d101      	bne.n	80089c2 <__sflush_r+0xb6>
 80089be:	602f      	str	r7, [r5, #0]
 80089c0:	e7b1      	b.n	8008926 <__sflush_r+0x1a>
 80089c2:	89a3      	ldrh	r3, [r4, #12]
 80089c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80089c8:	81a3      	strh	r3, [r4, #12]
 80089ca:	e7ad      	b.n	8008928 <__sflush_r+0x1c>
 80089cc:	690f      	ldr	r7, [r1, #16]
 80089ce:	2f00      	cmp	r7, #0
 80089d0:	d0a9      	beq.n	8008926 <__sflush_r+0x1a>
 80089d2:	0793      	lsls	r3, r2, #30
 80089d4:	680e      	ldr	r6, [r1, #0]
 80089d6:	bf08      	it	eq
 80089d8:	694b      	ldreq	r3, [r1, #20]
 80089da:	600f      	str	r7, [r1, #0]
 80089dc:	bf18      	it	ne
 80089de:	2300      	movne	r3, #0
 80089e0:	eba6 0807 	sub.w	r8, r6, r7
 80089e4:	608b      	str	r3, [r1, #8]
 80089e6:	f1b8 0f00 	cmp.w	r8, #0
 80089ea:	dd9c      	ble.n	8008926 <__sflush_r+0x1a>
 80089ec:	6a21      	ldr	r1, [r4, #32]
 80089ee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80089f0:	4643      	mov	r3, r8
 80089f2:	463a      	mov	r2, r7
 80089f4:	4628      	mov	r0, r5
 80089f6:	47b0      	blx	r6
 80089f8:	2800      	cmp	r0, #0
 80089fa:	dc06      	bgt.n	8008a0a <__sflush_r+0xfe>
 80089fc:	89a3      	ldrh	r3, [r4, #12]
 80089fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008a02:	81a3      	strh	r3, [r4, #12]
 8008a04:	f04f 30ff 	mov.w	r0, #4294967295
 8008a08:	e78e      	b.n	8008928 <__sflush_r+0x1c>
 8008a0a:	4407      	add	r7, r0
 8008a0c:	eba8 0800 	sub.w	r8, r8, r0
 8008a10:	e7e9      	b.n	80089e6 <__sflush_r+0xda>
 8008a12:	bf00      	nop
 8008a14:	20400001 	.word	0x20400001

08008a18 <_fflush_r>:
 8008a18:	b538      	push	{r3, r4, r5, lr}
 8008a1a:	690b      	ldr	r3, [r1, #16]
 8008a1c:	4605      	mov	r5, r0
 8008a1e:	460c      	mov	r4, r1
 8008a20:	b913      	cbnz	r3, 8008a28 <_fflush_r+0x10>
 8008a22:	2500      	movs	r5, #0
 8008a24:	4628      	mov	r0, r5
 8008a26:	bd38      	pop	{r3, r4, r5, pc}
 8008a28:	b118      	cbz	r0, 8008a32 <_fflush_r+0x1a>
 8008a2a:	6983      	ldr	r3, [r0, #24]
 8008a2c:	b90b      	cbnz	r3, 8008a32 <_fflush_r+0x1a>
 8008a2e:	f000 f887 	bl	8008b40 <__sinit>
 8008a32:	4b14      	ldr	r3, [pc, #80]	; (8008a84 <_fflush_r+0x6c>)
 8008a34:	429c      	cmp	r4, r3
 8008a36:	d11b      	bne.n	8008a70 <_fflush_r+0x58>
 8008a38:	686c      	ldr	r4, [r5, #4]
 8008a3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d0ef      	beq.n	8008a22 <_fflush_r+0xa>
 8008a42:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008a44:	07d0      	lsls	r0, r2, #31
 8008a46:	d404      	bmi.n	8008a52 <_fflush_r+0x3a>
 8008a48:	0599      	lsls	r1, r3, #22
 8008a4a:	d402      	bmi.n	8008a52 <_fflush_r+0x3a>
 8008a4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008a4e:	f000 f915 	bl	8008c7c <__retarget_lock_acquire_recursive>
 8008a52:	4628      	mov	r0, r5
 8008a54:	4621      	mov	r1, r4
 8008a56:	f7ff ff59 	bl	800890c <__sflush_r>
 8008a5a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008a5c:	07da      	lsls	r2, r3, #31
 8008a5e:	4605      	mov	r5, r0
 8008a60:	d4e0      	bmi.n	8008a24 <_fflush_r+0xc>
 8008a62:	89a3      	ldrh	r3, [r4, #12]
 8008a64:	059b      	lsls	r3, r3, #22
 8008a66:	d4dd      	bmi.n	8008a24 <_fflush_r+0xc>
 8008a68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008a6a:	f000 f908 	bl	8008c7e <__retarget_lock_release_recursive>
 8008a6e:	e7d9      	b.n	8008a24 <_fflush_r+0xc>
 8008a70:	4b05      	ldr	r3, [pc, #20]	; (8008a88 <_fflush_r+0x70>)
 8008a72:	429c      	cmp	r4, r3
 8008a74:	d101      	bne.n	8008a7a <_fflush_r+0x62>
 8008a76:	68ac      	ldr	r4, [r5, #8]
 8008a78:	e7df      	b.n	8008a3a <_fflush_r+0x22>
 8008a7a:	4b04      	ldr	r3, [pc, #16]	; (8008a8c <_fflush_r+0x74>)
 8008a7c:	429c      	cmp	r4, r3
 8008a7e:	bf08      	it	eq
 8008a80:	68ec      	ldreq	r4, [r5, #12]
 8008a82:	e7da      	b.n	8008a3a <_fflush_r+0x22>
 8008a84:	0801c750 	.word	0x0801c750
 8008a88:	0801c770 	.word	0x0801c770
 8008a8c:	0801c730 	.word	0x0801c730

08008a90 <std>:
 8008a90:	2300      	movs	r3, #0
 8008a92:	b510      	push	{r4, lr}
 8008a94:	4604      	mov	r4, r0
 8008a96:	e9c0 3300 	strd	r3, r3, [r0]
 8008a9a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008a9e:	6083      	str	r3, [r0, #8]
 8008aa0:	8181      	strh	r1, [r0, #12]
 8008aa2:	6643      	str	r3, [r0, #100]	; 0x64
 8008aa4:	81c2      	strh	r2, [r0, #14]
 8008aa6:	6183      	str	r3, [r0, #24]
 8008aa8:	4619      	mov	r1, r3
 8008aaa:	2208      	movs	r2, #8
 8008aac:	305c      	adds	r0, #92	; 0x5c
 8008aae:	f7ff fdd7 	bl	8008660 <memset>
 8008ab2:	4b05      	ldr	r3, [pc, #20]	; (8008ac8 <std+0x38>)
 8008ab4:	6263      	str	r3, [r4, #36]	; 0x24
 8008ab6:	4b05      	ldr	r3, [pc, #20]	; (8008acc <std+0x3c>)
 8008ab8:	62a3      	str	r3, [r4, #40]	; 0x28
 8008aba:	4b05      	ldr	r3, [pc, #20]	; (8008ad0 <std+0x40>)
 8008abc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008abe:	4b05      	ldr	r3, [pc, #20]	; (8008ad4 <std+0x44>)
 8008ac0:	6224      	str	r4, [r4, #32]
 8008ac2:	6323      	str	r3, [r4, #48]	; 0x30
 8008ac4:	bd10      	pop	{r4, pc}
 8008ac6:	bf00      	nop
 8008ac8:	08009509 	.word	0x08009509
 8008acc:	0800952b 	.word	0x0800952b
 8008ad0:	08009563 	.word	0x08009563
 8008ad4:	08009587 	.word	0x08009587

08008ad8 <_cleanup_r>:
 8008ad8:	4901      	ldr	r1, [pc, #4]	; (8008ae0 <_cleanup_r+0x8>)
 8008ada:	f000 b8af 	b.w	8008c3c <_fwalk_reent>
 8008ade:	bf00      	nop
 8008ae0:	08008a19 	.word	0x08008a19

08008ae4 <__sfmoreglue>:
 8008ae4:	b570      	push	{r4, r5, r6, lr}
 8008ae6:	2268      	movs	r2, #104	; 0x68
 8008ae8:	1e4d      	subs	r5, r1, #1
 8008aea:	4355      	muls	r5, r2
 8008aec:	460e      	mov	r6, r1
 8008aee:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008af2:	f000 f997 	bl	8008e24 <_malloc_r>
 8008af6:	4604      	mov	r4, r0
 8008af8:	b140      	cbz	r0, 8008b0c <__sfmoreglue+0x28>
 8008afa:	2100      	movs	r1, #0
 8008afc:	e9c0 1600 	strd	r1, r6, [r0]
 8008b00:	300c      	adds	r0, #12
 8008b02:	60a0      	str	r0, [r4, #8]
 8008b04:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008b08:	f7ff fdaa 	bl	8008660 <memset>
 8008b0c:	4620      	mov	r0, r4
 8008b0e:	bd70      	pop	{r4, r5, r6, pc}

08008b10 <__sfp_lock_acquire>:
 8008b10:	4801      	ldr	r0, [pc, #4]	; (8008b18 <__sfp_lock_acquire+0x8>)
 8008b12:	f000 b8b3 	b.w	8008c7c <__retarget_lock_acquire_recursive>
 8008b16:	bf00      	nop
 8008b18:	20000895 	.word	0x20000895

08008b1c <__sfp_lock_release>:
 8008b1c:	4801      	ldr	r0, [pc, #4]	; (8008b24 <__sfp_lock_release+0x8>)
 8008b1e:	f000 b8ae 	b.w	8008c7e <__retarget_lock_release_recursive>
 8008b22:	bf00      	nop
 8008b24:	20000895 	.word	0x20000895

08008b28 <__sinit_lock_acquire>:
 8008b28:	4801      	ldr	r0, [pc, #4]	; (8008b30 <__sinit_lock_acquire+0x8>)
 8008b2a:	f000 b8a7 	b.w	8008c7c <__retarget_lock_acquire_recursive>
 8008b2e:	bf00      	nop
 8008b30:	20000896 	.word	0x20000896

08008b34 <__sinit_lock_release>:
 8008b34:	4801      	ldr	r0, [pc, #4]	; (8008b3c <__sinit_lock_release+0x8>)
 8008b36:	f000 b8a2 	b.w	8008c7e <__retarget_lock_release_recursive>
 8008b3a:	bf00      	nop
 8008b3c:	20000896 	.word	0x20000896

08008b40 <__sinit>:
 8008b40:	b510      	push	{r4, lr}
 8008b42:	4604      	mov	r4, r0
 8008b44:	f7ff fff0 	bl	8008b28 <__sinit_lock_acquire>
 8008b48:	69a3      	ldr	r3, [r4, #24]
 8008b4a:	b11b      	cbz	r3, 8008b54 <__sinit+0x14>
 8008b4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008b50:	f7ff bff0 	b.w	8008b34 <__sinit_lock_release>
 8008b54:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008b58:	6523      	str	r3, [r4, #80]	; 0x50
 8008b5a:	4b13      	ldr	r3, [pc, #76]	; (8008ba8 <__sinit+0x68>)
 8008b5c:	4a13      	ldr	r2, [pc, #76]	; (8008bac <__sinit+0x6c>)
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	62a2      	str	r2, [r4, #40]	; 0x28
 8008b62:	42a3      	cmp	r3, r4
 8008b64:	bf04      	itt	eq
 8008b66:	2301      	moveq	r3, #1
 8008b68:	61a3      	streq	r3, [r4, #24]
 8008b6a:	4620      	mov	r0, r4
 8008b6c:	f000 f820 	bl	8008bb0 <__sfp>
 8008b70:	6060      	str	r0, [r4, #4]
 8008b72:	4620      	mov	r0, r4
 8008b74:	f000 f81c 	bl	8008bb0 <__sfp>
 8008b78:	60a0      	str	r0, [r4, #8]
 8008b7a:	4620      	mov	r0, r4
 8008b7c:	f000 f818 	bl	8008bb0 <__sfp>
 8008b80:	2200      	movs	r2, #0
 8008b82:	60e0      	str	r0, [r4, #12]
 8008b84:	2104      	movs	r1, #4
 8008b86:	6860      	ldr	r0, [r4, #4]
 8008b88:	f7ff ff82 	bl	8008a90 <std>
 8008b8c:	68a0      	ldr	r0, [r4, #8]
 8008b8e:	2201      	movs	r2, #1
 8008b90:	2109      	movs	r1, #9
 8008b92:	f7ff ff7d 	bl	8008a90 <std>
 8008b96:	68e0      	ldr	r0, [r4, #12]
 8008b98:	2202      	movs	r2, #2
 8008b9a:	2112      	movs	r1, #18
 8008b9c:	f7ff ff78 	bl	8008a90 <std>
 8008ba0:	2301      	movs	r3, #1
 8008ba2:	61a3      	str	r3, [r4, #24]
 8008ba4:	e7d2      	b.n	8008b4c <__sinit+0xc>
 8008ba6:	bf00      	nop
 8008ba8:	0801c72c 	.word	0x0801c72c
 8008bac:	08008ad9 	.word	0x08008ad9

08008bb0 <__sfp>:
 8008bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bb2:	4607      	mov	r7, r0
 8008bb4:	f7ff ffac 	bl	8008b10 <__sfp_lock_acquire>
 8008bb8:	4b1e      	ldr	r3, [pc, #120]	; (8008c34 <__sfp+0x84>)
 8008bba:	681e      	ldr	r6, [r3, #0]
 8008bbc:	69b3      	ldr	r3, [r6, #24]
 8008bbe:	b913      	cbnz	r3, 8008bc6 <__sfp+0x16>
 8008bc0:	4630      	mov	r0, r6
 8008bc2:	f7ff ffbd 	bl	8008b40 <__sinit>
 8008bc6:	3648      	adds	r6, #72	; 0x48
 8008bc8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008bcc:	3b01      	subs	r3, #1
 8008bce:	d503      	bpl.n	8008bd8 <__sfp+0x28>
 8008bd0:	6833      	ldr	r3, [r6, #0]
 8008bd2:	b30b      	cbz	r3, 8008c18 <__sfp+0x68>
 8008bd4:	6836      	ldr	r6, [r6, #0]
 8008bd6:	e7f7      	b.n	8008bc8 <__sfp+0x18>
 8008bd8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008bdc:	b9d5      	cbnz	r5, 8008c14 <__sfp+0x64>
 8008bde:	4b16      	ldr	r3, [pc, #88]	; (8008c38 <__sfp+0x88>)
 8008be0:	60e3      	str	r3, [r4, #12]
 8008be2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008be6:	6665      	str	r5, [r4, #100]	; 0x64
 8008be8:	f000 f847 	bl	8008c7a <__retarget_lock_init_recursive>
 8008bec:	f7ff ff96 	bl	8008b1c <__sfp_lock_release>
 8008bf0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008bf4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008bf8:	6025      	str	r5, [r4, #0]
 8008bfa:	61a5      	str	r5, [r4, #24]
 8008bfc:	2208      	movs	r2, #8
 8008bfe:	4629      	mov	r1, r5
 8008c00:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008c04:	f7ff fd2c 	bl	8008660 <memset>
 8008c08:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008c0c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008c10:	4620      	mov	r0, r4
 8008c12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008c14:	3468      	adds	r4, #104	; 0x68
 8008c16:	e7d9      	b.n	8008bcc <__sfp+0x1c>
 8008c18:	2104      	movs	r1, #4
 8008c1a:	4638      	mov	r0, r7
 8008c1c:	f7ff ff62 	bl	8008ae4 <__sfmoreglue>
 8008c20:	4604      	mov	r4, r0
 8008c22:	6030      	str	r0, [r6, #0]
 8008c24:	2800      	cmp	r0, #0
 8008c26:	d1d5      	bne.n	8008bd4 <__sfp+0x24>
 8008c28:	f7ff ff78 	bl	8008b1c <__sfp_lock_release>
 8008c2c:	230c      	movs	r3, #12
 8008c2e:	603b      	str	r3, [r7, #0]
 8008c30:	e7ee      	b.n	8008c10 <__sfp+0x60>
 8008c32:	bf00      	nop
 8008c34:	0801c72c 	.word	0x0801c72c
 8008c38:	ffff0001 	.word	0xffff0001

08008c3c <_fwalk_reent>:
 8008c3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008c40:	4606      	mov	r6, r0
 8008c42:	4688      	mov	r8, r1
 8008c44:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008c48:	2700      	movs	r7, #0
 8008c4a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008c4e:	f1b9 0901 	subs.w	r9, r9, #1
 8008c52:	d505      	bpl.n	8008c60 <_fwalk_reent+0x24>
 8008c54:	6824      	ldr	r4, [r4, #0]
 8008c56:	2c00      	cmp	r4, #0
 8008c58:	d1f7      	bne.n	8008c4a <_fwalk_reent+0xe>
 8008c5a:	4638      	mov	r0, r7
 8008c5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008c60:	89ab      	ldrh	r3, [r5, #12]
 8008c62:	2b01      	cmp	r3, #1
 8008c64:	d907      	bls.n	8008c76 <_fwalk_reent+0x3a>
 8008c66:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008c6a:	3301      	adds	r3, #1
 8008c6c:	d003      	beq.n	8008c76 <_fwalk_reent+0x3a>
 8008c6e:	4629      	mov	r1, r5
 8008c70:	4630      	mov	r0, r6
 8008c72:	47c0      	blx	r8
 8008c74:	4307      	orrs	r7, r0
 8008c76:	3568      	adds	r5, #104	; 0x68
 8008c78:	e7e9      	b.n	8008c4e <_fwalk_reent+0x12>

08008c7a <__retarget_lock_init_recursive>:
 8008c7a:	4770      	bx	lr

08008c7c <__retarget_lock_acquire_recursive>:
 8008c7c:	4770      	bx	lr

08008c7e <__retarget_lock_release_recursive>:
 8008c7e:	4770      	bx	lr

08008c80 <__swhatbuf_r>:
 8008c80:	b570      	push	{r4, r5, r6, lr}
 8008c82:	460e      	mov	r6, r1
 8008c84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c88:	2900      	cmp	r1, #0
 8008c8a:	b096      	sub	sp, #88	; 0x58
 8008c8c:	4614      	mov	r4, r2
 8008c8e:	461d      	mov	r5, r3
 8008c90:	da08      	bge.n	8008ca4 <__swhatbuf_r+0x24>
 8008c92:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008c96:	2200      	movs	r2, #0
 8008c98:	602a      	str	r2, [r5, #0]
 8008c9a:	061a      	lsls	r2, r3, #24
 8008c9c:	d410      	bmi.n	8008cc0 <__swhatbuf_r+0x40>
 8008c9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008ca2:	e00e      	b.n	8008cc2 <__swhatbuf_r+0x42>
 8008ca4:	466a      	mov	r2, sp
 8008ca6:	f000 fc95 	bl	80095d4 <_fstat_r>
 8008caa:	2800      	cmp	r0, #0
 8008cac:	dbf1      	blt.n	8008c92 <__swhatbuf_r+0x12>
 8008cae:	9a01      	ldr	r2, [sp, #4]
 8008cb0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008cb4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008cb8:	425a      	negs	r2, r3
 8008cba:	415a      	adcs	r2, r3
 8008cbc:	602a      	str	r2, [r5, #0]
 8008cbe:	e7ee      	b.n	8008c9e <__swhatbuf_r+0x1e>
 8008cc0:	2340      	movs	r3, #64	; 0x40
 8008cc2:	2000      	movs	r0, #0
 8008cc4:	6023      	str	r3, [r4, #0]
 8008cc6:	b016      	add	sp, #88	; 0x58
 8008cc8:	bd70      	pop	{r4, r5, r6, pc}
	...

08008ccc <__smakebuf_r>:
 8008ccc:	898b      	ldrh	r3, [r1, #12]
 8008cce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008cd0:	079d      	lsls	r5, r3, #30
 8008cd2:	4606      	mov	r6, r0
 8008cd4:	460c      	mov	r4, r1
 8008cd6:	d507      	bpl.n	8008ce8 <__smakebuf_r+0x1c>
 8008cd8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008cdc:	6023      	str	r3, [r4, #0]
 8008cde:	6123      	str	r3, [r4, #16]
 8008ce0:	2301      	movs	r3, #1
 8008ce2:	6163      	str	r3, [r4, #20]
 8008ce4:	b002      	add	sp, #8
 8008ce6:	bd70      	pop	{r4, r5, r6, pc}
 8008ce8:	ab01      	add	r3, sp, #4
 8008cea:	466a      	mov	r2, sp
 8008cec:	f7ff ffc8 	bl	8008c80 <__swhatbuf_r>
 8008cf0:	9900      	ldr	r1, [sp, #0]
 8008cf2:	4605      	mov	r5, r0
 8008cf4:	4630      	mov	r0, r6
 8008cf6:	f000 f895 	bl	8008e24 <_malloc_r>
 8008cfa:	b948      	cbnz	r0, 8008d10 <__smakebuf_r+0x44>
 8008cfc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d00:	059a      	lsls	r2, r3, #22
 8008d02:	d4ef      	bmi.n	8008ce4 <__smakebuf_r+0x18>
 8008d04:	f023 0303 	bic.w	r3, r3, #3
 8008d08:	f043 0302 	orr.w	r3, r3, #2
 8008d0c:	81a3      	strh	r3, [r4, #12]
 8008d0e:	e7e3      	b.n	8008cd8 <__smakebuf_r+0xc>
 8008d10:	4b0d      	ldr	r3, [pc, #52]	; (8008d48 <__smakebuf_r+0x7c>)
 8008d12:	62b3      	str	r3, [r6, #40]	; 0x28
 8008d14:	89a3      	ldrh	r3, [r4, #12]
 8008d16:	6020      	str	r0, [r4, #0]
 8008d18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d1c:	81a3      	strh	r3, [r4, #12]
 8008d1e:	9b00      	ldr	r3, [sp, #0]
 8008d20:	6163      	str	r3, [r4, #20]
 8008d22:	9b01      	ldr	r3, [sp, #4]
 8008d24:	6120      	str	r0, [r4, #16]
 8008d26:	b15b      	cbz	r3, 8008d40 <__smakebuf_r+0x74>
 8008d28:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008d2c:	4630      	mov	r0, r6
 8008d2e:	f000 fc63 	bl	80095f8 <_isatty_r>
 8008d32:	b128      	cbz	r0, 8008d40 <__smakebuf_r+0x74>
 8008d34:	89a3      	ldrh	r3, [r4, #12]
 8008d36:	f023 0303 	bic.w	r3, r3, #3
 8008d3a:	f043 0301 	orr.w	r3, r3, #1
 8008d3e:	81a3      	strh	r3, [r4, #12]
 8008d40:	89a0      	ldrh	r0, [r4, #12]
 8008d42:	4305      	orrs	r5, r0
 8008d44:	81a5      	strh	r5, [r4, #12]
 8008d46:	e7cd      	b.n	8008ce4 <__smakebuf_r+0x18>
 8008d48:	08008ad9 	.word	0x08008ad9

08008d4c <_free_r>:
 8008d4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008d4e:	2900      	cmp	r1, #0
 8008d50:	d044      	beq.n	8008ddc <_free_r+0x90>
 8008d52:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008d56:	9001      	str	r0, [sp, #4]
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	f1a1 0404 	sub.w	r4, r1, #4
 8008d5e:	bfb8      	it	lt
 8008d60:	18e4      	addlt	r4, r4, r3
 8008d62:	f000 fc6b 	bl	800963c <__malloc_lock>
 8008d66:	4a1e      	ldr	r2, [pc, #120]	; (8008de0 <_free_r+0x94>)
 8008d68:	9801      	ldr	r0, [sp, #4]
 8008d6a:	6813      	ldr	r3, [r2, #0]
 8008d6c:	b933      	cbnz	r3, 8008d7c <_free_r+0x30>
 8008d6e:	6063      	str	r3, [r4, #4]
 8008d70:	6014      	str	r4, [r2, #0]
 8008d72:	b003      	add	sp, #12
 8008d74:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008d78:	f000 bc66 	b.w	8009648 <__malloc_unlock>
 8008d7c:	42a3      	cmp	r3, r4
 8008d7e:	d908      	bls.n	8008d92 <_free_r+0x46>
 8008d80:	6825      	ldr	r5, [r4, #0]
 8008d82:	1961      	adds	r1, r4, r5
 8008d84:	428b      	cmp	r3, r1
 8008d86:	bf01      	itttt	eq
 8008d88:	6819      	ldreq	r1, [r3, #0]
 8008d8a:	685b      	ldreq	r3, [r3, #4]
 8008d8c:	1949      	addeq	r1, r1, r5
 8008d8e:	6021      	streq	r1, [r4, #0]
 8008d90:	e7ed      	b.n	8008d6e <_free_r+0x22>
 8008d92:	461a      	mov	r2, r3
 8008d94:	685b      	ldr	r3, [r3, #4]
 8008d96:	b10b      	cbz	r3, 8008d9c <_free_r+0x50>
 8008d98:	42a3      	cmp	r3, r4
 8008d9a:	d9fa      	bls.n	8008d92 <_free_r+0x46>
 8008d9c:	6811      	ldr	r1, [r2, #0]
 8008d9e:	1855      	adds	r5, r2, r1
 8008da0:	42a5      	cmp	r5, r4
 8008da2:	d10b      	bne.n	8008dbc <_free_r+0x70>
 8008da4:	6824      	ldr	r4, [r4, #0]
 8008da6:	4421      	add	r1, r4
 8008da8:	1854      	adds	r4, r2, r1
 8008daa:	42a3      	cmp	r3, r4
 8008dac:	6011      	str	r1, [r2, #0]
 8008dae:	d1e0      	bne.n	8008d72 <_free_r+0x26>
 8008db0:	681c      	ldr	r4, [r3, #0]
 8008db2:	685b      	ldr	r3, [r3, #4]
 8008db4:	6053      	str	r3, [r2, #4]
 8008db6:	4421      	add	r1, r4
 8008db8:	6011      	str	r1, [r2, #0]
 8008dba:	e7da      	b.n	8008d72 <_free_r+0x26>
 8008dbc:	d902      	bls.n	8008dc4 <_free_r+0x78>
 8008dbe:	230c      	movs	r3, #12
 8008dc0:	6003      	str	r3, [r0, #0]
 8008dc2:	e7d6      	b.n	8008d72 <_free_r+0x26>
 8008dc4:	6825      	ldr	r5, [r4, #0]
 8008dc6:	1961      	adds	r1, r4, r5
 8008dc8:	428b      	cmp	r3, r1
 8008dca:	bf04      	itt	eq
 8008dcc:	6819      	ldreq	r1, [r3, #0]
 8008dce:	685b      	ldreq	r3, [r3, #4]
 8008dd0:	6063      	str	r3, [r4, #4]
 8008dd2:	bf04      	itt	eq
 8008dd4:	1949      	addeq	r1, r1, r5
 8008dd6:	6021      	streq	r1, [r4, #0]
 8008dd8:	6054      	str	r4, [r2, #4]
 8008dda:	e7ca      	b.n	8008d72 <_free_r+0x26>
 8008ddc:	b003      	add	sp, #12
 8008dde:	bd30      	pop	{r4, r5, pc}
 8008de0:	20000898 	.word	0x20000898

08008de4 <sbrk_aligned>:
 8008de4:	b570      	push	{r4, r5, r6, lr}
 8008de6:	4e0e      	ldr	r6, [pc, #56]	; (8008e20 <sbrk_aligned+0x3c>)
 8008de8:	460c      	mov	r4, r1
 8008dea:	6831      	ldr	r1, [r6, #0]
 8008dec:	4605      	mov	r5, r0
 8008dee:	b911      	cbnz	r1, 8008df6 <sbrk_aligned+0x12>
 8008df0:	f000 fb7a 	bl	80094e8 <_sbrk_r>
 8008df4:	6030      	str	r0, [r6, #0]
 8008df6:	4621      	mov	r1, r4
 8008df8:	4628      	mov	r0, r5
 8008dfa:	f000 fb75 	bl	80094e8 <_sbrk_r>
 8008dfe:	1c43      	adds	r3, r0, #1
 8008e00:	d00a      	beq.n	8008e18 <sbrk_aligned+0x34>
 8008e02:	1cc4      	adds	r4, r0, #3
 8008e04:	f024 0403 	bic.w	r4, r4, #3
 8008e08:	42a0      	cmp	r0, r4
 8008e0a:	d007      	beq.n	8008e1c <sbrk_aligned+0x38>
 8008e0c:	1a21      	subs	r1, r4, r0
 8008e0e:	4628      	mov	r0, r5
 8008e10:	f000 fb6a 	bl	80094e8 <_sbrk_r>
 8008e14:	3001      	adds	r0, #1
 8008e16:	d101      	bne.n	8008e1c <sbrk_aligned+0x38>
 8008e18:	f04f 34ff 	mov.w	r4, #4294967295
 8008e1c:	4620      	mov	r0, r4
 8008e1e:	bd70      	pop	{r4, r5, r6, pc}
 8008e20:	2000089c 	.word	0x2000089c

08008e24 <_malloc_r>:
 8008e24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e28:	1ccd      	adds	r5, r1, #3
 8008e2a:	f025 0503 	bic.w	r5, r5, #3
 8008e2e:	3508      	adds	r5, #8
 8008e30:	2d0c      	cmp	r5, #12
 8008e32:	bf38      	it	cc
 8008e34:	250c      	movcc	r5, #12
 8008e36:	2d00      	cmp	r5, #0
 8008e38:	4607      	mov	r7, r0
 8008e3a:	db01      	blt.n	8008e40 <_malloc_r+0x1c>
 8008e3c:	42a9      	cmp	r1, r5
 8008e3e:	d905      	bls.n	8008e4c <_malloc_r+0x28>
 8008e40:	230c      	movs	r3, #12
 8008e42:	603b      	str	r3, [r7, #0]
 8008e44:	2600      	movs	r6, #0
 8008e46:	4630      	mov	r0, r6
 8008e48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e4c:	4e2e      	ldr	r6, [pc, #184]	; (8008f08 <_malloc_r+0xe4>)
 8008e4e:	f000 fbf5 	bl	800963c <__malloc_lock>
 8008e52:	6833      	ldr	r3, [r6, #0]
 8008e54:	461c      	mov	r4, r3
 8008e56:	bb34      	cbnz	r4, 8008ea6 <_malloc_r+0x82>
 8008e58:	4629      	mov	r1, r5
 8008e5a:	4638      	mov	r0, r7
 8008e5c:	f7ff ffc2 	bl	8008de4 <sbrk_aligned>
 8008e60:	1c43      	adds	r3, r0, #1
 8008e62:	4604      	mov	r4, r0
 8008e64:	d14d      	bne.n	8008f02 <_malloc_r+0xde>
 8008e66:	6834      	ldr	r4, [r6, #0]
 8008e68:	4626      	mov	r6, r4
 8008e6a:	2e00      	cmp	r6, #0
 8008e6c:	d140      	bne.n	8008ef0 <_malloc_r+0xcc>
 8008e6e:	6823      	ldr	r3, [r4, #0]
 8008e70:	4631      	mov	r1, r6
 8008e72:	4638      	mov	r0, r7
 8008e74:	eb04 0803 	add.w	r8, r4, r3
 8008e78:	f000 fb36 	bl	80094e8 <_sbrk_r>
 8008e7c:	4580      	cmp	r8, r0
 8008e7e:	d13a      	bne.n	8008ef6 <_malloc_r+0xd2>
 8008e80:	6821      	ldr	r1, [r4, #0]
 8008e82:	3503      	adds	r5, #3
 8008e84:	1a6d      	subs	r5, r5, r1
 8008e86:	f025 0503 	bic.w	r5, r5, #3
 8008e8a:	3508      	adds	r5, #8
 8008e8c:	2d0c      	cmp	r5, #12
 8008e8e:	bf38      	it	cc
 8008e90:	250c      	movcc	r5, #12
 8008e92:	4629      	mov	r1, r5
 8008e94:	4638      	mov	r0, r7
 8008e96:	f7ff ffa5 	bl	8008de4 <sbrk_aligned>
 8008e9a:	3001      	adds	r0, #1
 8008e9c:	d02b      	beq.n	8008ef6 <_malloc_r+0xd2>
 8008e9e:	6823      	ldr	r3, [r4, #0]
 8008ea0:	442b      	add	r3, r5
 8008ea2:	6023      	str	r3, [r4, #0]
 8008ea4:	e00e      	b.n	8008ec4 <_malloc_r+0xa0>
 8008ea6:	6822      	ldr	r2, [r4, #0]
 8008ea8:	1b52      	subs	r2, r2, r5
 8008eaa:	d41e      	bmi.n	8008eea <_malloc_r+0xc6>
 8008eac:	2a0b      	cmp	r2, #11
 8008eae:	d916      	bls.n	8008ede <_malloc_r+0xba>
 8008eb0:	1961      	adds	r1, r4, r5
 8008eb2:	42a3      	cmp	r3, r4
 8008eb4:	6025      	str	r5, [r4, #0]
 8008eb6:	bf18      	it	ne
 8008eb8:	6059      	strne	r1, [r3, #4]
 8008eba:	6863      	ldr	r3, [r4, #4]
 8008ebc:	bf08      	it	eq
 8008ebe:	6031      	streq	r1, [r6, #0]
 8008ec0:	5162      	str	r2, [r4, r5]
 8008ec2:	604b      	str	r3, [r1, #4]
 8008ec4:	4638      	mov	r0, r7
 8008ec6:	f104 060b 	add.w	r6, r4, #11
 8008eca:	f000 fbbd 	bl	8009648 <__malloc_unlock>
 8008ece:	f026 0607 	bic.w	r6, r6, #7
 8008ed2:	1d23      	adds	r3, r4, #4
 8008ed4:	1af2      	subs	r2, r6, r3
 8008ed6:	d0b6      	beq.n	8008e46 <_malloc_r+0x22>
 8008ed8:	1b9b      	subs	r3, r3, r6
 8008eda:	50a3      	str	r3, [r4, r2]
 8008edc:	e7b3      	b.n	8008e46 <_malloc_r+0x22>
 8008ede:	6862      	ldr	r2, [r4, #4]
 8008ee0:	42a3      	cmp	r3, r4
 8008ee2:	bf0c      	ite	eq
 8008ee4:	6032      	streq	r2, [r6, #0]
 8008ee6:	605a      	strne	r2, [r3, #4]
 8008ee8:	e7ec      	b.n	8008ec4 <_malloc_r+0xa0>
 8008eea:	4623      	mov	r3, r4
 8008eec:	6864      	ldr	r4, [r4, #4]
 8008eee:	e7b2      	b.n	8008e56 <_malloc_r+0x32>
 8008ef0:	4634      	mov	r4, r6
 8008ef2:	6876      	ldr	r6, [r6, #4]
 8008ef4:	e7b9      	b.n	8008e6a <_malloc_r+0x46>
 8008ef6:	230c      	movs	r3, #12
 8008ef8:	603b      	str	r3, [r7, #0]
 8008efa:	4638      	mov	r0, r7
 8008efc:	f000 fba4 	bl	8009648 <__malloc_unlock>
 8008f00:	e7a1      	b.n	8008e46 <_malloc_r+0x22>
 8008f02:	6025      	str	r5, [r4, #0]
 8008f04:	e7de      	b.n	8008ec4 <_malloc_r+0xa0>
 8008f06:	bf00      	nop
 8008f08:	20000898 	.word	0x20000898

08008f0c <__sfputc_r>:
 8008f0c:	6893      	ldr	r3, [r2, #8]
 8008f0e:	3b01      	subs	r3, #1
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	b410      	push	{r4}
 8008f14:	6093      	str	r3, [r2, #8]
 8008f16:	da08      	bge.n	8008f2a <__sfputc_r+0x1e>
 8008f18:	6994      	ldr	r4, [r2, #24]
 8008f1a:	42a3      	cmp	r3, r4
 8008f1c:	db01      	blt.n	8008f22 <__sfputc_r+0x16>
 8008f1e:	290a      	cmp	r1, #10
 8008f20:	d103      	bne.n	8008f2a <__sfputc_r+0x1e>
 8008f22:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008f26:	f7ff bc31 	b.w	800878c <__swbuf_r>
 8008f2a:	6813      	ldr	r3, [r2, #0]
 8008f2c:	1c58      	adds	r0, r3, #1
 8008f2e:	6010      	str	r0, [r2, #0]
 8008f30:	7019      	strb	r1, [r3, #0]
 8008f32:	4608      	mov	r0, r1
 8008f34:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008f38:	4770      	bx	lr

08008f3a <__sfputs_r>:
 8008f3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f3c:	4606      	mov	r6, r0
 8008f3e:	460f      	mov	r7, r1
 8008f40:	4614      	mov	r4, r2
 8008f42:	18d5      	adds	r5, r2, r3
 8008f44:	42ac      	cmp	r4, r5
 8008f46:	d101      	bne.n	8008f4c <__sfputs_r+0x12>
 8008f48:	2000      	movs	r0, #0
 8008f4a:	e007      	b.n	8008f5c <__sfputs_r+0x22>
 8008f4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f50:	463a      	mov	r2, r7
 8008f52:	4630      	mov	r0, r6
 8008f54:	f7ff ffda 	bl	8008f0c <__sfputc_r>
 8008f58:	1c43      	adds	r3, r0, #1
 8008f5a:	d1f3      	bne.n	8008f44 <__sfputs_r+0xa>
 8008f5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008f60 <_vfiprintf_r>:
 8008f60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f64:	460d      	mov	r5, r1
 8008f66:	b09d      	sub	sp, #116	; 0x74
 8008f68:	4614      	mov	r4, r2
 8008f6a:	4698      	mov	r8, r3
 8008f6c:	4606      	mov	r6, r0
 8008f6e:	b118      	cbz	r0, 8008f78 <_vfiprintf_r+0x18>
 8008f70:	6983      	ldr	r3, [r0, #24]
 8008f72:	b90b      	cbnz	r3, 8008f78 <_vfiprintf_r+0x18>
 8008f74:	f7ff fde4 	bl	8008b40 <__sinit>
 8008f78:	4b89      	ldr	r3, [pc, #548]	; (80091a0 <_vfiprintf_r+0x240>)
 8008f7a:	429d      	cmp	r5, r3
 8008f7c:	d11b      	bne.n	8008fb6 <_vfiprintf_r+0x56>
 8008f7e:	6875      	ldr	r5, [r6, #4]
 8008f80:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008f82:	07d9      	lsls	r1, r3, #31
 8008f84:	d405      	bmi.n	8008f92 <_vfiprintf_r+0x32>
 8008f86:	89ab      	ldrh	r3, [r5, #12]
 8008f88:	059a      	lsls	r2, r3, #22
 8008f8a:	d402      	bmi.n	8008f92 <_vfiprintf_r+0x32>
 8008f8c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008f8e:	f7ff fe75 	bl	8008c7c <__retarget_lock_acquire_recursive>
 8008f92:	89ab      	ldrh	r3, [r5, #12]
 8008f94:	071b      	lsls	r3, r3, #28
 8008f96:	d501      	bpl.n	8008f9c <_vfiprintf_r+0x3c>
 8008f98:	692b      	ldr	r3, [r5, #16]
 8008f9a:	b9eb      	cbnz	r3, 8008fd8 <_vfiprintf_r+0x78>
 8008f9c:	4629      	mov	r1, r5
 8008f9e:	4630      	mov	r0, r6
 8008fa0:	f7ff fc46 	bl	8008830 <__swsetup_r>
 8008fa4:	b1c0      	cbz	r0, 8008fd8 <_vfiprintf_r+0x78>
 8008fa6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008fa8:	07dc      	lsls	r4, r3, #31
 8008faa:	d50e      	bpl.n	8008fca <_vfiprintf_r+0x6a>
 8008fac:	f04f 30ff 	mov.w	r0, #4294967295
 8008fb0:	b01d      	add	sp, #116	; 0x74
 8008fb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fb6:	4b7b      	ldr	r3, [pc, #492]	; (80091a4 <_vfiprintf_r+0x244>)
 8008fb8:	429d      	cmp	r5, r3
 8008fba:	d101      	bne.n	8008fc0 <_vfiprintf_r+0x60>
 8008fbc:	68b5      	ldr	r5, [r6, #8]
 8008fbe:	e7df      	b.n	8008f80 <_vfiprintf_r+0x20>
 8008fc0:	4b79      	ldr	r3, [pc, #484]	; (80091a8 <_vfiprintf_r+0x248>)
 8008fc2:	429d      	cmp	r5, r3
 8008fc4:	bf08      	it	eq
 8008fc6:	68f5      	ldreq	r5, [r6, #12]
 8008fc8:	e7da      	b.n	8008f80 <_vfiprintf_r+0x20>
 8008fca:	89ab      	ldrh	r3, [r5, #12]
 8008fcc:	0598      	lsls	r0, r3, #22
 8008fce:	d4ed      	bmi.n	8008fac <_vfiprintf_r+0x4c>
 8008fd0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008fd2:	f7ff fe54 	bl	8008c7e <__retarget_lock_release_recursive>
 8008fd6:	e7e9      	b.n	8008fac <_vfiprintf_r+0x4c>
 8008fd8:	2300      	movs	r3, #0
 8008fda:	9309      	str	r3, [sp, #36]	; 0x24
 8008fdc:	2320      	movs	r3, #32
 8008fde:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008fe2:	f8cd 800c 	str.w	r8, [sp, #12]
 8008fe6:	2330      	movs	r3, #48	; 0x30
 8008fe8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80091ac <_vfiprintf_r+0x24c>
 8008fec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008ff0:	f04f 0901 	mov.w	r9, #1
 8008ff4:	4623      	mov	r3, r4
 8008ff6:	469a      	mov	sl, r3
 8008ff8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008ffc:	b10a      	cbz	r2, 8009002 <_vfiprintf_r+0xa2>
 8008ffe:	2a25      	cmp	r2, #37	; 0x25
 8009000:	d1f9      	bne.n	8008ff6 <_vfiprintf_r+0x96>
 8009002:	ebba 0b04 	subs.w	fp, sl, r4
 8009006:	d00b      	beq.n	8009020 <_vfiprintf_r+0xc0>
 8009008:	465b      	mov	r3, fp
 800900a:	4622      	mov	r2, r4
 800900c:	4629      	mov	r1, r5
 800900e:	4630      	mov	r0, r6
 8009010:	f7ff ff93 	bl	8008f3a <__sfputs_r>
 8009014:	3001      	adds	r0, #1
 8009016:	f000 80aa 	beq.w	800916e <_vfiprintf_r+0x20e>
 800901a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800901c:	445a      	add	r2, fp
 800901e:	9209      	str	r2, [sp, #36]	; 0x24
 8009020:	f89a 3000 	ldrb.w	r3, [sl]
 8009024:	2b00      	cmp	r3, #0
 8009026:	f000 80a2 	beq.w	800916e <_vfiprintf_r+0x20e>
 800902a:	2300      	movs	r3, #0
 800902c:	f04f 32ff 	mov.w	r2, #4294967295
 8009030:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009034:	f10a 0a01 	add.w	sl, sl, #1
 8009038:	9304      	str	r3, [sp, #16]
 800903a:	9307      	str	r3, [sp, #28]
 800903c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009040:	931a      	str	r3, [sp, #104]	; 0x68
 8009042:	4654      	mov	r4, sl
 8009044:	2205      	movs	r2, #5
 8009046:	f814 1b01 	ldrb.w	r1, [r4], #1
 800904a:	4858      	ldr	r0, [pc, #352]	; (80091ac <_vfiprintf_r+0x24c>)
 800904c:	f7f7 f8e0 	bl	8000210 <memchr>
 8009050:	9a04      	ldr	r2, [sp, #16]
 8009052:	b9d8      	cbnz	r0, 800908c <_vfiprintf_r+0x12c>
 8009054:	06d1      	lsls	r1, r2, #27
 8009056:	bf44      	itt	mi
 8009058:	2320      	movmi	r3, #32
 800905a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800905e:	0713      	lsls	r3, r2, #28
 8009060:	bf44      	itt	mi
 8009062:	232b      	movmi	r3, #43	; 0x2b
 8009064:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009068:	f89a 3000 	ldrb.w	r3, [sl]
 800906c:	2b2a      	cmp	r3, #42	; 0x2a
 800906e:	d015      	beq.n	800909c <_vfiprintf_r+0x13c>
 8009070:	9a07      	ldr	r2, [sp, #28]
 8009072:	4654      	mov	r4, sl
 8009074:	2000      	movs	r0, #0
 8009076:	f04f 0c0a 	mov.w	ip, #10
 800907a:	4621      	mov	r1, r4
 800907c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009080:	3b30      	subs	r3, #48	; 0x30
 8009082:	2b09      	cmp	r3, #9
 8009084:	d94e      	bls.n	8009124 <_vfiprintf_r+0x1c4>
 8009086:	b1b0      	cbz	r0, 80090b6 <_vfiprintf_r+0x156>
 8009088:	9207      	str	r2, [sp, #28]
 800908a:	e014      	b.n	80090b6 <_vfiprintf_r+0x156>
 800908c:	eba0 0308 	sub.w	r3, r0, r8
 8009090:	fa09 f303 	lsl.w	r3, r9, r3
 8009094:	4313      	orrs	r3, r2
 8009096:	9304      	str	r3, [sp, #16]
 8009098:	46a2      	mov	sl, r4
 800909a:	e7d2      	b.n	8009042 <_vfiprintf_r+0xe2>
 800909c:	9b03      	ldr	r3, [sp, #12]
 800909e:	1d19      	adds	r1, r3, #4
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	9103      	str	r1, [sp, #12]
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	bfbb      	ittet	lt
 80090a8:	425b      	neglt	r3, r3
 80090aa:	f042 0202 	orrlt.w	r2, r2, #2
 80090ae:	9307      	strge	r3, [sp, #28]
 80090b0:	9307      	strlt	r3, [sp, #28]
 80090b2:	bfb8      	it	lt
 80090b4:	9204      	strlt	r2, [sp, #16]
 80090b6:	7823      	ldrb	r3, [r4, #0]
 80090b8:	2b2e      	cmp	r3, #46	; 0x2e
 80090ba:	d10c      	bne.n	80090d6 <_vfiprintf_r+0x176>
 80090bc:	7863      	ldrb	r3, [r4, #1]
 80090be:	2b2a      	cmp	r3, #42	; 0x2a
 80090c0:	d135      	bne.n	800912e <_vfiprintf_r+0x1ce>
 80090c2:	9b03      	ldr	r3, [sp, #12]
 80090c4:	1d1a      	adds	r2, r3, #4
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	9203      	str	r2, [sp, #12]
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	bfb8      	it	lt
 80090ce:	f04f 33ff 	movlt.w	r3, #4294967295
 80090d2:	3402      	adds	r4, #2
 80090d4:	9305      	str	r3, [sp, #20]
 80090d6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80091bc <_vfiprintf_r+0x25c>
 80090da:	7821      	ldrb	r1, [r4, #0]
 80090dc:	2203      	movs	r2, #3
 80090de:	4650      	mov	r0, sl
 80090e0:	f7f7 f896 	bl	8000210 <memchr>
 80090e4:	b140      	cbz	r0, 80090f8 <_vfiprintf_r+0x198>
 80090e6:	2340      	movs	r3, #64	; 0x40
 80090e8:	eba0 000a 	sub.w	r0, r0, sl
 80090ec:	fa03 f000 	lsl.w	r0, r3, r0
 80090f0:	9b04      	ldr	r3, [sp, #16]
 80090f2:	4303      	orrs	r3, r0
 80090f4:	3401      	adds	r4, #1
 80090f6:	9304      	str	r3, [sp, #16]
 80090f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80090fc:	482c      	ldr	r0, [pc, #176]	; (80091b0 <_vfiprintf_r+0x250>)
 80090fe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009102:	2206      	movs	r2, #6
 8009104:	f7f7 f884 	bl	8000210 <memchr>
 8009108:	2800      	cmp	r0, #0
 800910a:	d03f      	beq.n	800918c <_vfiprintf_r+0x22c>
 800910c:	4b29      	ldr	r3, [pc, #164]	; (80091b4 <_vfiprintf_r+0x254>)
 800910e:	bb1b      	cbnz	r3, 8009158 <_vfiprintf_r+0x1f8>
 8009110:	9b03      	ldr	r3, [sp, #12]
 8009112:	3307      	adds	r3, #7
 8009114:	f023 0307 	bic.w	r3, r3, #7
 8009118:	3308      	adds	r3, #8
 800911a:	9303      	str	r3, [sp, #12]
 800911c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800911e:	443b      	add	r3, r7
 8009120:	9309      	str	r3, [sp, #36]	; 0x24
 8009122:	e767      	b.n	8008ff4 <_vfiprintf_r+0x94>
 8009124:	fb0c 3202 	mla	r2, ip, r2, r3
 8009128:	460c      	mov	r4, r1
 800912a:	2001      	movs	r0, #1
 800912c:	e7a5      	b.n	800907a <_vfiprintf_r+0x11a>
 800912e:	2300      	movs	r3, #0
 8009130:	3401      	adds	r4, #1
 8009132:	9305      	str	r3, [sp, #20]
 8009134:	4619      	mov	r1, r3
 8009136:	f04f 0c0a 	mov.w	ip, #10
 800913a:	4620      	mov	r0, r4
 800913c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009140:	3a30      	subs	r2, #48	; 0x30
 8009142:	2a09      	cmp	r2, #9
 8009144:	d903      	bls.n	800914e <_vfiprintf_r+0x1ee>
 8009146:	2b00      	cmp	r3, #0
 8009148:	d0c5      	beq.n	80090d6 <_vfiprintf_r+0x176>
 800914a:	9105      	str	r1, [sp, #20]
 800914c:	e7c3      	b.n	80090d6 <_vfiprintf_r+0x176>
 800914e:	fb0c 2101 	mla	r1, ip, r1, r2
 8009152:	4604      	mov	r4, r0
 8009154:	2301      	movs	r3, #1
 8009156:	e7f0      	b.n	800913a <_vfiprintf_r+0x1da>
 8009158:	ab03      	add	r3, sp, #12
 800915a:	9300      	str	r3, [sp, #0]
 800915c:	462a      	mov	r2, r5
 800915e:	4b16      	ldr	r3, [pc, #88]	; (80091b8 <_vfiprintf_r+0x258>)
 8009160:	a904      	add	r1, sp, #16
 8009162:	4630      	mov	r0, r6
 8009164:	f3af 8000 	nop.w
 8009168:	4607      	mov	r7, r0
 800916a:	1c78      	adds	r0, r7, #1
 800916c:	d1d6      	bne.n	800911c <_vfiprintf_r+0x1bc>
 800916e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009170:	07d9      	lsls	r1, r3, #31
 8009172:	d405      	bmi.n	8009180 <_vfiprintf_r+0x220>
 8009174:	89ab      	ldrh	r3, [r5, #12]
 8009176:	059a      	lsls	r2, r3, #22
 8009178:	d402      	bmi.n	8009180 <_vfiprintf_r+0x220>
 800917a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800917c:	f7ff fd7f 	bl	8008c7e <__retarget_lock_release_recursive>
 8009180:	89ab      	ldrh	r3, [r5, #12]
 8009182:	065b      	lsls	r3, r3, #25
 8009184:	f53f af12 	bmi.w	8008fac <_vfiprintf_r+0x4c>
 8009188:	9809      	ldr	r0, [sp, #36]	; 0x24
 800918a:	e711      	b.n	8008fb0 <_vfiprintf_r+0x50>
 800918c:	ab03      	add	r3, sp, #12
 800918e:	9300      	str	r3, [sp, #0]
 8009190:	462a      	mov	r2, r5
 8009192:	4b09      	ldr	r3, [pc, #36]	; (80091b8 <_vfiprintf_r+0x258>)
 8009194:	a904      	add	r1, sp, #16
 8009196:	4630      	mov	r0, r6
 8009198:	f000 f880 	bl	800929c <_printf_i>
 800919c:	e7e4      	b.n	8009168 <_vfiprintf_r+0x208>
 800919e:	bf00      	nop
 80091a0:	0801c750 	.word	0x0801c750
 80091a4:	0801c770 	.word	0x0801c770
 80091a8:	0801c730 	.word	0x0801c730
 80091ac:	0801c790 	.word	0x0801c790
 80091b0:	0801c79a 	.word	0x0801c79a
 80091b4:	00000000 	.word	0x00000000
 80091b8:	08008f3b 	.word	0x08008f3b
 80091bc:	0801c796 	.word	0x0801c796

080091c0 <_printf_common>:
 80091c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80091c4:	4616      	mov	r6, r2
 80091c6:	4699      	mov	r9, r3
 80091c8:	688a      	ldr	r2, [r1, #8]
 80091ca:	690b      	ldr	r3, [r1, #16]
 80091cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80091d0:	4293      	cmp	r3, r2
 80091d2:	bfb8      	it	lt
 80091d4:	4613      	movlt	r3, r2
 80091d6:	6033      	str	r3, [r6, #0]
 80091d8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80091dc:	4607      	mov	r7, r0
 80091de:	460c      	mov	r4, r1
 80091e0:	b10a      	cbz	r2, 80091e6 <_printf_common+0x26>
 80091e2:	3301      	adds	r3, #1
 80091e4:	6033      	str	r3, [r6, #0]
 80091e6:	6823      	ldr	r3, [r4, #0]
 80091e8:	0699      	lsls	r1, r3, #26
 80091ea:	bf42      	ittt	mi
 80091ec:	6833      	ldrmi	r3, [r6, #0]
 80091ee:	3302      	addmi	r3, #2
 80091f0:	6033      	strmi	r3, [r6, #0]
 80091f2:	6825      	ldr	r5, [r4, #0]
 80091f4:	f015 0506 	ands.w	r5, r5, #6
 80091f8:	d106      	bne.n	8009208 <_printf_common+0x48>
 80091fa:	f104 0a19 	add.w	sl, r4, #25
 80091fe:	68e3      	ldr	r3, [r4, #12]
 8009200:	6832      	ldr	r2, [r6, #0]
 8009202:	1a9b      	subs	r3, r3, r2
 8009204:	42ab      	cmp	r3, r5
 8009206:	dc26      	bgt.n	8009256 <_printf_common+0x96>
 8009208:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800920c:	1e13      	subs	r3, r2, #0
 800920e:	6822      	ldr	r2, [r4, #0]
 8009210:	bf18      	it	ne
 8009212:	2301      	movne	r3, #1
 8009214:	0692      	lsls	r2, r2, #26
 8009216:	d42b      	bmi.n	8009270 <_printf_common+0xb0>
 8009218:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800921c:	4649      	mov	r1, r9
 800921e:	4638      	mov	r0, r7
 8009220:	47c0      	blx	r8
 8009222:	3001      	adds	r0, #1
 8009224:	d01e      	beq.n	8009264 <_printf_common+0xa4>
 8009226:	6823      	ldr	r3, [r4, #0]
 8009228:	68e5      	ldr	r5, [r4, #12]
 800922a:	6832      	ldr	r2, [r6, #0]
 800922c:	f003 0306 	and.w	r3, r3, #6
 8009230:	2b04      	cmp	r3, #4
 8009232:	bf08      	it	eq
 8009234:	1aad      	subeq	r5, r5, r2
 8009236:	68a3      	ldr	r3, [r4, #8]
 8009238:	6922      	ldr	r2, [r4, #16]
 800923a:	bf0c      	ite	eq
 800923c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009240:	2500      	movne	r5, #0
 8009242:	4293      	cmp	r3, r2
 8009244:	bfc4      	itt	gt
 8009246:	1a9b      	subgt	r3, r3, r2
 8009248:	18ed      	addgt	r5, r5, r3
 800924a:	2600      	movs	r6, #0
 800924c:	341a      	adds	r4, #26
 800924e:	42b5      	cmp	r5, r6
 8009250:	d11a      	bne.n	8009288 <_printf_common+0xc8>
 8009252:	2000      	movs	r0, #0
 8009254:	e008      	b.n	8009268 <_printf_common+0xa8>
 8009256:	2301      	movs	r3, #1
 8009258:	4652      	mov	r2, sl
 800925a:	4649      	mov	r1, r9
 800925c:	4638      	mov	r0, r7
 800925e:	47c0      	blx	r8
 8009260:	3001      	adds	r0, #1
 8009262:	d103      	bne.n	800926c <_printf_common+0xac>
 8009264:	f04f 30ff 	mov.w	r0, #4294967295
 8009268:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800926c:	3501      	adds	r5, #1
 800926e:	e7c6      	b.n	80091fe <_printf_common+0x3e>
 8009270:	18e1      	adds	r1, r4, r3
 8009272:	1c5a      	adds	r2, r3, #1
 8009274:	2030      	movs	r0, #48	; 0x30
 8009276:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800927a:	4422      	add	r2, r4
 800927c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009280:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009284:	3302      	adds	r3, #2
 8009286:	e7c7      	b.n	8009218 <_printf_common+0x58>
 8009288:	2301      	movs	r3, #1
 800928a:	4622      	mov	r2, r4
 800928c:	4649      	mov	r1, r9
 800928e:	4638      	mov	r0, r7
 8009290:	47c0      	blx	r8
 8009292:	3001      	adds	r0, #1
 8009294:	d0e6      	beq.n	8009264 <_printf_common+0xa4>
 8009296:	3601      	adds	r6, #1
 8009298:	e7d9      	b.n	800924e <_printf_common+0x8e>
	...

0800929c <_printf_i>:
 800929c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80092a0:	7e0f      	ldrb	r7, [r1, #24]
 80092a2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80092a4:	2f78      	cmp	r7, #120	; 0x78
 80092a6:	4691      	mov	r9, r2
 80092a8:	4680      	mov	r8, r0
 80092aa:	460c      	mov	r4, r1
 80092ac:	469a      	mov	sl, r3
 80092ae:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80092b2:	d807      	bhi.n	80092c4 <_printf_i+0x28>
 80092b4:	2f62      	cmp	r7, #98	; 0x62
 80092b6:	d80a      	bhi.n	80092ce <_printf_i+0x32>
 80092b8:	2f00      	cmp	r7, #0
 80092ba:	f000 80d8 	beq.w	800946e <_printf_i+0x1d2>
 80092be:	2f58      	cmp	r7, #88	; 0x58
 80092c0:	f000 80a3 	beq.w	800940a <_printf_i+0x16e>
 80092c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80092c8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80092cc:	e03a      	b.n	8009344 <_printf_i+0xa8>
 80092ce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80092d2:	2b15      	cmp	r3, #21
 80092d4:	d8f6      	bhi.n	80092c4 <_printf_i+0x28>
 80092d6:	a101      	add	r1, pc, #4	; (adr r1, 80092dc <_printf_i+0x40>)
 80092d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80092dc:	08009335 	.word	0x08009335
 80092e0:	08009349 	.word	0x08009349
 80092e4:	080092c5 	.word	0x080092c5
 80092e8:	080092c5 	.word	0x080092c5
 80092ec:	080092c5 	.word	0x080092c5
 80092f0:	080092c5 	.word	0x080092c5
 80092f4:	08009349 	.word	0x08009349
 80092f8:	080092c5 	.word	0x080092c5
 80092fc:	080092c5 	.word	0x080092c5
 8009300:	080092c5 	.word	0x080092c5
 8009304:	080092c5 	.word	0x080092c5
 8009308:	08009455 	.word	0x08009455
 800930c:	08009379 	.word	0x08009379
 8009310:	08009437 	.word	0x08009437
 8009314:	080092c5 	.word	0x080092c5
 8009318:	080092c5 	.word	0x080092c5
 800931c:	08009477 	.word	0x08009477
 8009320:	080092c5 	.word	0x080092c5
 8009324:	08009379 	.word	0x08009379
 8009328:	080092c5 	.word	0x080092c5
 800932c:	080092c5 	.word	0x080092c5
 8009330:	0800943f 	.word	0x0800943f
 8009334:	682b      	ldr	r3, [r5, #0]
 8009336:	1d1a      	adds	r2, r3, #4
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	602a      	str	r2, [r5, #0]
 800933c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009340:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009344:	2301      	movs	r3, #1
 8009346:	e0a3      	b.n	8009490 <_printf_i+0x1f4>
 8009348:	6820      	ldr	r0, [r4, #0]
 800934a:	6829      	ldr	r1, [r5, #0]
 800934c:	0606      	lsls	r6, r0, #24
 800934e:	f101 0304 	add.w	r3, r1, #4
 8009352:	d50a      	bpl.n	800936a <_printf_i+0xce>
 8009354:	680e      	ldr	r6, [r1, #0]
 8009356:	602b      	str	r3, [r5, #0]
 8009358:	2e00      	cmp	r6, #0
 800935a:	da03      	bge.n	8009364 <_printf_i+0xc8>
 800935c:	232d      	movs	r3, #45	; 0x2d
 800935e:	4276      	negs	r6, r6
 8009360:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009364:	485e      	ldr	r0, [pc, #376]	; (80094e0 <_printf_i+0x244>)
 8009366:	230a      	movs	r3, #10
 8009368:	e019      	b.n	800939e <_printf_i+0x102>
 800936a:	680e      	ldr	r6, [r1, #0]
 800936c:	602b      	str	r3, [r5, #0]
 800936e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009372:	bf18      	it	ne
 8009374:	b236      	sxthne	r6, r6
 8009376:	e7ef      	b.n	8009358 <_printf_i+0xbc>
 8009378:	682b      	ldr	r3, [r5, #0]
 800937a:	6820      	ldr	r0, [r4, #0]
 800937c:	1d19      	adds	r1, r3, #4
 800937e:	6029      	str	r1, [r5, #0]
 8009380:	0601      	lsls	r1, r0, #24
 8009382:	d501      	bpl.n	8009388 <_printf_i+0xec>
 8009384:	681e      	ldr	r6, [r3, #0]
 8009386:	e002      	b.n	800938e <_printf_i+0xf2>
 8009388:	0646      	lsls	r6, r0, #25
 800938a:	d5fb      	bpl.n	8009384 <_printf_i+0xe8>
 800938c:	881e      	ldrh	r6, [r3, #0]
 800938e:	4854      	ldr	r0, [pc, #336]	; (80094e0 <_printf_i+0x244>)
 8009390:	2f6f      	cmp	r7, #111	; 0x6f
 8009392:	bf0c      	ite	eq
 8009394:	2308      	moveq	r3, #8
 8009396:	230a      	movne	r3, #10
 8009398:	2100      	movs	r1, #0
 800939a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800939e:	6865      	ldr	r5, [r4, #4]
 80093a0:	60a5      	str	r5, [r4, #8]
 80093a2:	2d00      	cmp	r5, #0
 80093a4:	bfa2      	ittt	ge
 80093a6:	6821      	ldrge	r1, [r4, #0]
 80093a8:	f021 0104 	bicge.w	r1, r1, #4
 80093ac:	6021      	strge	r1, [r4, #0]
 80093ae:	b90e      	cbnz	r6, 80093b4 <_printf_i+0x118>
 80093b0:	2d00      	cmp	r5, #0
 80093b2:	d04d      	beq.n	8009450 <_printf_i+0x1b4>
 80093b4:	4615      	mov	r5, r2
 80093b6:	fbb6 f1f3 	udiv	r1, r6, r3
 80093ba:	fb03 6711 	mls	r7, r3, r1, r6
 80093be:	5dc7      	ldrb	r7, [r0, r7]
 80093c0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80093c4:	4637      	mov	r7, r6
 80093c6:	42bb      	cmp	r3, r7
 80093c8:	460e      	mov	r6, r1
 80093ca:	d9f4      	bls.n	80093b6 <_printf_i+0x11a>
 80093cc:	2b08      	cmp	r3, #8
 80093ce:	d10b      	bne.n	80093e8 <_printf_i+0x14c>
 80093d0:	6823      	ldr	r3, [r4, #0]
 80093d2:	07de      	lsls	r6, r3, #31
 80093d4:	d508      	bpl.n	80093e8 <_printf_i+0x14c>
 80093d6:	6923      	ldr	r3, [r4, #16]
 80093d8:	6861      	ldr	r1, [r4, #4]
 80093da:	4299      	cmp	r1, r3
 80093dc:	bfde      	ittt	le
 80093de:	2330      	movle	r3, #48	; 0x30
 80093e0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80093e4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80093e8:	1b52      	subs	r2, r2, r5
 80093ea:	6122      	str	r2, [r4, #16]
 80093ec:	f8cd a000 	str.w	sl, [sp]
 80093f0:	464b      	mov	r3, r9
 80093f2:	aa03      	add	r2, sp, #12
 80093f4:	4621      	mov	r1, r4
 80093f6:	4640      	mov	r0, r8
 80093f8:	f7ff fee2 	bl	80091c0 <_printf_common>
 80093fc:	3001      	adds	r0, #1
 80093fe:	d14c      	bne.n	800949a <_printf_i+0x1fe>
 8009400:	f04f 30ff 	mov.w	r0, #4294967295
 8009404:	b004      	add	sp, #16
 8009406:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800940a:	4835      	ldr	r0, [pc, #212]	; (80094e0 <_printf_i+0x244>)
 800940c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009410:	6829      	ldr	r1, [r5, #0]
 8009412:	6823      	ldr	r3, [r4, #0]
 8009414:	f851 6b04 	ldr.w	r6, [r1], #4
 8009418:	6029      	str	r1, [r5, #0]
 800941a:	061d      	lsls	r5, r3, #24
 800941c:	d514      	bpl.n	8009448 <_printf_i+0x1ac>
 800941e:	07df      	lsls	r7, r3, #31
 8009420:	bf44      	itt	mi
 8009422:	f043 0320 	orrmi.w	r3, r3, #32
 8009426:	6023      	strmi	r3, [r4, #0]
 8009428:	b91e      	cbnz	r6, 8009432 <_printf_i+0x196>
 800942a:	6823      	ldr	r3, [r4, #0]
 800942c:	f023 0320 	bic.w	r3, r3, #32
 8009430:	6023      	str	r3, [r4, #0]
 8009432:	2310      	movs	r3, #16
 8009434:	e7b0      	b.n	8009398 <_printf_i+0xfc>
 8009436:	6823      	ldr	r3, [r4, #0]
 8009438:	f043 0320 	orr.w	r3, r3, #32
 800943c:	6023      	str	r3, [r4, #0]
 800943e:	2378      	movs	r3, #120	; 0x78
 8009440:	4828      	ldr	r0, [pc, #160]	; (80094e4 <_printf_i+0x248>)
 8009442:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009446:	e7e3      	b.n	8009410 <_printf_i+0x174>
 8009448:	0659      	lsls	r1, r3, #25
 800944a:	bf48      	it	mi
 800944c:	b2b6      	uxthmi	r6, r6
 800944e:	e7e6      	b.n	800941e <_printf_i+0x182>
 8009450:	4615      	mov	r5, r2
 8009452:	e7bb      	b.n	80093cc <_printf_i+0x130>
 8009454:	682b      	ldr	r3, [r5, #0]
 8009456:	6826      	ldr	r6, [r4, #0]
 8009458:	6961      	ldr	r1, [r4, #20]
 800945a:	1d18      	adds	r0, r3, #4
 800945c:	6028      	str	r0, [r5, #0]
 800945e:	0635      	lsls	r5, r6, #24
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	d501      	bpl.n	8009468 <_printf_i+0x1cc>
 8009464:	6019      	str	r1, [r3, #0]
 8009466:	e002      	b.n	800946e <_printf_i+0x1d2>
 8009468:	0670      	lsls	r0, r6, #25
 800946a:	d5fb      	bpl.n	8009464 <_printf_i+0x1c8>
 800946c:	8019      	strh	r1, [r3, #0]
 800946e:	2300      	movs	r3, #0
 8009470:	6123      	str	r3, [r4, #16]
 8009472:	4615      	mov	r5, r2
 8009474:	e7ba      	b.n	80093ec <_printf_i+0x150>
 8009476:	682b      	ldr	r3, [r5, #0]
 8009478:	1d1a      	adds	r2, r3, #4
 800947a:	602a      	str	r2, [r5, #0]
 800947c:	681d      	ldr	r5, [r3, #0]
 800947e:	6862      	ldr	r2, [r4, #4]
 8009480:	2100      	movs	r1, #0
 8009482:	4628      	mov	r0, r5
 8009484:	f7f6 fec4 	bl	8000210 <memchr>
 8009488:	b108      	cbz	r0, 800948e <_printf_i+0x1f2>
 800948a:	1b40      	subs	r0, r0, r5
 800948c:	6060      	str	r0, [r4, #4]
 800948e:	6863      	ldr	r3, [r4, #4]
 8009490:	6123      	str	r3, [r4, #16]
 8009492:	2300      	movs	r3, #0
 8009494:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009498:	e7a8      	b.n	80093ec <_printf_i+0x150>
 800949a:	6923      	ldr	r3, [r4, #16]
 800949c:	462a      	mov	r2, r5
 800949e:	4649      	mov	r1, r9
 80094a0:	4640      	mov	r0, r8
 80094a2:	47d0      	blx	sl
 80094a4:	3001      	adds	r0, #1
 80094a6:	d0ab      	beq.n	8009400 <_printf_i+0x164>
 80094a8:	6823      	ldr	r3, [r4, #0]
 80094aa:	079b      	lsls	r3, r3, #30
 80094ac:	d413      	bmi.n	80094d6 <_printf_i+0x23a>
 80094ae:	68e0      	ldr	r0, [r4, #12]
 80094b0:	9b03      	ldr	r3, [sp, #12]
 80094b2:	4298      	cmp	r0, r3
 80094b4:	bfb8      	it	lt
 80094b6:	4618      	movlt	r0, r3
 80094b8:	e7a4      	b.n	8009404 <_printf_i+0x168>
 80094ba:	2301      	movs	r3, #1
 80094bc:	4632      	mov	r2, r6
 80094be:	4649      	mov	r1, r9
 80094c0:	4640      	mov	r0, r8
 80094c2:	47d0      	blx	sl
 80094c4:	3001      	adds	r0, #1
 80094c6:	d09b      	beq.n	8009400 <_printf_i+0x164>
 80094c8:	3501      	adds	r5, #1
 80094ca:	68e3      	ldr	r3, [r4, #12]
 80094cc:	9903      	ldr	r1, [sp, #12]
 80094ce:	1a5b      	subs	r3, r3, r1
 80094d0:	42ab      	cmp	r3, r5
 80094d2:	dcf2      	bgt.n	80094ba <_printf_i+0x21e>
 80094d4:	e7eb      	b.n	80094ae <_printf_i+0x212>
 80094d6:	2500      	movs	r5, #0
 80094d8:	f104 0619 	add.w	r6, r4, #25
 80094dc:	e7f5      	b.n	80094ca <_printf_i+0x22e>
 80094de:	bf00      	nop
 80094e0:	0801c7a1 	.word	0x0801c7a1
 80094e4:	0801c7b2 	.word	0x0801c7b2

080094e8 <_sbrk_r>:
 80094e8:	b538      	push	{r3, r4, r5, lr}
 80094ea:	4d06      	ldr	r5, [pc, #24]	; (8009504 <_sbrk_r+0x1c>)
 80094ec:	2300      	movs	r3, #0
 80094ee:	4604      	mov	r4, r0
 80094f0:	4608      	mov	r0, r1
 80094f2:	602b      	str	r3, [r5, #0]
 80094f4:	f7f7 fe76 	bl	80011e4 <_sbrk>
 80094f8:	1c43      	adds	r3, r0, #1
 80094fa:	d102      	bne.n	8009502 <_sbrk_r+0x1a>
 80094fc:	682b      	ldr	r3, [r5, #0]
 80094fe:	b103      	cbz	r3, 8009502 <_sbrk_r+0x1a>
 8009500:	6023      	str	r3, [r4, #0]
 8009502:	bd38      	pop	{r3, r4, r5, pc}
 8009504:	200008a0 	.word	0x200008a0

08009508 <__sread>:
 8009508:	b510      	push	{r4, lr}
 800950a:	460c      	mov	r4, r1
 800950c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009510:	f000 f8a0 	bl	8009654 <_read_r>
 8009514:	2800      	cmp	r0, #0
 8009516:	bfab      	itete	ge
 8009518:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800951a:	89a3      	ldrhlt	r3, [r4, #12]
 800951c:	181b      	addge	r3, r3, r0
 800951e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009522:	bfac      	ite	ge
 8009524:	6563      	strge	r3, [r4, #84]	; 0x54
 8009526:	81a3      	strhlt	r3, [r4, #12]
 8009528:	bd10      	pop	{r4, pc}

0800952a <__swrite>:
 800952a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800952e:	461f      	mov	r7, r3
 8009530:	898b      	ldrh	r3, [r1, #12]
 8009532:	05db      	lsls	r3, r3, #23
 8009534:	4605      	mov	r5, r0
 8009536:	460c      	mov	r4, r1
 8009538:	4616      	mov	r6, r2
 800953a:	d505      	bpl.n	8009548 <__swrite+0x1e>
 800953c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009540:	2302      	movs	r3, #2
 8009542:	2200      	movs	r2, #0
 8009544:	f000 f868 	bl	8009618 <_lseek_r>
 8009548:	89a3      	ldrh	r3, [r4, #12]
 800954a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800954e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009552:	81a3      	strh	r3, [r4, #12]
 8009554:	4632      	mov	r2, r6
 8009556:	463b      	mov	r3, r7
 8009558:	4628      	mov	r0, r5
 800955a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800955e:	f000 b817 	b.w	8009590 <_write_r>

08009562 <__sseek>:
 8009562:	b510      	push	{r4, lr}
 8009564:	460c      	mov	r4, r1
 8009566:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800956a:	f000 f855 	bl	8009618 <_lseek_r>
 800956e:	1c43      	adds	r3, r0, #1
 8009570:	89a3      	ldrh	r3, [r4, #12]
 8009572:	bf15      	itete	ne
 8009574:	6560      	strne	r0, [r4, #84]	; 0x54
 8009576:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800957a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800957e:	81a3      	strheq	r3, [r4, #12]
 8009580:	bf18      	it	ne
 8009582:	81a3      	strhne	r3, [r4, #12]
 8009584:	bd10      	pop	{r4, pc}

08009586 <__sclose>:
 8009586:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800958a:	f000 b813 	b.w	80095b4 <_close_r>
	...

08009590 <_write_r>:
 8009590:	b538      	push	{r3, r4, r5, lr}
 8009592:	4d07      	ldr	r5, [pc, #28]	; (80095b0 <_write_r+0x20>)
 8009594:	4604      	mov	r4, r0
 8009596:	4608      	mov	r0, r1
 8009598:	4611      	mov	r1, r2
 800959a:	2200      	movs	r2, #0
 800959c:	602a      	str	r2, [r5, #0]
 800959e:	461a      	mov	r2, r3
 80095a0:	f7f7 fb76 	bl	8000c90 <_write>
 80095a4:	1c43      	adds	r3, r0, #1
 80095a6:	d102      	bne.n	80095ae <_write_r+0x1e>
 80095a8:	682b      	ldr	r3, [r5, #0]
 80095aa:	b103      	cbz	r3, 80095ae <_write_r+0x1e>
 80095ac:	6023      	str	r3, [r4, #0]
 80095ae:	bd38      	pop	{r3, r4, r5, pc}
 80095b0:	200008a0 	.word	0x200008a0

080095b4 <_close_r>:
 80095b4:	b538      	push	{r3, r4, r5, lr}
 80095b6:	4d06      	ldr	r5, [pc, #24]	; (80095d0 <_close_r+0x1c>)
 80095b8:	2300      	movs	r3, #0
 80095ba:	4604      	mov	r4, r0
 80095bc:	4608      	mov	r0, r1
 80095be:	602b      	str	r3, [r5, #0]
 80095c0:	f7f7 fddc 	bl	800117c <_close>
 80095c4:	1c43      	adds	r3, r0, #1
 80095c6:	d102      	bne.n	80095ce <_close_r+0x1a>
 80095c8:	682b      	ldr	r3, [r5, #0]
 80095ca:	b103      	cbz	r3, 80095ce <_close_r+0x1a>
 80095cc:	6023      	str	r3, [r4, #0]
 80095ce:	bd38      	pop	{r3, r4, r5, pc}
 80095d0:	200008a0 	.word	0x200008a0

080095d4 <_fstat_r>:
 80095d4:	b538      	push	{r3, r4, r5, lr}
 80095d6:	4d07      	ldr	r5, [pc, #28]	; (80095f4 <_fstat_r+0x20>)
 80095d8:	2300      	movs	r3, #0
 80095da:	4604      	mov	r4, r0
 80095dc:	4608      	mov	r0, r1
 80095de:	4611      	mov	r1, r2
 80095e0:	602b      	str	r3, [r5, #0]
 80095e2:	f7f7 fdd7 	bl	8001194 <_fstat>
 80095e6:	1c43      	adds	r3, r0, #1
 80095e8:	d102      	bne.n	80095f0 <_fstat_r+0x1c>
 80095ea:	682b      	ldr	r3, [r5, #0]
 80095ec:	b103      	cbz	r3, 80095f0 <_fstat_r+0x1c>
 80095ee:	6023      	str	r3, [r4, #0]
 80095f0:	bd38      	pop	{r3, r4, r5, pc}
 80095f2:	bf00      	nop
 80095f4:	200008a0 	.word	0x200008a0

080095f8 <_isatty_r>:
 80095f8:	b538      	push	{r3, r4, r5, lr}
 80095fa:	4d06      	ldr	r5, [pc, #24]	; (8009614 <_isatty_r+0x1c>)
 80095fc:	2300      	movs	r3, #0
 80095fe:	4604      	mov	r4, r0
 8009600:	4608      	mov	r0, r1
 8009602:	602b      	str	r3, [r5, #0]
 8009604:	f7f7 fdd6 	bl	80011b4 <_isatty>
 8009608:	1c43      	adds	r3, r0, #1
 800960a:	d102      	bne.n	8009612 <_isatty_r+0x1a>
 800960c:	682b      	ldr	r3, [r5, #0]
 800960e:	b103      	cbz	r3, 8009612 <_isatty_r+0x1a>
 8009610:	6023      	str	r3, [r4, #0]
 8009612:	bd38      	pop	{r3, r4, r5, pc}
 8009614:	200008a0 	.word	0x200008a0

08009618 <_lseek_r>:
 8009618:	b538      	push	{r3, r4, r5, lr}
 800961a:	4d07      	ldr	r5, [pc, #28]	; (8009638 <_lseek_r+0x20>)
 800961c:	4604      	mov	r4, r0
 800961e:	4608      	mov	r0, r1
 8009620:	4611      	mov	r1, r2
 8009622:	2200      	movs	r2, #0
 8009624:	602a      	str	r2, [r5, #0]
 8009626:	461a      	mov	r2, r3
 8009628:	f7f7 fdcf 	bl	80011ca <_lseek>
 800962c:	1c43      	adds	r3, r0, #1
 800962e:	d102      	bne.n	8009636 <_lseek_r+0x1e>
 8009630:	682b      	ldr	r3, [r5, #0]
 8009632:	b103      	cbz	r3, 8009636 <_lseek_r+0x1e>
 8009634:	6023      	str	r3, [r4, #0]
 8009636:	bd38      	pop	{r3, r4, r5, pc}
 8009638:	200008a0 	.word	0x200008a0

0800963c <__malloc_lock>:
 800963c:	4801      	ldr	r0, [pc, #4]	; (8009644 <__malloc_lock+0x8>)
 800963e:	f7ff bb1d 	b.w	8008c7c <__retarget_lock_acquire_recursive>
 8009642:	bf00      	nop
 8009644:	20000894 	.word	0x20000894

08009648 <__malloc_unlock>:
 8009648:	4801      	ldr	r0, [pc, #4]	; (8009650 <__malloc_unlock+0x8>)
 800964a:	f7ff bb18 	b.w	8008c7e <__retarget_lock_release_recursive>
 800964e:	bf00      	nop
 8009650:	20000894 	.word	0x20000894

08009654 <_read_r>:
 8009654:	b538      	push	{r3, r4, r5, lr}
 8009656:	4d07      	ldr	r5, [pc, #28]	; (8009674 <_read_r+0x20>)
 8009658:	4604      	mov	r4, r0
 800965a:	4608      	mov	r0, r1
 800965c:	4611      	mov	r1, r2
 800965e:	2200      	movs	r2, #0
 8009660:	602a      	str	r2, [r5, #0]
 8009662:	461a      	mov	r2, r3
 8009664:	f7f7 fd6d 	bl	8001142 <_read>
 8009668:	1c43      	adds	r3, r0, #1
 800966a:	d102      	bne.n	8009672 <_read_r+0x1e>
 800966c:	682b      	ldr	r3, [r5, #0]
 800966e:	b103      	cbz	r3, 8009672 <_read_r+0x1e>
 8009670:	6023      	str	r3, [r4, #0]
 8009672:	bd38      	pop	{r3, r4, r5, pc}
 8009674:	200008a0 	.word	0x200008a0

08009678 <sqrtf>:
 8009678:	b508      	push	{r3, lr}
 800967a:	ed2d 8b02 	vpush	{d8}
 800967e:	eeb0 8a40 	vmov.f32	s16, s0
 8009682:	f000 f817 	bl	80096b4 <__ieee754_sqrtf>
 8009686:	eeb4 8a48 	vcmp.f32	s16, s16
 800968a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800968e:	d60c      	bvs.n	80096aa <sqrtf+0x32>
 8009690:	eddf 8a07 	vldr	s17, [pc, #28]	; 80096b0 <sqrtf+0x38>
 8009694:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8009698:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800969c:	d505      	bpl.n	80096aa <sqrtf+0x32>
 800969e:	f7fe ffb5 	bl	800860c <__errno>
 80096a2:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 80096a6:	2321      	movs	r3, #33	; 0x21
 80096a8:	6003      	str	r3, [r0, #0]
 80096aa:	ecbd 8b02 	vpop	{d8}
 80096ae:	bd08      	pop	{r3, pc}
 80096b0:	00000000 	.word	0x00000000

080096b4 <__ieee754_sqrtf>:
 80096b4:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80096b8:	4770      	bx	lr
	...

080096bc <_init>:
 80096bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096be:	bf00      	nop
 80096c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80096c2:	bc08      	pop	{r3}
 80096c4:	469e      	mov	lr, r3
 80096c6:	4770      	bx	lr

080096c8 <_fini>:
 80096c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096ca:	bf00      	nop
 80096cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80096ce:	bc08      	pop	{r3}
 80096d0:	469e      	mov	lr, r3
 80096d2:	4770      	bx	lr
